Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Tabular Data using Scikit-Learn and Cleanlab", "Text Classification with Noisy Labels", "Audio Classification with SpeechBrain and Cleanlab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Image Classification with PyTorch and Cleanlab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Find Dataset-level Issues for Dataset Curation", "FAQ", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 79, 84, 85, 92, 94, 95], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 84, 85, 92, 94, 95], "generate_noise_matrix_from_trac": [0, 1, 84, 85, 92, 94, 95], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 15, 39, 44, 46, 47, 48, 49, 50, 51, 63, 86, 90, 101], "method": [1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101], "ar": [1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 25, 28, 29, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 101], "us": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 78, 79, 84, 90, 98], "benchmark": [1, 36, 78, 79, 84, 85, 92, 94, 95], "cleanlab": [1, 2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 84, 85, 90, 93, 98], "": [1, 2, 3, 9, 17, 31, 35, 36, 40, 44, 47, 49, 51, 56, 57, 61, 63, 64, 65, 66, 68, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "core": [1, 39, 42, 70, 72], "algorithm": [1, 2, 7, 9, 30, 37, 41, 51, 56, 65, 74, 76, 78, 91, 92, 94, 101], "These": [1, 2, 3, 4, 7, 9, 20, 36, 38, 40, 41, 42, 43, 54, 56, 57, 60, 64, 65, 69, 73, 74, 76, 77, 81, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "introduc": [1, 83, 91, 92], "synthet": [1, 94, 95, 100], "nois": [1, 2, 3, 35, 42, 45, 51, 57, 84, 85, 90, 94, 99], "label": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 15, 19, 20, 21, 23, 28, 30, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 84, 90, 93, 97, 98], "classif": [1, 3, 4, 6, 9, 11, 13, 15, 31, 33, 35, 39, 41, 42, 45, 47, 48, 51, 56, 57, 58, 59, 60, 65, 66, 74, 75, 76, 77, 78, 79, 80, 84, 85, 93, 94, 97, 98, 99, 100], "dataset": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 24, 25, 26, 27, 29, 30, 38, 39, 40, 41, 42, 45, 47, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 88, 93, 94, 98], "specif": [1, 3, 4, 8, 13, 14, 15, 26, 32, 33, 38, 54, 58, 61, 64, 73, 77, 86, 88, 89, 92, 96, 101], "thi": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "modul": [1, 3, 12, 13, 14, 15, 20, 23, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 47, 49, 51, 54, 56, 61, 64, 65, 66, 78, 86, 91, 95], "provid": [1, 2, 3, 4, 6, 7, 8, 9, 13, 15, 17, 22, 29, 33, 35, 36, 37, 39, 40, 42, 45, 51, 55, 56, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 97, 98, 99, 100, 101], "gener": [1, 2, 3, 6, 9, 17, 22, 24, 32, 35, 47, 51, 52, 65, 66, 68, 73, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101], "valid": [1, 2, 3, 4, 9, 11, 31, 33, 35, 42, 43, 45, 46, 47, 49, 51, 56, 58, 61, 64, 66, 68, 69, 77, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101], "matric": [1, 3, 45, 91], "which": [1, 2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 21, 25, 31, 32, 33, 35, 36, 40, 41, 42, 45, 47, 50, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 101], "learn": [1, 2, 3, 4, 8, 9, 13, 15, 21, 29, 32, 37, 38, 39, 40, 42, 44, 46, 51, 54, 56, 58, 65, 67, 69, 72, 76, 78, 82, 83, 84, 86, 88, 89, 90, 94, 95, 99], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101], "possibl": [1, 2, 3, 6, 9, 35, 36, 40, 42, 44, 45, 47, 58, 59, 60, 61, 63, 64, 65, 66, 68, 74, 76, 77, 85, 91, 92, 94, 95, 96, 99, 100, 101], "noisi": [1, 2, 3, 9, 35, 37, 40, 42, 45, 51, 57, 58, 60, 66, 68, 69, 70, 72, 73, 79, 84, 85, 88, 89, 91, 93, 94], "given": [1, 2, 3, 4, 9, 13, 29, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 99, 100, 101], "matrix": [1, 2, 3, 4, 9, 15, 17, 30, 35, 42, 44, 45, 48, 51, 52, 58, 61, 63, 64, 65, 66, 88, 96, 97], "trace": [1, 84, 85, 92, 94, 95], "valu": [1, 2, 3, 4, 9, 11, 12, 15, 17, 21, 25, 26, 31, 33, 35, 36, 37, 39, 40, 42, 44, 45, 47, 49, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 77, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "more": [1, 2, 3, 4, 6, 8, 9, 12, 13, 15, 17, 25, 35, 36, 39, 40, 41, 44, 47, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 72, 73, 74, 76, 78, 83, 84, 86, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101], "function": [1, 2, 3, 4, 6, 9, 12, 13, 15, 22, 25, 29, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 82, 83, 85, 90, 91, 92, 94, 95, 96, 100, 101], "noise_matrix": [1, 2, 3, 9, 45, 51, 84, 85, 92, 94, 95], "py": [1, 3, 32, 36, 37, 42, 45, 47, 82, 83, 84, 85, 89, 91, 92, 94, 95], "verbos": [1, 2, 4, 6, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 39, 42, 56, 57, 58, 63, 65, 66, 68, 70, 72, 73, 77, 84, 92, 94], "fals": [1, 2, 3, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 46, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 96, 97, 99, 100], "sourc": [1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77], "prior": [1, 2, 3, 35, 42, 45, 47], "repres": [1, 2, 3, 6, 9, 11, 15, 17, 25, 31, 33, 35, 39, 42, 45, 48, 49, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 101], "p": [1, 2, 3, 4, 9, 35, 42, 44, 45, 51, 56, 64, 65, 66, 70, 88, 89, 92, 94, 101], "true_label": [1, 2, 3, 35, 45, 51, 92, 94], "k": [1, 2, 3, 4, 7, 9, 11, 15, 17, 18, 22, 25, 27, 30, 35, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 81, 83, 84, 85, 91, 92, 94, 95, 96, 97, 100, 101], "check": [1, 2, 4, 5, 8, 9, 11, 15, 26, 33, 36, 39, 40, 46, 52, 55, 61, 64, 68, 78, 81, 82, 83, 84, 85, 86, 91, 92, 94, 95, 99], "learnabl": 1, "mean": [1, 2, 6, 7, 11, 12, 21, 25, 37, 40, 45, 47, 49, 63, 68, 82, 85, 89, 91, 92, 94, 95, 96, 97, 99], "achiev": [1, 2, 36, 37, 40, 68, 91, 94, 101], "better": [1, 4, 42, 56, 58, 66, 68, 69, 78, 82, 83, 85, 88, 89, 91, 92, 95, 96, 97, 101], "than": [1, 2, 3, 6, 8, 9, 25, 27, 30, 35, 42, 51, 55, 56, 61, 63, 65, 66, 68, 72, 76, 81, 83, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "random": [1, 2, 3, 6, 9, 17, 30, 39, 47, 56, 66, 68, 81, 83, 84, 85, 86, 88, 91, 92, 94, 95, 97], "perform": [1, 2, 6, 9, 25, 27, 30, 36, 40, 47, 64, 68, 78, 81, 82, 84, 91, 92, 94, 95, 98, 99], "averag": [1, 3, 4, 9, 21, 27, 35, 36, 40, 47, 49, 56, 57, 64, 65, 66, 91, 94, 97], "amount": [1, 3, 86], "paramet": [1, 2, 3, 4, 8, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 82, 83, 85, 86, 89], "np": [1, 2, 3, 4, 6, 15, 17, 30, 35, 37, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 76, 77, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "ndarrai": [1, 2, 3, 4, 15, 22, 24, 25, 29, 30, 31, 35, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 101], "an": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101], "arrai": [1, 2, 3, 4, 6, 9, 11, 15, 17, 25, 31, 35, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 82, 83, 84, 85, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "shape": [1, 2, 3, 4, 15, 17, 35, 37, 39, 41, 42, 44, 45, 46, 47, 49, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 83, 90, 91, 92, 95, 96, 97, 100, 101], "condit": [1, 2, 3, 45, 50, 51, 66, 86, 92, 101], "probabl": [1, 2, 3, 4, 7, 9, 15, 22, 24, 27, 31, 35, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 90, 91, 92, 93, 95, 96, 97, 100, 101], "k_": [1, 2, 3, 45, 51], "k_y": [1, 2, 3, 45, 51], "contain": [1, 2, 3, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 45, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 72, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100], "fraction": [1, 2, 3, 9, 19, 37, 45, 51, 56, 68, 88, 91], "exampl": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 94, 95, 96, 98, 99, 100, 101], "everi": [1, 2, 3, 4, 15, 36, 40, 42, 45, 50, 51, 58, 66, 68, 69, 81, 83, 84, 85, 86, 88, 89, 91, 94, 96, 98, 100, 101], "class": [1, 2, 3, 4, 6, 8, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101], "other": [1, 2, 3, 4, 9, 15, 21, 26, 35, 36, 38, 39, 40, 42, 45, 48, 51, 52, 54, 56, 57, 60, 64, 65, 66, 68, 73, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 95, 97, 100, 101], "assum": [1, 2, 3, 11, 42, 45, 50, 51, 66, 70, 73, 91, 95, 97, 99, 100, 101], "column": [1, 2, 3, 4, 9, 11, 12, 29, 35, 39, 42, 45, 47, 48, 50, 51, 56, 57, 58, 60, 61, 64, 65, 66, 68, 73, 74, 76, 77, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 99, 100, 101], "sum": [1, 2, 3, 25, 30, 31, 35, 45, 47, 51, 57, 58, 60, 63, 68, 84, 85, 86, 91, 92, 94, 95, 100, 101], "1": [1, 2, 3, 4, 6, 9, 11, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 90, 91, 98], "each": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 19, 21, 22, 24, 25, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "true": [1, 2, 3, 4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 45, 47, 50, 51, 52, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101], "return": [1, 2, 3, 4, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "type": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 101], "bool": [1, 2, 3, 4, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 47, 50, 51, 56, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77], "is_valid": 1, "whether": [1, 3, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 36, 39, 40, 42, 51, 56, 57, 58, 60, 61, 77, 82, 83, 85, 86, 88, 89, 90, 91, 92, 99, 101], "from": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 26, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 56, 58, 60, 63, 64, 65, 66, 68, 69, 74, 76, 77, 78, 83, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101], "perfect": [1, 2, 35, 68, 92, 96], "exactli": [1, 3, 9, 35, 36, 40, 42, 59, 65, 84, 85, 86, 88, 89, 92], "yield": [1, 36, 40], "between": [1, 4, 9, 14, 15, 20, 21, 23, 25, 28, 31, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 54, 56, 57, 60, 63, 65, 66, 68, 69, 72, 76, 77, 79, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101], "below": [1, 3, 4, 9, 35, 36, 39, 40, 42, 44, 47, 56, 57, 58, 63, 64, 72, 76, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "we": [1, 2, 3, 4, 6, 9, 12, 21, 36, 39, 40, 42, 47, 51, 52, 55, 56, 63, 64, 66, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "loop": [1, 3, 45, 51, 86, 96], "implement": [1, 2, 3, 8, 13, 21, 36, 37, 39, 40, 45, 51, 68, 78, 81, 83, 84, 88, 97, 98], "what": [1, 4, 8, 9, 15, 32, 35, 37, 39, 42, 56, 57, 61, 63, 81, 82, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 99, 100, 101], "doe": [1, 2, 3, 6, 9, 39, 40, 42, 47, 52, 63, 64, 68, 70, 72, 76, 82, 83, 84, 85, 86, 88, 89, 95, 99, 100], "do": [1, 2, 4, 8, 9, 35, 39, 40, 51, 52, 65, 66, 70, 81, 82, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 99, 100, 101], "fast": 1, "explain": [1, 9], "python": [1, 2, 40, 55, 68, 82, 83, 84, 85, 89, 90, 97], "pseudocod": [1, 98], "happen": [1, 9, 42, 58, 89, 94, 100], "n": [1, 2, 3, 4, 6, 35, 36, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 81, 82, 83, 86, 89, 90, 91, 94, 95, 96, 99, 100, 101], "without": [1, 2, 4, 8, 9, 11, 13, 19, 36, 40, 60, 68, 78, 82, 83, 89, 91, 92, 96, 97], "ani": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 39, 40, 42, 44, 46, 49, 50, 51, 55, 56, 58, 60, 61, 63, 64, 66, 68, 70, 72, 73, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100], "distinct": [1, 17, 51, 101], "natur": [1, 9, 94, 97], "number": [1, 2, 3, 4, 6, 7, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 79, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 100, 101], "0": [1, 2, 3, 4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "count_joint": 1, "len": [1, 2, 3, 6, 35, 39, 45, 50, 51, 52, 65, 66, 68, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101], "y": [1, 2, 3, 4, 7, 17, 29, 30, 40, 45, 47, 51, 52, 55, 64, 68, 69, 82, 83, 84, 85, 88, 91, 92, 94, 95, 97, 99], "round": [1, 39, 42, 51, 68, 91, 99], "astyp": [1, 94], "int": [1, 2, 3, 4, 6, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 36, 37, 39, 40, 42, 47, 48, 49, 50, 51, 52, 57, 58, 60, 64, 65, 66, 68, 70, 72, 73, 74, 77, 83, 84, 86, 96, 97], "rang": [1, 3, 4, 6, 11, 45, 47, 49, 51, 64, 68, 69, 86, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "idx_flip": 1, "where": [1, 2, 3, 4, 6, 9, 11, 12, 15, 21, 35, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 82, 83, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "pragma": 1, "cover": [1, 3, 79, 90, 91], "choic": [1, 7, 42, 49, 86, 91, 95, 97], "replac": [1, 50, 55, 66, 81, 82, 84, 85, 86, 89, 90, 91, 94, 97], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 66, 83, 84, 85], "05": [1, 9, 25, 29, 50, 64, 68, 74, 76, 88, 90, 91, 92, 96, 101], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 84, 85, 92, 94, 95], "none": [1, 2, 3, 4, 6, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 84, 85, 86, 91, 92, 94, 95, 100], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 9, 25, 38, 40, 47, 68, 81, 83, 84, 85, 88, 90, 92, 94, 95], "max_it": [1, 82, 83, 89, 97], "10000": [1, 39, 90, 91], "x": [1, 2, 3, 4, 9, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 36, 37, 40, 42, 44, 45, 47, 50, 51, 52, 55, 56, 58, 64, 65, 66, 68, 70, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 94, 95, 97, 99], "diagon": [1, 3, 4, 42, 45, 51], "equal": [1, 3, 9, 11, 58, 63, 73, 98], "creat": [1, 2, 8, 15, 17, 36, 39, 40, 42, 51, 68, 78, 82, 83, 86, 88, 89, 91, 100, 101], "impli": [1, 9, 35, 57, 64], "float": [1, 2, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 56, 57, 58, 60, 63, 64, 68, 72, 76, 83, 84, 85, 92, 94, 95], "entri": [1, 3, 4, 35, 36, 40, 42, 44, 48, 49, 51, 56, 57, 58, 61, 81, 82, 88, 89, 92, 95, 96, 99], "maximum": [1, 9, 65, 73, 77, 100], "minimum": [1, 7, 9, 19, 42, 44, 58, 63, 76], "noise_r": 1, "non": [1, 2, 3, 4, 6, 8, 15, 25, 36, 40, 42, 63, 68, 84, 91, 92, 94, 96, 97], "default": [1, 2, 3, 4, 6, 9, 13, 15, 27, 29, 32, 35, 36, 37, 39, 40, 42, 44, 45, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 84, 86, 91, 99, 100], "If": [1, 2, 3, 4, 9, 11, 12, 15, 25, 27, 33, 35, 36, 39, 40, 42, 44, 45, 47, 50, 51, 55, 56, 57, 58, 61, 63, 64, 65, 68, 69, 70, 72, 73, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "have": [1, 2, 3, 4, 6, 8, 9, 15, 20, 23, 25, 28, 35, 36, 38, 39, 40, 42, 45, 47, 51, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 73, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "all": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 15, 21, 32, 35, 36, 39, 40, 41, 42, 45, 47, 48, 50, 51, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "necessari": [1, 2, 3, 6, 9, 11, 50, 84], "In": [1, 2, 3, 4, 9, 35, 36, 39, 40, 55, 56, 57, 59, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101], "particular": [1, 4, 5, 9, 12, 13, 15, 18, 19, 21, 25, 26, 27, 30, 36, 40, 51, 56, 60, 64, 68, 73, 77, 78, 81, 82, 83, 85, 89, 91, 94, 95, 97, 99], "satisfi": [1, 3, 35], "requir": [1, 2, 4, 6, 7, 8, 9, 10, 11, 29, 34, 36, 37, 38, 39, 40, 42, 45, 51, 54, 55, 58, 65, 66, 68, 70, 78, 79, 83, 90, 91, 92, 98], "argument": [1, 2, 3, 4, 9, 15, 22, 26, 29, 30, 31, 36, 39, 40, 41, 42, 47, 52, 55, 56, 57, 58, 60, 63, 64, 65, 66, 68, 72, 73, 74, 76, 82, 85, 86, 89, 90, 91, 95, 96, 99, 101], "when": [1, 2, 3, 4, 9, 11, 13, 22, 25, 36, 40, 42, 45, 47, 51, 55, 58, 60, 61, 63, 65, 66, 68, 69, 81, 82, 84, 85, 86, 88, 89, 94, 98, 99, 100, 101], "The": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101], "rate": [1, 2, 3, 9, 37, 51, 83, 101], "set": [1, 2, 3, 4, 8, 9, 11, 12, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 36, 39, 40, 42, 46, 47, 49, 51, 55, 56, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 81, 82, 84, 85, 88, 89, 91, 94, 95, 97, 98, 99, 100, 101], "note": [1, 2, 3, 6, 7, 9, 11, 26, 30, 33, 36, 39, 40, 41, 42, 47, 51, 55, 56, 61, 63, 64, 65, 66, 68, 69, 73, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "you": [1, 2, 3, 4, 6, 8, 9, 13, 15, 35, 36, 38, 39, 40, 42, 47, 54, 55, 56, 58, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "high": [1, 2, 15, 39, 42, 51, 63, 66, 68, 81, 82, 84, 85, 86, 90, 92, 96, 99, 100, 101], "mai": [1, 2, 3, 4, 9, 12, 20, 21, 23, 28, 31, 35, 36, 38, 39, 40, 42, 45, 47, 51, 56, 57, 61, 63, 64, 65, 66, 68, 70, 73, 77, 79, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101], "imposs": [1, 9, 92], "also": [1, 2, 3, 4, 6, 8, 9, 21, 33, 35, 36, 39, 40, 42, 47, 50, 55, 56, 65, 68, 73, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 101], "low": [1, 9, 51, 56, 78, 84, 85, 89, 92, 96, 100], "zero": [1, 3, 4, 36, 40, 44, 51, 52, 84, 86, 95, 96, 97], "forc": [1, 2, 3, 4, 40, 84, 101], "instead": [1, 2, 3, 9, 12, 15, 32, 35, 36, 39, 40, 42, 45, 51, 55, 56, 58, 60, 64, 65, 66, 68, 69, 72, 74, 76, 79, 81, 82, 83, 86, 88, 89, 91, 92, 95, 96, 97, 99, 100, 101], "onli": [1, 2, 3, 4, 6, 9, 15, 22, 25, 29, 35, 36, 39, 40, 41, 42, 44, 45, 50, 51, 52, 55, 56, 65, 66, 68, 70, 72, 76, 77, 78, 82, 83, 84, 85, 86, 89, 94, 95, 96, 97, 98, 99, 100, 101], "guarante": [1, 3, 4, 14, 20, 23, 28, 36, 38, 40, 43, 45, 54, 79], "produc": [1, 2, 4, 8, 9, 15, 47, 56, 66, 68, 70, 72, 78, 81, 82, 83, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101], "higher": [1, 4, 9, 35, 42, 44, 45, 47, 49, 55, 56, 57, 68, 85, 89, 91, 96], "opposit": [1, 101], "occur": [1, 3, 9, 35, 50, 63, 84, 85, 86, 91, 97], "small": [1, 3, 9, 35, 39, 47, 51, 57, 64, 82, 86, 89, 90, 95, 97], "numpi": [1, 3, 4, 6, 9, 11, 17, 30, 31, 39, 40, 41, 47, 49, 50, 52, 55, 60, 63, 68, 69, 74, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "max": [1, 42, 65, 66, 85, 86, 97], "tri": [1, 36, 40, 98], "befor": [1, 2, 3, 36, 40, 49, 51, 65, 68, 73, 81, 82, 89, 91, 92, 94, 97, 99], "option": [1, 2, 3, 4, 6, 7, 8, 11, 12, 15, 22, 25, 29, 35, 36, 39, 40, 42, 45, 47, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 81, 83, 84, 85, 86, 88, 91, 92, 95, 99, 100], "left": [1, 2, 42, 44, 49, 51, 58, 61, 64, 84, 85, 95, 96, 97, 100], "stochast": 1, "exceed": 1, "m": [1, 4, 36, 40, 46, 47, 56, 61, 63, 64, 65, 84, 85, 90, 94, 95, 96, 101], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 36, 40, 55, 91, 92, 100], "length": [1, 4, 11, 25, 26, 35, 37, 42, 51, 58, 61, 65, 66, 68, 70, 73, 77, 81, 83, 95, 97, 100, 101], "must": [1, 2, 3, 4, 6, 15, 35, 36, 37, 38, 40, 42, 45, 47, 48, 51, 54, 55, 56, 57, 58, 65, 66, 68, 70, 72, 73, 74, 76, 77, 83, 94, 98, 100, 101], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 9, 11, 35, 39, 42, 48, 51, 52, 56, 58, 64, 70, 72, 73, 74, 76, 77, 81, 82, 83, 91, 94, 95, 96, 100, 101], "ball": [1, 90], "bin": [1, 3, 58, 84, 85, 97], "ensur": [1, 2, 9, 36, 40, 51, 52, 55, 63, 66, 68, 81, 82, 83, 84, 85, 86, 89, 91, 92, 97, 98, 99], "most": [1, 3, 4, 6, 9, 15, 35, 39, 42, 47, 55, 56, 57, 58, 61, 63, 64, 65, 66, 69, 72, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100], "least": [1, 9, 17, 30, 35, 39, 56, 57, 63, 66, 76, 85, 86, 91, 94, 97, 100], "int_arrai": [1, 51], "can": [2, 3, 4, 6, 7, 8, 12, 13, 15, 32, 33, 35, 36, 37, 38, 39, 40, 42, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 95, 96, 97, 98, 99, 100, 101], "model": [2, 3, 4, 8, 9, 15, 17, 29, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 50, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 84, 85, 90, 93, 98, 100, 101], "For": [2, 3, 4, 6, 8, 9, 10, 15, 21, 34, 35, 36, 39, 40, 42, 45, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 81, 82, 83, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101], "regular": [2, 3, 39, 55], "multi": [2, 3, 9, 31, 35, 36, 39, 40, 42, 46, 47, 48, 51, 52, 57, 58, 59, 60, 65, 66, 78, 91, 92, 93], "task": [2, 4, 6, 9, 10, 11, 13, 14, 15, 24, 29, 32, 35, 39, 45, 47, 48, 49, 51, 56, 58, 66, 68, 78, 82, 83, 89, 90, 91, 92, 95, 97, 99, 100, 101], "cleanlearn": [2, 3, 9, 22, 29, 36, 51, 55, 67, 68, 69, 78, 79, 81, 82, 99], "wrap": [2, 36, 40, 55, 65, 68, 78, 81, 82, 84, 85, 88, 89, 92, 99], "instanc": [2, 3, 4, 5, 6, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 40, 47, 55, 64, 65, 68, 73, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 96], "sklearn": [2, 3, 4, 7, 9, 17, 30, 35, 40, 47, 51, 55, 65, 68, 69, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 99], "classifi": [2, 3, 40, 47, 51, 56, 59, 65, 66, 78, 79, 81, 82, 83, 88, 89, 91, 94, 95, 97, 98, 100, 101], "adher": [2, 40, 68], "estim": [2, 3, 4, 8, 12, 21, 35, 39, 40, 42, 45, 51, 56, 57, 58, 63, 65, 68, 70, 72, 76, 78, 79, 83, 84, 85, 86, 88, 89, 91, 93, 96, 97, 98, 99, 100, 101], "api": [2, 3, 13, 55, 61, 64, 65, 68, 79, 91, 99], "defin": [2, 3, 4, 6, 9, 13, 21, 35, 36, 37, 39, 40, 42, 66, 68, 70, 83, 84, 85, 88, 91, 94, 97, 101], "four": [2, 9, 90, 92, 101], "clf": [2, 3, 4, 47, 68, 78, 81, 88, 91, 92, 95], "fit": [2, 3, 4, 7, 9, 17, 38, 40, 54, 55, 65, 67, 68, 78, 81, 82, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 99, 101], "sample_weight": [2, 40, 68, 92], "predict_proba": [2, 4, 35, 38, 40, 47, 54, 55, 81, 83, 84, 85, 88, 89, 91, 92, 94, 95, 97], "predict": [2, 3, 4, 7, 8, 9, 15, 21, 22, 24, 27, 29, 31, 33, 35, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 90, 91, 92, 93, 97, 99, 100, 101], "score": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 39, 41, 42, 44, 47, 49, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 97, 99], "data": [2, 3, 4, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 47, 48, 51, 54, 55, 56, 57, 58, 59, 63, 65, 66, 67, 68, 73, 74, 75, 76, 77, 79, 82, 86, 87, 93, 98], "e": [2, 3, 4, 9, 11, 21, 31, 35, 36, 39, 40, 42, 45, 47, 48, 51, 52, 56, 57, 58, 59, 61, 64, 65, 66, 68, 70, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99], "featur": [2, 3, 4, 7, 9, 15, 17, 18, 22, 25, 26, 27, 29, 30, 47, 51, 65, 68, 78, 81, 84, 85, 88, 89, 91, 92, 94, 95, 99], "element": [2, 3, 4, 35, 41, 42, 44, 51, 56, 58, 66, 73, 74, 76, 82, 83, 89, 91, 101], "first": [2, 4, 9, 16, 25, 26, 35, 39, 47, 51, 56, 57, 61, 64, 66, 68, 81, 82, 83, 84, 86, 88, 91, 94, 95, 96, 97, 99, 100, 101], "index": [2, 9, 25, 35, 42, 50, 51, 52, 57, 66, 68, 73, 76, 77, 82, 83, 84, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "should": [2, 3, 4, 6, 9, 13, 21, 25, 30, 31, 35, 36, 39, 40, 42, 44, 45, 47, 49, 50, 51, 55, 56, 57, 60, 61, 63, 64, 65, 66, 68, 69, 73, 74, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101], "correspond": [2, 3, 4, 9, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 35, 36, 39, 40, 41, 42, 44, 45, 47, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 73, 74, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "differ": [2, 4, 6, 9, 12, 14, 20, 23, 25, 26, 28, 35, 36, 38, 39, 40, 42, 43, 47, 51, 52, 54, 56, 61, 63, 65, 68, 81, 83, 84, 85, 86, 88, 89, 92, 94, 95, 97, 98, 99], "sampl": [2, 3, 4, 7, 9, 15, 19, 42, 44, 47, 58, 61, 64, 66, 68, 69, 78, 79, 82, 90, 91, 92, 93, 95, 96, 99, 100, 101], "size": [2, 9, 30, 36, 39, 40, 42, 47, 58, 63, 64, 68, 70, 72, 82, 86, 88, 91, 92, 94, 95, 96, 98, 100], "here": [2, 4, 6, 9, 13, 39, 42, 45, 55, 56, 57, 58, 60, 61, 64, 65, 76, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "re": [2, 4, 36, 40, 50, 56, 68, 78, 81, 82, 83, 84, 88, 89, 91, 99, 100, 101], "weight": [2, 9, 36, 37, 40, 47, 56, 63, 66, 68, 82, 83, 84, 85, 89], "loss": [2, 37, 55, 66, 68, 86], "while": [2, 3, 9, 36, 39, 40, 46, 47, 51, 68, 78, 86, 91, 92, 94, 95, 99], "train": [2, 3, 4, 8, 9, 15, 17, 31, 36, 37, 38, 40, 47, 51, 55, 56, 61, 64, 65, 68, 69, 79, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 100, 101], "support": [2, 3, 4, 11, 13, 32, 33, 39, 41, 47, 51, 52, 55, 65, 66, 76, 78, 79, 83, 84, 85, 86, 91], "your": [2, 3, 4, 8, 9, 15, 35, 36, 38, 39, 40, 42, 47, 51, 54, 55, 56, 57, 58, 60, 65, 66, 68, 69, 70, 72, 73, 79, 81, 82, 83, 86, 88, 90, 94, 95, 96, 97, 98, 99, 100, 101], "recommend": [2, 4, 6, 9, 12, 15, 39, 42, 56, 84, 85, 86, 91, 98, 99], "furthermor": 2, "correctli": [2, 3, 9, 35, 36, 40, 42, 45, 52, 57, 58, 63, 64, 68, 70, 82, 89, 91, 95, 96, 99, 100], "clonabl": [2, 68], "via": [2, 4, 6, 9, 12, 15, 17, 21, 35, 37, 39, 40, 47, 51, 56, 61, 64, 65, 66, 68, 69, 72, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101], "base": [2, 3, 4, 6, 9, 11, 12, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 60, 63, 65, 66, 68, 69, 72, 74, 76, 81, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "clone": [2, 68, 95], "intern": [2, 3, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 64, 68, 74, 79, 83, 84, 91, 92, 94, 95, 96, 97, 99, 101], "multipl": [2, 3, 4, 11, 12, 33, 35, 42, 50, 56, 57, 58, 60, 63, 64, 68, 78, 84, 85, 86, 91, 93, 95, 96, 99], "g": [2, 3, 4, 9, 11, 21, 31, 35, 36, 40, 42, 48, 51, 58, 59, 61, 64, 65, 66, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99], "manual": [2, 68, 81, 82, 83, 91, 97, 98, 99, 101], "pytorch": [2, 36, 37, 40, 68, 78, 83, 91, 93, 95, 100], "call": [2, 3, 4, 5, 9, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 47, 51, 55, 65, 68, 82, 83, 84, 85, 89, 91, 92, 95, 97, 98, 99, 100, 101], "__init__": [2, 37, 68, 86], "independ": [2, 3, 9, 57, 68, 89, 98, 99, 101], "compat": [2, 36, 39, 40, 55, 68, 69, 72, 76, 78, 81, 82, 91, 98, 99], "neural": [2, 37, 55, 65, 68, 83, 86, 91, 95, 97, 99], "network": [2, 36, 37, 40, 55, 65, 68, 82, 83, 86, 89, 91, 95, 97, 99], "typic": [2, 36, 40, 65, 68, 81, 82, 83, 85, 86, 88, 89, 97, 98], "initi": [2, 3, 12, 17, 36, 40, 56, 68, 81, 89, 91], "insid": [2, 40, 68, 91, 92], "There": [2, 3, 6, 78, 92, 94], "two": [2, 3, 9, 17, 25, 35, 36, 39, 40, 48, 51, 61, 63, 64, 79, 82, 84, 85, 86, 88, 89, 91, 92, 95, 99, 100, 101], "new": [2, 6, 8, 9, 13, 21, 36, 39, 40, 46, 50, 51, 56, 68, 82, 83, 84, 89, 90, 91, 97, 98, 101], "notion": 2, "confid": [2, 3, 9, 21, 35, 39, 42, 45, 47, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 72, 76, 78, 81, 86, 88, 89, 92, 94, 95, 96, 98, 100, 101], "packag": [2, 4, 6, 8, 9, 10, 14, 34, 38, 42, 43, 51, 54, 55, 61, 64, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "prune": [2, 3, 42, 58, 68, 79, 96], "everyth": [2, 64, 92], "els": [2, 64, 84, 86, 90, 91, 94, 95, 96], "mathemat": [2, 3, 9, 45, 95], "keep": [2, 12, 13, 51, 78, 84, 90, 91, 100], "belong": [2, 3, 9, 35, 42, 44, 45, 57, 58, 59, 60, 65, 66, 70, 74, 76, 77, 85, 86, 92, 95, 97, 100, 101], "2": [2, 3, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 60, 61, 64, 65, 66, 68, 69, 73, 74, 76, 77, 90, 91, 98], "error": [2, 3, 4, 9, 36, 40, 41, 42, 44, 45, 51, 57, 58, 60, 61, 63, 64, 66, 68, 70, 72, 73, 76, 79, 81, 83, 84, 85, 88, 89, 90, 93], "erron": [2, 3, 35, 42, 45, 51, 57, 58, 66, 68, 69, 70, 97, 99], "import": [2, 3, 4, 6, 7, 9, 11, 12, 13, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 39, 41, 47, 49, 50, 56, 60, 63, 68, 69, 74, 76, 77, 78, 81, 82, 88, 89, 91, 95, 96, 97, 99, 100, 101], "linear_model": [2, 4, 35, 51, 68, 78, 82, 83, 84, 85, 89, 91, 92, 94, 97], "logisticregress": [2, 3, 4, 35, 51, 78, 82, 83, 84, 85, 89, 91, 92, 94, 97], "logreg": 2, "cl": [2, 13, 29, 68, 78, 81, 82, 91, 92, 99], "pass": [2, 3, 4, 7, 9, 11, 12, 13, 15, 22, 29, 32, 36, 39, 40, 42, 46, 47, 51, 55, 56, 58, 65, 66, 68, 74, 78, 82, 83, 84, 85, 89, 90, 91, 92, 94, 96, 97, 99], "x_train": [2, 81, 84, 85, 92, 94, 95, 99], "labels_maybe_with_error": 2, "had": [2, 3, 68, 96], "issu": [2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 41, 42, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 87, 93, 94, 98, 99], "pred": [2, 42, 51, 81, 82, 98, 99], "x_test": [2, 81, 84, 85, 92, 95, 99], "might": [2, 4, 56, 68, 73, 81, 82, 84, 85, 86, 91, 96], "case": [2, 3, 9, 12, 35, 47, 56, 68, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 97, 99, 101], "standard": [2, 3, 4, 29, 35, 42, 55, 57, 58, 60, 66, 68, 78, 81, 84, 85, 88, 90, 92, 96], "adapt": [2, 36, 38, 51, 54, 68, 97], "skorch": [2, 68, 78, 91], "kera": [2, 54, 61, 64, 68, 78, 91, 96], "scikera": [2, 55, 68, 91], "open": [2, 39, 90, 96, 101], "doesn": [2, 68, 78], "t": [2, 3, 6, 9, 16, 26, 36, 37, 39, 40, 41, 42, 47, 49, 50, 60, 65, 66, 68, 74, 76, 77, 78, 84, 85, 86, 88, 89, 90, 92, 95, 96, 99, 101], "alreadi": [2, 4, 9, 15, 36, 39, 40, 45, 55, 56, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 99], "exist": [2, 4, 9, 11, 17, 36, 39, 40, 50, 55, 61, 63, 65, 68, 78, 79, 81, 82, 84, 85, 89, 94, 101], "made": [2, 4, 15, 36, 40, 68, 81, 82, 86, 89, 91, 94, 96, 98, 99], "easi": [2, 10, 45, 68, 84, 85, 90, 91, 92, 95], "inherit": [2, 6, 37, 68], "baseestim": [2, 40, 68], "yourmodel": [2, 68], "def": [2, 6, 13, 36, 40, 55, 68, 82, 83, 84, 85, 86, 90, 91, 92, 94, 95, 97, 99, 101], "self": [2, 3, 4, 6, 9, 11, 12, 13, 15, 30, 36, 37, 39, 40, 42, 47, 65, 66, 68, 81, 82, 84, 86, 89, 90, 95, 100, 101], "refer": [2, 9, 15, 36, 40, 41, 57, 58, 60, 61, 63, 64, 68, 72, 73, 84, 85, 86, 88, 89, 91, 92, 95, 98, 99], "origin": [2, 4, 9, 40, 41, 42, 50, 51, 55, 57, 58, 61, 64, 65, 68, 69, 72, 74, 76, 81, 82, 84, 86, 88, 89, 91, 92, 96, 97, 99, 101], "total": [2, 3, 35, 39, 51, 57, 77, 86, 91, 100], "state": [2, 3, 4, 36, 37, 40, 46, 68, 92, 95, 96, 101], "art": [2, 37, 92, 95], "northcutt": [2, 3, 35, 65, 66], "et": [2, 3, 35, 37, 65, 66], "al": [2, 3, 35, 37, 65, 66], "2021": [2, 3, 35, 65, 66], "weak": [2, 64], "supervis": [2, 9, 84, 85, 91, 94], "find": [2, 4, 8, 9, 12, 13, 15, 18, 19, 21, 22, 24, 25, 26, 27, 30, 31, 35, 36, 38, 39, 40, 41, 42, 46, 50, 51, 54, 61, 64, 65, 66, 68, 70, 74, 76, 79, 84, 93, 98], "uncertainti": [2, 9, 44, 65, 68, 91, 97, 99], "It": [2, 3, 4, 6, 9, 11, 12, 15, 21, 26, 29, 31, 32, 33, 36, 40, 42, 45, 47, 56, 63, 64, 68, 78, 82, 84, 85, 86, 89, 91, 92, 95, 98], "work": [2, 3, 6, 9, 11, 29, 35, 36, 39, 40, 42, 45, 50, 51, 52, 55, 56, 66, 68, 78, 79, 82, 84, 85, 90, 97, 99], "includ": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 36, 38, 39, 40, 50, 51, 54, 56, 57, 60, 61, 65, 66, 68, 72, 73, 74, 76, 78, 79, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 101], "deep": [2, 38, 40, 54, 55, 68, 89], "see": [2, 3, 4, 6, 9, 12, 13, 32, 35, 36, 39, 40, 41, 42, 47, 51, 55, 57, 58, 60, 61, 64, 65, 66, 68, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101], "subfield": 2, "theori": [2, 92], "machin": [2, 4, 8, 9, 13, 15, 32, 38, 54, 68, 81, 82, 84, 85, 90, 94], "across": [2, 3, 4, 6, 9, 12, 21, 35, 39, 47, 57, 64, 65, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 98, 99], "varieti": [2, 81, 82, 91], "like": [2, 3, 4, 5, 6, 9, 13, 31, 35, 36, 39, 40, 42, 45, 51, 55, 56, 57, 60, 61, 63, 66, 68, 69, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "pu": [2, 51], "input": [2, 3, 4, 9, 15, 25, 35, 36, 39, 40, 45, 47, 50, 51, 52, 55, 64, 68, 78, 79, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95, 96, 99, 100, 101], "discret": [2, 33, 42, 45, 51, 65, 66, 70, 72, 73], "vector": [2, 3, 4, 9, 15, 42, 45, 47, 48, 51, 65, 66, 78, 82, 83, 84, 85, 86, 88, 89, 92, 95, 96, 97, 100, 101], "would": [2, 3, 4, 36, 39, 40, 42, 51, 58, 68, 78, 82, 84, 86, 91, 92, 97, 99, 101], "obtain": [2, 4, 7, 9, 15, 42, 56, 58, 61, 64, 66, 69, 83, 85, 89, 91, 94, 96, 98, 100, 101], "been": [2, 35, 42, 45, 50, 51, 56, 57, 61, 63, 65, 66, 68, 83, 84, 88, 91, 92, 94, 95, 96, 97, 100, 101], "dure": [2, 9, 15, 65, 68, 81, 82, 83, 88, 89, 91, 92, 95, 98, 99, 101], "denot": [2, 3, 45, 47, 51, 58, 65, 66, 76], "tild": 2, "paper": [2, 9, 56, 65, 74, 76, 90, 92, 94, 97, 99, 101], "cv_n_fold": [2, 3, 68, 82], "5": [2, 3, 4, 7, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 40, 42, 44, 46, 47, 51, 56, 57, 60, 61, 64, 68, 69, 76, 82, 84, 89, 90, 91, 95, 96, 97, 98, 100, 101], "converge_latent_estim": [2, 3], "pulearn": [2, 51], "find_label_issues_kwarg": [2, 9, 68, 79, 91, 92], "label_quality_scores_kwarg": [2, 9], "low_memori": [2, 58, 74, 91], "clean": [2, 63, 66, 68, 69, 78, 81, 82, 84, 85, 90, 99], "even": [2, 3, 6, 8, 9, 35, 39, 44, 45, 51, 68, 83, 91, 92, 94, 95, 96], "messi": [2, 68, 92], "ridden": [2, 68], "autom": [2, 8, 9, 68, 78, 85, 90, 91], "robust": [2, 45, 68, 85, 91], "prone": [2, 68], "out": [2, 3, 4, 9, 15, 27, 36, 40, 42, 47, 55, 58, 59, 61, 64, 65, 66, 68, 69, 77, 78, 79, 82, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101], "current": [2, 3, 4, 6, 9, 12, 13, 21, 36, 40, 41, 42, 47, 56, 63, 68, 84, 85, 91, 94, 96], "intend": [2, 12, 13, 14, 15, 31, 32, 33, 43, 56, 72, 76, 83, 84, 85, 89, 92], "A": [2, 3, 4, 6, 9, 11, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 37, 40, 42, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 60, 63, 64, 65, 66, 68, 70, 72, 73, 77, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94, 96, 98, 101], "follow": [2, 3, 9, 13, 29, 33, 35, 36, 39, 40, 47, 49, 56, 57, 61, 63, 64, 65, 68, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "experiment": [2, 36, 37, 39, 40, 41, 58, 79, 91], "wrapper": [2, 55, 81, 82, 83, 99], "around": [2, 63, 84, 85, 96, 97, 101], "fasttext": [2, 54], "store": [2, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 65, 68, 81, 82, 88, 89, 90, 91, 100, 101], "along": [2, 47, 58, 76, 84, 85, 86, 91, 97], "dimens": [2, 51, 70, 73, 86, 91, 97, 100], "select": [2, 8, 9, 25, 56, 66, 86, 91, 94, 97], "split": [2, 3, 4, 9, 11, 39, 47, 50, 51, 68, 81, 83, 84, 85, 86, 88, 89, 90, 92, 95, 98, 101], "cross": [2, 3, 9, 35, 42, 45, 46, 47, 58, 61, 64, 66, 68, 69, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101], "fold": [2, 3, 35, 42, 45, 68, 81, 83, 88, 90, 91, 96, 100], "By": [2, 35, 57, 58, 68, 84, 91, 100], "need": [2, 3, 9, 35, 36, 39, 40, 42, 57, 58, 60, 65, 68, 78, 82, 83, 84, 85, 89, 91, 92, 94, 95, 96, 100], "holdout": [2, 3, 68], "comput": [2, 3, 4, 6, 7, 9, 18, 19, 21, 22, 25, 26, 27, 30, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 51, 56, 57, 58, 60, 63, 64, 65, 66, 68, 69, 70, 72, 78, 79, 82, 84, 85, 90, 92, 93, 96, 97, 99, 100], "them": [2, 3, 4, 6, 8, 9, 10, 11, 26, 31, 34, 36, 38, 39, 40, 42, 54, 56, 65, 68, 79, 81, 82, 84, 85, 86, 88, 89, 91, 94, 95, 97, 99, 100, 101], "numer": [2, 3, 4, 9, 12, 21, 29, 33, 47, 63, 65, 68, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 97, 99], "consist": [2, 3, 36, 40, 51, 56, 100, 101], "latent": [2, 3, 45], "thei": [2, 3, 4, 14, 20, 23, 25, 28, 36, 37, 38, 40, 42, 43, 49, 51, 55, 58, 63, 66, 68, 69, 72, 76, 78, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 97, 99, 101], "relat": [2, 3, 12, 18, 19, 25, 26, 27, 30, 45, 51, 57, 68, 85, 89], "close": [2, 3, 9, 39, 45, 65, 83, 84, 85, 86, 88, 89, 91, 92, 96], "form": [2, 3, 9, 36, 37, 40, 45, 50, 51, 66, 68, 91], "equival": [2, 3, 36, 40, 45, 65, 97, 99], "iter": [2, 3, 35, 36, 40, 42, 51, 57, 58, 68, 91, 94, 100], "enforc": [2, 36, 40, 51], "perfectli": [2, 35, 57, 92], "certain": [2, 3, 4, 36, 40, 55, 64, 68, 84, 85, 90, 96, 97], "dict": [2, 3, 4, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 39, 40, 42, 46, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 76, 84, 85, 86, 91, 101], "keyword": [2, 3, 4, 9, 15, 22, 26, 29, 36, 39, 40, 42, 44, 47, 50, 55, 56, 58, 65, 66, 68, 74, 76, 84], "filter": [2, 3, 9, 39, 41, 50, 57, 59, 60, 62, 64, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 89, 90, 91, 95, 96, 99, 100, 101], "find_label_issu": [2, 3, 9, 29, 38, 39, 41, 42, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 91, 95, 96, 99, 100, 101], "particularli": [2, 78, 94, 97], "filter_bi": [2, 3, 39, 42, 58, 79, 91], "frac_nois": [2, 42, 58, 74, 91], "min_examples_per_class": [2, 42, 58, 85, 91, 92], "impact": [2, 9, 84, 85, 86], "ml": [2, 4, 8, 9, 14, 68, 78, 81, 82, 84, 85, 86, 88, 89, 94, 95, 99], "accuraci": [2, 37, 66, 81, 82, 83, 86, 91, 92, 94, 97, 99, 100], "n_job": [2, 39, 42, 58, 70, 72, 74, 91, 97, 100], "disabl": [2, 36, 40, 42, 97], "process": [2, 3, 6, 12, 15, 31, 36, 39, 40, 42, 50, 56, 58, 64, 70, 72, 74, 82, 83, 84, 91, 94, 98], "caus": [2, 42, 47, 84, 85, 91], "rank": [2, 3, 9, 35, 39, 41, 42, 47, 57, 58, 59, 61, 62, 64, 65, 67, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 85, 90, 91, 95, 96, 97, 100, 101], "get_label_quality_scor": [2, 38, 39, 41, 42, 43, 47, 56, 58, 59, 60, 61, 62, 63, 66, 67, 69, 71, 72, 74, 75, 76, 79, 91, 92, 95, 96, 100, 101], "adjust_pred_prob": [2, 9, 60, 65, 66, 92], "control": [2, 4, 8, 9, 15, 39, 42, 56, 64, 65, 68, 74, 76, 84, 85, 90, 91], "how": [2, 3, 4, 9, 11, 12, 13, 15, 21, 35, 36, 37, 39, 40, 45, 51, 56, 57, 60, 61, 63, 65, 66, 68, 72, 76, 78, 81, 82, 84, 85, 86, 88, 89, 90, 96, 97, 98, 99, 100], "much": [2, 9, 35, 39, 42, 68, 91, 92, 94, 97], "output": [2, 3, 4, 9, 15, 31, 36, 37, 40, 45, 51, 55, 56, 57, 61, 63, 64, 65, 68, 72, 73, 76, 77, 78, 79, 82, 83, 84, 86, 89, 90, 91, 96, 97, 98, 99], "print": [2, 4, 6, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 51, 56, 57, 58, 63, 65, 66, 68, 70, 72, 73, 77, 79, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "suppress": [2, 39, 56, 63, 65, 66, 68, 70, 72, 73, 100, 101], "statement": [2, 39, 56, 63, 65, 66, 68, 70, 72, 73], "big": [2, 39, 58, 64, 68, 92], "limit": [2, 4, 15, 39, 58, 96, 100, 101], "memori": [2, 36, 39, 40, 58, 64, 70, 72, 84, 100], "label_issues_batch": [2, 38, 58, 91], "find_label_issues_batch": [2, 38, 39, 58, 91], "pred_prob": [2, 3, 4, 7, 9, 15, 22, 24, 25, 27, 30, 31, 35, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 56, 57, 58, 60, 61, 64, 65, 66, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 99], "threshold": [2, 3, 6, 9, 17, 18, 19, 21, 27, 29, 30, 39, 63, 64, 65, 66, 72, 76, 84, 96, 97, 100, 101], "inverse_noise_matrix": [2, 3, 9, 45, 51, 79, 92], "label_issu": [2, 39, 42, 58, 61, 68, 70, 79, 81, 82, 83, 86, 89, 91, 92, 95, 99], "clf_kwarg": [2, 3, 9, 68], "clf_final_kwarg": [2, 68], "validation_func": [2, 3, 9], "correct": [2, 4, 8, 9, 35, 39, 42, 44, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 72, 76, 78, 83, 86, 88, 89, 92, 94, 96, 98, 99], "result": [2, 3, 8, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 39, 40, 42, 44, 49, 51, 58, 60, 61, 64, 66, 68, 69, 70, 72, 76, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 99, 100, 101], "identifi": [2, 3, 4, 6, 8, 9, 11, 15, 26, 32, 35, 39, 41, 42, 58, 61, 64, 66, 68, 69, 70, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 95, 97, 99, 100, 101], "final": [2, 9, 68, 81, 88, 96, 98, 99], "remain": [2, 68, 79, 81, 82, 86, 95, 99, 101], "datasetlik": [2, 51, 68], "beyond": [2, 4, 6, 8, 9, 10, 34, 78, 81, 82, 99, 100], "pd": [2, 3, 4, 6, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 46, 55, 56, 57, 68, 76, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 99, 101], "datafram": [2, 3, 4, 6, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 39, 46, 51, 52, 55, 56, 57, 68, 73, 77, 79, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 99, 100, 101], "scipi": [2, 4, 12, 51], "spars": [2, 4, 9, 12, 15, 17, 30, 51, 52, 88], "csr_matrix": [2, 4, 12, 15, 17, 30], "torch": [2, 36, 37, 40, 82, 83, 86, 89, 90, 97], "util": [2, 4, 9, 15, 32, 36, 37, 40, 43, 55, 56, 61, 64, 68, 78, 79, 83, 84, 85, 86, 91, 92, 97], "tensorflow": [2, 51, 55, 78, 83, 91], "object": [2, 4, 9, 11, 12, 15, 31, 32, 36, 37, 39, 40, 47, 51, 52, 55, 58, 61, 62, 63, 64, 65, 68, 76, 78, 82, 83, 85, 86, 88, 91, 92, 93, 95, 99], "list": [2, 3, 4, 11, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 39, 40, 41, 42, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 86, 90, 91, 92, 95, 96, 99, 101], "index_list": 2, "subset": [2, 3, 4, 15, 35, 39, 42, 51, 66, 73, 77, 81, 82, 83, 86, 88, 89, 91, 95, 96, 97, 98, 99, 101], "wa": [2, 3, 11, 13, 39, 51, 56, 57, 63, 65, 77, 81, 82, 83, 84, 85, 88, 89, 91, 92, 95, 96, 98, 100, 101], "abl": [2, 3, 9, 68, 83, 91, 92, 94, 95], "format": [2, 3, 4, 9, 11, 31, 36, 39, 40, 42, 45, 46, 47, 48, 51, 52, 55, 56, 57, 58, 61, 64, 65, 66, 68, 70, 72, 73, 76, 77, 81, 83, 84, 85, 86, 88, 90, 94, 99, 100, 101], "make": [2, 3, 4, 17, 36, 39, 40, 47, 55, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99], "sure": [2, 4, 39, 42, 47, 81, 82, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 97, 99], "shuffl": [2, 9, 51, 83, 86, 89, 95, 97], "ha": [2, 3, 4, 5, 9, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 41, 45, 47, 50, 51, 56, 61, 63, 68, 74, 76, 77, 78, 81, 82, 83, 84, 85, 88, 89, 92, 94, 95, 96, 97, 98, 99, 101], "batch": [2, 39, 51, 55, 56, 70, 72, 86, 91, 97], "order": [2, 4, 9, 33, 35, 36, 40, 41, 42, 45, 46, 47, 51, 56, 57, 58, 61, 64, 65, 66, 70, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 99, 100, 101], "destroi": [2, 51], "oper": [2, 36, 39, 40, 51, 55, 66, 78, 81, 82, 89, 91, 97], "eg": [2, 4, 9, 51, 61, 64, 84, 85, 91], "repeat": [2, 51, 56, 94, 97], "appli": [2, 33, 36, 38, 40, 42, 47, 48, 50, 51, 60, 65, 74, 81, 82, 83, 84, 85, 86, 88, 91, 94, 95, 97, 98, 99, 100], "array_lik": [2, 3, 35, 42, 51, 58, 65, 69], "some": [2, 3, 4, 9, 13, 21, 35, 36, 38, 40, 42, 45, 50, 51, 54, 56, 57, 58, 60, 61, 64, 65, 66, 68, 70, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101], "seri": [2, 3, 39, 51, 52, 68, 76, 91], "row": [2, 3, 4, 9, 12, 26, 31, 35, 39, 42, 44, 45, 51, 56, 57, 58, 60, 65, 66, 68, 73, 74, 76, 77, 81, 83, 84, 86, 88, 89, 90, 91, 94, 95, 97, 101], "rather": [2, 3, 4, 25, 35, 51, 55, 56, 63, 72, 76, 82, 94, 98, 99, 100, 101], "leav": [2, 42], "per": [2, 3, 4, 6, 12, 35, 39, 42, 47, 50, 56, 57, 58, 60, 63, 64, 66, 69, 70, 72, 76, 85, 91, 96, 101], "determin": [2, 3, 9, 11, 15, 21, 25, 29, 35, 39, 42, 47, 51, 56, 58, 61, 63, 66, 72, 76, 84, 91, 94, 96, 97, 99], "cutoff": [2, 3, 97], "consid": [2, 3, 4, 9, 12, 15, 22, 25, 27, 30, 35, 36, 40, 42, 51, 56, 63, 65, 66, 69, 72, 76, 81, 82, 83, 86, 88, 89, 91, 92, 96, 97, 98, 99, 100], "section": [2, 3, 6, 9, 79, 86, 88, 91, 96], "3": [2, 3, 4, 6, 9, 33, 35, 36, 40, 42, 45, 46, 47, 48, 49, 50, 51, 55, 58, 65, 66, 68, 69, 74, 76, 90, 91, 98], "equat": [2, 3, 45], "advanc": [2, 3, 4, 8, 9, 15, 63, 65, 76, 79, 85, 87, 91, 92], "user": [2, 3, 4, 8, 9, 13, 15, 26, 31, 32, 33, 36, 40, 42, 55, 63, 65, 66, 68, 72, 76, 92], "specifi": [2, 3, 4, 7, 9, 12, 13, 15, 17, 30, 32, 36, 39, 40, 42, 47, 50, 55, 56, 57, 58, 61, 63, 65, 66, 68, 69, 77, 79, 82, 83, 85, 86, 89, 94, 96, 99], "automat": [2, 3, 4, 25, 35, 78, 81, 82, 86, 88, 89, 90, 91, 94, 95, 96, 99, 100, 101], "greater": [2, 3, 4, 6, 8, 9, 27, 39, 51, 63, 85, 90, 91, 101], "count": [2, 21, 25, 35, 39, 42, 45, 51, 57, 58, 64, 79, 86, 91, 96], "observ": [2, 3, 45, 83, 84, 85, 94, 97, 99], "mislabel": [2, 9, 35, 39, 41, 42, 45, 56, 57, 58, 61, 63, 66, 72, 74, 76, 78, 81, 82, 83, 86, 88, 89, 91, 92, 96, 99], "one": [2, 3, 4, 6, 9, 25, 35, 36, 39, 40, 41, 42, 47, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 94, 97, 98, 99, 101], "get_label_issu": [2, 38, 39, 67, 68, 81, 82, 92, 99], "either": [2, 3, 6, 9, 36, 39, 40, 42, 56, 58, 63, 65, 66, 70, 72, 85, 91, 95, 96], "boolean": [2, 6, 9, 21, 39, 42, 50, 56, 58, 61, 66, 68, 70, 72, 73, 78, 82, 83, 85, 86, 89, 91, 96, 99, 100], "label_issues_mask": [2, 42, 66, 68, 79], "indic": [2, 3, 4, 6, 9, 12, 21, 35, 39, 40, 41, 42, 44, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "its": [2, 4, 6, 8, 9, 15, 36, 39, 40, 42, 49, 50, 58, 61, 64, 65, 66, 68, 70, 74, 76, 78, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101], "return_indices_ranked_bi": [2, 39, 42, 58, 74, 79, 81, 82, 91, 92], "significantli": [2, 86, 92, 94, 98], "reduc": [2, 39, 42, 51, 83, 91], "time": [2, 9, 36, 39, 40, 51, 56, 79, 81, 82, 84, 86, 90, 91, 92, 96, 97, 99, 100, 101], "take": [2, 4, 9, 35, 36, 40, 46, 47, 51, 55, 66, 81, 86, 88, 94, 95, 96, 101], "run": [2, 4, 5, 6, 8, 9, 10, 13, 15, 25, 26, 31, 34, 36, 39, 40, 68, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 101], "skip": [2, 9, 36, 40, 68, 83, 91, 95, 101], "slow": [2, 3], "step": [2, 6, 25, 47, 64, 86, 92, 94, 98], "caution": [2, 4, 91], "previous": [2, 4, 12, 51, 65, 68, 79, 81, 83, 84, 88, 89, 94, 98], "assign": [2, 6, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 36, 40, 46, 47, 51, 68, 81, 84, 86, 88, 91, 99, 100, 101], "individu": [2, 6, 9, 12, 25, 36, 40, 41, 56, 60, 63, 66, 68, 74, 76, 79, 81, 85, 88, 91, 94, 95, 96, 101], "still": [2, 39, 40, 51, 65, 81, 83, 86, 91, 97], "extra": [2, 36, 40, 51, 55, 56, 57, 68, 86, 89, 91, 94, 97], "receiv": [2, 9, 36, 40, 41, 57, 60, 61, 68, 70, 74, 85, 96], "overwritten": [2, 68], "callabl": [2, 3, 36, 40, 47, 50, 55, 60, 91], "x_val": 2, "y_val": 2, "map": [2, 3, 11, 39, 40, 43, 46, 50, 51, 64, 66, 68, 73, 83, 84, 85, 86, 91, 92, 95, 101], "appropri": [2, 9, 15, 33, 58, 66, 84, 88, 95, 96], "earli": [2, 86], "stop": [2, 86], "x_valid": 2, "y_valid": 2, "could": [2, 6, 9, 21, 35, 51, 65, 81, 84, 86, 88, 95, 99, 101], "f": [2, 6, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99], "ignor": [2, 36, 40, 50, 55, 68, 73, 77, 83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "allow": [2, 35, 36, 39, 40, 44, 51, 56, 64, 65, 68, 70, 72, 82, 83, 86, 91, 98, 100], "access": [2, 9, 12, 36, 40, 68, 82, 85, 86, 89, 95], "hyperparamet": [2, 60, 65, 86], "purpos": [2, 84, 85, 91, 95, 99], "want": [2, 4, 9, 35, 39, 52, 56, 58, 68, 82, 84, 86, 89, 90, 94, 96, 97, 98, 100, 101], "explicitli": [2, 7, 9, 40, 68, 91], "yourself": [2, 4, 39, 85], "altern": [2, 6, 9, 47, 51, 55, 56, 66, 79, 82, 83, 86, 88, 89, 91, 92, 94, 95, 97, 99], "same": [2, 3, 4, 6, 8, 9, 11, 13, 15, 25, 29, 36, 39, 40, 42, 51, 55, 56, 58, 65, 66, 68, 72, 73, 76, 77, 78, 81, 82, 84, 85, 86, 88, 89, 91, 95, 96, 97, 98, 99, 100], "effect": [2, 9, 26, 36, 40, 56, 65, 68, 86, 88, 89, 91, 97], "offer": [2, 4, 8, 9, 82, 83, 84, 85, 89, 91, 92, 95], "after": [2, 3, 4, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 56, 68, 82, 84, 86, 89, 91, 92, 94, 96, 97, 98, 99, 100], "attribut": [2, 4, 6, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 39, 40, 47, 65, 68, 81, 84], "label_issues_df": [2, 68, 86], "similar": [2, 9, 35, 36, 40, 51, 56, 60, 61, 63, 65, 68, 72, 76, 84, 85, 86, 88, 89, 91, 92, 96, 97, 100], "document": [2, 3, 4, 13, 15, 35, 36, 39, 40, 41, 42, 47, 50, 55, 57, 58, 60, 63, 64, 65, 68, 72, 73, 74, 76, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101], "descript": [2, 4, 6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 41, 51, 61, 68, 84, 85], "were": [2, 3, 4, 35, 40, 57, 63, 76, 81, 83, 88, 91, 92, 94, 96, 98, 100], "present": [2, 3, 4, 9, 11, 12, 19, 35, 51, 65, 73, 78, 86, 88, 91, 97], "actual": [2, 3, 4, 35, 56, 57, 66, 85, 91, 92, 101], "num_class": [2, 35, 39, 51, 55, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97], "uniqu": [2, 30, 51, 73, 84, 91, 95, 97], "given_label": [2, 4, 24, 29, 35, 45, 68, 73, 77, 82, 83, 84, 85, 86, 88, 89, 92, 99, 100, 101], "normal": [2, 3, 17, 25, 30, 42, 44, 47, 49, 50, 51, 66, 91, 92, 97], "trick": [2, 91], "distribut": [2, 3, 4, 9, 25, 27, 35, 40, 42, 46, 49, 56, 64, 65, 66, 78, 84, 85, 86, 88, 89, 96, 97], "account": [2, 35, 56, 60, 65, 66, 82, 89, 91, 92, 94, 95, 97, 99], "word": [2, 3, 50, 76, 77, 91], "remov": [2, 9, 30, 35, 36, 40, 42, 68, 78, 81, 82, 86, 89, 90, 91, 95, 97, 99], "so": [2, 3, 4, 5, 6, 9, 13, 25, 33, 35, 36, 39, 40, 42, 51, 56, 57, 63, 66, 68, 72, 76, 83, 84, 85, 86, 89, 92, 95, 97, 100], "proportion": [2, 9, 42], "just": [2, 3, 4, 9, 12, 31, 35, 37, 39, 51, 55, 66, 68, 70, 78, 79, 81, 82, 83, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100], "procedur": 2, "get": [2, 3, 4, 7, 12, 30, 36, 37, 40, 42, 47, 50, 51, 56, 58, 60, 65, 66, 68, 69, 70, 78, 81, 82, 83, 86, 89, 90, 91, 92, 97, 98, 99], "detect": [2, 4, 6, 8, 12, 13, 15, 17, 21, 27, 41, 49, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 75, 78, 81, 82, 84, 86, 87, 93, 95, 99, 100, 101], "arg": [2, 11, 21, 26, 30, 36, 37, 40, 47, 51, 66, 68], "kwarg": [2, 6, 9, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 41, 47, 55, 68, 70, 72, 74, 91], "test": [2, 4, 9, 25, 40, 47, 55, 68, 78, 81, 82, 84, 85, 86, 88, 89, 98, 99, 101], "expect": [2, 3, 36, 40, 42, 47, 56, 65, 66, 68, 81, 82, 91, 92, 94, 95, 96, 99, 101], "class_predict": 2, "evalu": [2, 9, 36, 37, 38, 39, 40, 64, 68, 81, 82, 83, 84, 85, 86, 91, 92, 94, 98, 99, 100], "simpli": [2, 9, 35, 66, 82, 84, 85, 88, 89, 91, 92, 95, 99, 100, 101], "quantifi": [2, 4, 6, 9, 12, 42, 60, 65, 68, 78, 85, 86, 88, 89, 92, 96], "save_spac": [2, 9, 67, 68], "potenti": [2, 9, 35, 42, 50, 58, 61, 64, 66, 68, 70, 72, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 100, 101], "cach": [2, 82, 89], "panda": [2, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 51, 52, 55, 56, 57, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 99, 100], "unlik": [2, 9, 42, 44, 47, 55, 57, 58, 60, 76, 84, 94, 95, 97, 99], "both": [2, 4, 9, 15, 25, 35, 36, 40, 42, 51, 56, 58, 66, 70, 72, 77, 78, 84, 86, 91, 92, 94, 101], "mask": [2, 39, 42, 50, 51, 58, 61, 66, 68, 70, 72, 73, 78, 90, 91, 94, 96, 100, 101], "prefer": [2, 66, 74, 95], "plan": 2, "subsequ": [2, 3, 36, 40, 82, 89, 91, 92, 96], "invok": [2, 36, 40, 92, 98], "scratch": [2, 68], "To": [2, 4, 6, 8, 9, 10, 12, 15, 25, 34, 36, 39, 40, 41, 42, 55, 56, 58, 60, 64, 65, 66, 68, 69, 70, 72, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101], "share": [2, 66, 68], "mostli": [2, 51, 63, 68, 95, 99], "longer": [2, 33, 46, 47, 50, 68, 79, 82, 89, 91, 96], "info": [2, 4, 6, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 57, 68, 76, 84, 85, 90, 101], "about": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 37, 39, 44, 56, 57, 60, 64, 68, 73, 76, 83, 84, 86, 88, 89, 90, 91, 92, 94, 97], "docstr": [2, 35, 36, 40, 51, 68, 90, 92], "unless": [2, 36, 40, 68, 91], "our": [2, 3, 9, 55, 56, 66, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "is_label_issu": [2, 29, 68, 82, 83, 84, 85, 86, 88, 89, 92, 95, 99], "entir": [2, 9, 25, 39, 42, 45, 57, 58, 63, 66, 68, 70, 72, 73, 78, 84, 85, 91, 96, 97, 98, 100, 101], "accur": [2, 3, 4, 8, 9, 15, 35, 39, 42, 56, 57, 58, 61, 64, 66, 68, 69, 70, 72, 73, 79, 85, 86, 88, 89, 91, 94, 99], "label_qu": [2, 56, 68, 82, 92, 94, 99], "measur": [2, 4, 35, 56, 57, 68, 78, 81, 90, 91, 92, 94, 95, 99, 100, 101], "qualiti": [2, 3, 4, 6, 8, 9, 12, 29, 30, 35, 39, 41, 42, 44, 47, 56, 57, 58, 60, 61, 63, 66, 68, 69, 72, 74, 76, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 99], "lower": [2, 4, 6, 9, 12, 27, 39, 47, 49, 56, 57, 60, 63, 64, 66, 68, 69, 72, 76, 82, 83, 85, 86, 88, 89, 91, 94, 95, 96, 97, 99, 100, 101], "eas": 2, "comparison": [2, 36, 40, 64, 92, 94], "against": [2, 36, 40, 84, 88, 91, 94, 95], "predicted_label": [2, 4, 24, 29, 68, 73, 77, 82, 83, 84, 85, 86, 88, 89, 92, 99, 100], "ad": [2, 36, 40, 85, 94, 99], "precis": [2, 58, 61, 64, 91, 92, 100, 101], "definit": [2, 6, 33, 47, 68, 81, 88], "accessor": [2, 68], "describ": [2, 9, 17, 56, 65, 66, 68, 74, 76, 92, 94, 95, 96, 98, 101], "precomput": [2, 4, 45, 68, 90], "clear": [2, 36, 40, 68, 82, 89, 99], "save": [2, 4, 15, 36, 39, 40, 64, 68, 91, 96, 100, 101], "space": [2, 4, 9, 65, 68, 86, 88, 90], "place": [2, 36, 40, 51, 68, 81, 94], "larg": [2, 8, 9, 39, 68, 86, 88, 89, 91, 96, 97, 100, 101], "deploi": [2, 8, 9, 68, 86, 88, 89, 91], "care": [2, 9, 36, 40, 68, 89, 91, 92], "avail": [2, 4, 6, 9, 11, 13, 32, 40, 68, 91, 92, 94, 96, 99], "cannot": [2, 4, 11, 13, 51, 98, 101], "anymor": 2, "classmethod": [2, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 40, 47, 68], "__init_subclass__": [2, 38, 40, 67, 68], "set_": [2, 40, 68], "_request": [2, 40, 68], "pep": [2, 40, 68], "487": [2, 40, 68], "look": [2, 4, 6, 15, 36, 40, 51, 68, 73, 81, 84, 85, 88, 89, 91, 92, 94, 95, 96, 97, 100, 101], "inform": [2, 4, 6, 9, 12, 15, 32, 36, 40, 51, 56, 57, 61, 64, 68, 73, 76, 77, 78, 83, 84, 88, 89, 92, 94, 97, 100, 101], "__metadata_request__": [2, 40, 68], "infer": [2, 40, 51, 68, 73, 77, 81, 82, 86, 94, 95], "signatur": [2, 36, 40, 68], "accept": [2, 36, 40, 66, 68, 84, 85, 91], "metadata": [2, 40, 68, 86, 88, 89, 101], "through": [2, 4, 6, 40, 68, 82, 83, 85, 89, 90, 91, 94, 96, 97], "develop": [2, 8, 40, 68, 91, 92, 101], "request": [2, 40, 68, 81, 82, 85, 89, 90, 95, 101], "those": [2, 3, 9, 39, 40, 42, 55, 56, 58, 64, 68, 72, 76, 77, 78, 83, 86, 91, 96, 100], "http": [2, 4, 6, 8, 9, 10, 17, 34, 36, 37, 39, 40, 44, 51, 61, 64, 65, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "www": [2, 40, 68, 97], "org": [2, 17, 36, 37, 40, 51, 65, 68, 91, 92, 101], "dev": [2, 40, 68], "0487": [2, 40, 68], "get_metadata_rout": [2, 38, 40, 67, 68], "rout": [2, 40, 68], "pleas": [2, 36, 40, 55, 68, 78, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 97, 99, 101], "guid": [2, 6, 9, 40, 68, 79, 86, 87], "mechan": [2, 36, 40, 68], "metadatarequest": [2, 40, 68], "encapsul": [2, 15, 40, 63, 68], "get_param": [2, 38, 40, 54, 55, 67, 68], "subobject": [2, 40, 68], "param": [2, 9, 36, 40, 55, 65, 68, 91], "name": [2, 4, 5, 6, 9, 11, 12, 31, 33, 35, 36, 40, 46, 47, 51, 55, 56, 57, 64, 68, 73, 77, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 99, 100, 101], "set_fit_request": [2, 38, 40, 67, 68], "str": [2, 3, 4, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 45, 47, 50, 51, 55, 56, 57, 61, 63, 64, 66, 68, 73, 77, 83, 84, 91, 94, 95, 96, 101], "unchang": [2, 36, 40, 68, 101], "relev": [2, 15, 25, 40, 68, 86], "enable_metadata_rout": [2, 40, 68], "set_config": [2, 40, 68], "meta": [2, 40, 68], "rais": [2, 4, 11, 12, 33, 36, 40, 44, 47, 68, 83, 91], "alia": [2, 36, 40, 68], "metadata_rout": [2, 40, 68], "retain": [2, 40, 51, 68], "chang": [2, 31, 33, 36, 39, 40, 44, 68, 76, 81, 82, 83, 84, 89, 91, 96, 97, 101], "version": [2, 4, 6, 8, 9, 10, 14, 20, 23, 28, 34, 36, 38, 40, 43, 44, 51, 54, 55, 66, 68, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101], "sub": [2, 40, 63, 68], "pipelin": [2, 40, 68, 99], "otherwis": [2, 6, 9, 33, 35, 36, 39, 40, 42, 48, 50, 51, 58, 65, 68, 70, 72, 73, 77, 82, 89, 91], "updat": [2, 12, 36, 39, 40, 55, 68, 79, 84, 86], "set_param": [2, 38, 40, 54, 55, 67, 68], "simpl": [2, 36, 40, 42, 56, 66, 68, 81, 82, 84, 85, 86, 88, 89, 94, 97, 99], "well": [2, 3, 8, 9, 36, 40, 44, 45, 56, 58, 64, 66, 68, 73, 76, 77, 79, 84, 85, 86, 88, 89, 91, 92, 94, 96, 97], "nest": [2, 36, 40, 41, 52, 68, 74, 76, 77, 101], "latter": [2, 36, 40, 68, 97], "compon": [2, 40, 68], "__": [2, 40, 68], "set_score_request": [2, 67, 68], "structur": [3, 65, 81, 88, 91], "unobserv": 3, "less": [3, 4, 9, 30, 39, 47, 56, 65, 66, 70, 72, 76, 85, 86, 88, 90, 91, 92, 96, 101], "channel": [3, 83, 92], "character": 3, "flip": 3, "nm": 3, "invers": [3, 9, 35, 45, 51, 57, 82, 85, 90], "inv": 3, "confident_joint": [3, 21, 35, 42, 51, 57, 58, 79, 91, 92], "un": 3, "under": [3, 9, 36, 40, 57, 64, 65, 85, 97], "joint": [3, 35, 42, 45, 51, 57, 58, 90], "num_label_issu": [3, 39, 42, 58, 73, 77, 79], "estimation_method": [3, 39], "off_diagon": 3, "multi_label": [3, 35, 42, 51, 52, 58, 95], "don": [3, 78, 85, 86, 88, 89, 92, 96, 99], "statis": 3, "compute_confident_joint": [3, 35, 42, 51, 58, 92], "off": [3, 42, 51, 63, 86, 92, 96, 97], "j": [3, 4, 35, 36, 40, 41, 42, 58, 61, 64, 65, 74, 76, 77, 84, 85, 92, 100, 101], "confident_learn": [3, 42, 58, 92], "off_diagonal_calibr": 3, "calibr": [3, 42, 51, 56, 94], "cj": [3, 45, 51], "axi": [3, 30, 45, 47, 49, 70, 73, 83, 84, 85, 86, 91, 92, 94, 95, 97, 99, 100], "bincount": [3, 84, 85, 92, 94, 95], "alwai": [3, 9, 36, 40, 51, 81, 82, 83, 92, 99], "estimate_issu": 3, "over": [3, 4, 9, 36, 39, 40, 63, 64, 70, 72, 81, 85, 86, 88, 90, 91, 92, 97, 99], "As": [3, 6, 78, 84, 85, 89, 92, 99, 101], "add": [3, 4, 6, 11, 12, 36, 40, 55, 64, 82, 83, 84, 85, 86, 89, 91, 92, 95], "approach": [3, 35, 39, 42, 55, 81, 88, 92, 95, 97, 99], "custom": [3, 6, 9, 10, 29, 36, 39, 40, 47, 50, 66, 82, 85, 89, 92, 99], "know": [3, 9, 84, 85, 86, 88, 89, 91, 92, 94, 99], "cut": [3, 63, 78, 92], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 31, 96, 97, 101], "underestim": 3, "few": [3, 8, 9, 64, 78, 85, 91, 94, 95, 96, 97, 101], "4": [3, 4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 46, 47, 50, 60, 61, 63, 64, 66, 69, 76, 90, 91, 95, 100, 101], "detail": [3, 4, 9, 13, 15, 32, 35, 36, 40, 41, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 72, 73, 74, 78, 79, 83, 91, 95, 97, 101], "num_issu": [3, 6, 39, 83, 84, 85, 86, 88, 89, 92], "calibrate_confident_joint": 3, "up": [3, 6, 9, 16, 25, 26, 29, 42, 47, 55, 56, 82, 90, 91, 96, 99, 101], "p_": [3, 35, 42], "pair": [3, 4, 9, 35, 42, 92], "v": [3, 9, 39, 57, 58, 60, 66, 84, 85, 95, 96, 97, 98], "rest": [3, 4, 6, 8, 9, 10, 34, 57, 58, 60, 68, 81, 82, 84, 85, 86, 88, 89, 91, 92, 94, 99], "fashion": [3, 4, 70, 81], "2x2": 3, "incorrectli": [3, 35, 57, 58, 61, 88, 101], "calibrated_cj": 3, "c": [3, 9, 50, 58, 66, 78, 81, 83, 84, 85, 88, 89, 91, 92, 95, 96, 97, 98, 99], "whose": [3, 4, 9, 27, 36, 40, 45, 50, 56, 60, 63, 69, 72, 76, 77, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 100, 101], "truli": [3, 97, 100], "estimate_joint": [3, 35, 92], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 58, 64, 92, 96, 98, 100, 101], "return_indices_of_off_diagon": 3, "frequenc": [3, 25, 56, 57, 64, 73, 96, 97], "done": [3, 9, 55, 68, 84, 91, 92, 95, 97, 98], "overfit": [3, 9, 61, 64, 81, 83, 84, 85, 86, 88, 89, 98], "classifict": 3, "singl": [3, 4, 8, 9, 11, 25, 35, 36, 40, 41, 47, 48, 51, 56, 57, 63, 64, 65, 66, 76, 81, 83, 84, 91, 92, 95, 96], "baselin": [3, 36, 42, 82, 97, 99], "proxi": 3, "union": [3, 4, 11, 47, 51, 52, 58, 64, 68, 76, 91], "tupl": [3, 30, 36, 40, 41, 45, 46, 48, 50, 51, 56, 58, 64, 72, 74, 76, 77, 83, 101], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 9, 39, 45, 56, 70, 72, 78, 82, 86, 91, 100], "practic": [3, 81, 82, 85, 86, 92, 97, 99], "complet": [3, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 99], "gist": 3, "cj_ish": 3, "guess": [3, 45, 92, 94], "8": [3, 4, 6, 7, 46, 47, 48, 50, 60, 74, 76, 81, 82, 83, 84, 85, 86, 88, 89, 91, 94, 95, 96, 97, 99, 100, 101], "parallel": [3, 42, 64, 74, 90], "again": [3, 55, 81, 91, 97], "simplifi": [3, 13, 91], "understand": [3, 8, 35, 57, 64, 85, 92, 99, 100, 101], "100": [3, 36, 40, 66, 81, 82, 84, 85, 86, 88, 90, 91, 92, 95, 96, 97, 101], "optim": [3, 36, 37, 40, 55, 86, 94], "speed": [3, 42, 82, 90, 91, 99], "dtype": [3, 22, 24, 25, 30, 36, 40, 50, 51, 60, 76, 83, 96], "enumer": [3, 36, 40, 83, 84, 85, 86, 101], "s_label": 3, "confident_bin": 3, "6": [3, 4, 40, 47, 51, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101], "num_confident_bin": 3, "argmax": [3, 42, 66, 70, 73, 83, 91, 92, 96, 97, 100], "elif": 3, "estimate_lat": 3, "py_method": [3, 45], "cnt": [3, 45], "1d": [3, 4, 11, 15, 31, 39, 42, 47, 48, 51, 52, 60, 69, 81, 83], "eqn": [3, 45], "margin": [3, 42, 45, 47, 66], "marginal_p": [3, 45], "shorthand": [3, 12], "proport": [3, 9, 35, 57, 92, 98], "poorli": [3, 45, 81], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 92], "variabl": [3, 6, 13, 26, 51, 68, 69, 83, 84, 88, 92, 95, 99], "exact": [3, 45, 81, 84, 85, 86, 88], "within": [3, 4, 9, 14, 31, 36, 37, 40, 41, 43, 58, 63, 72, 74, 76, 84, 85, 86, 91, 96, 100], "percent": 3, "often": [3, 35, 45, 57, 91, 92, 98, 100], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 8, 9, 51, 52, 64, 81, 82, 83, 84, 86, 88, 89, 91, 95, 96, 97, 99], "wai": [3, 4, 55, 78, 79, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 95, 96, 98], "pro": 3, "con": 3, "pred_proba": [3, 98], "combin": [3, 35, 84, 86, 90, 91, 92, 98, 99], "becaus": [3, 45, 51, 63, 89, 91, 92, 94, 96], "littl": [3, 39, 90, 96, 101], "uniform": [3, 66, 90, 91, 92], "20": [3, 6, 41, 77, 83, 86, 89, 90, 91, 92, 96, 99, 100, 101], "Such": [3, 86, 97], "bound": [3, 22, 24, 36, 40, 50, 60, 61, 63, 64, 96], "reason": [3, 21, 36, 40], "comment": [3, 50, 101], "end": [3, 4, 36, 40, 64], "file": [3, 4, 11, 38, 39, 54, 64, 81, 83, 84, 88, 89, 90, 91, 96, 97, 100, 101], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 92], "handl": [3, 4, 6, 9, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 79, 81, 84, 85, 86, 88, 89, 92, 100, 101], "five": [3, 61, 64, 92, 96], "estimate_cv_predicted_prob": [3, 92], "estimate_noise_matric": 3, "get_confident_threshold": [3, 38, 39], "amongst": [3, 9, 96], "confident_threshold": [3, 9, 21, 39, 65], "unifi": 4, "audit": [4, 8, 11, 12, 15, 83, 86, 87, 88, 89, 91, 92, 95, 96, 99], "kind": [4, 5, 6, 9, 83, 84, 86, 88, 89, 90, 92], "addit": [4, 6, 8, 10, 12, 32, 34, 36, 40, 47, 52, 56, 64, 74, 81, 82, 83, 84, 88, 89, 92, 94, 97, 98], "depend": [4, 6, 8, 10, 11, 12, 34, 38, 42, 44, 51, 54, 58, 65, 68, 69, 78], "instal": [4, 6, 8, 10, 34, 36, 38, 39, 40, 42, 54, 55, 70, 72], "pip": [4, 6, 8, 10, 34, 55, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "development": [4, 6, 8, 10, 34], "git": [4, 6, 8, 10, 34, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99], "github": [4, 6, 8, 10, 34, 36, 37, 51, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99], "com": [4, 6, 8, 10, 34, 36, 37, 39, 44, 51, 65, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "egg": [4, 6, 8, 10, 34, 78, 90], "label_nam": [4, 6, 7, 9, 11, 17, 30, 78, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 99], "image_kei": [4, 9, 86], "interfac": [4, 8, 9, 78, 91, 92], "librari": [4, 9, 40, 61, 64, 65, 78, 82, 84, 89, 90, 91], "goal": [4, 99], "track": [4, 6, 12, 13, 78, 84, 90, 91, 92], "intermedi": [4, 8, 85], "statist": [4, 9, 12, 21, 25, 35, 56, 57, 64, 85, 88, 89, 92], "convert": [4, 9, 11, 33, 36, 40, 48, 49, 52, 56, 63, 72, 76, 79, 82, 83, 86, 89, 90, 91, 94, 95, 96], "hug": [4, 9, 11, 86], "face": [4, 9, 11, 15, 86, 90, 95], "kei": [4, 6, 9, 11, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 40, 47, 56, 57, 63, 65, 84, 85, 86, 89, 91, 92, 94, 96], "string": [4, 9, 11, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 40, 51, 56, 57, 69, 73, 76, 77, 82, 88, 89, 91, 94, 95, 101], "dictionari": [4, 6, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 40, 46, 51, 56, 57, 60, 61, 63, 64, 84, 85, 88, 89, 92, 94, 95, 96], "path": [4, 11, 36, 39, 40, 64, 83, 84, 91, 96], "local": [4, 6, 9, 11, 36, 37, 40, 83, 84, 85, 86, 90, 91, 92, 94, 95, 97, 99, 101], "text": [4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 41, 47, 65, 74, 76, 77, 78, 80, 84, 85, 87, 90, 91, 92, 93, 94, 97], "txt": [4, 11, 101], "csv": [4, 11, 81, 82, 88, 89, 99], "json": [4, 11], "hub": [4, 11], "multiclass": [4, 11, 14, 47, 51, 56, 95], "regress": [4, 6, 9, 11, 13, 15, 20, 29, 31, 33, 82, 84, 85, 89, 93, 94, 97], "multilabel": [4, 11, 13, 14, 20, 24, 31, 33, 48, 95], "imag": [4, 8, 35, 40, 61, 63, 64, 65, 70, 72, 73, 78, 84, 85, 87, 90, 91, 93, 94, 95, 96, 98, 100], "point": [4, 6, 8, 9, 17, 25, 36, 40, 84, 85, 86, 88, 89, 91, 92, 94], "field": [4, 9, 36, 40], "themselv": [4, 81, 82, 99], "pil": [4, 86], "cleanvis": [4, 9], "level": [4, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 50, 74, 76, 85, 86, 91, 93, 95, 100], "load_dataset": [4, 11, 86], "glue": 4, "sst2": 4, "properti": [4, 11, 12, 33, 36, 40], "has_label": [4, 11], "class_nam": [4, 11, 19, 35, 41, 57, 64, 73, 77, 78, 90, 92, 96, 100, 101], "empti": [4, 11, 45, 56, 85, 91, 95], "find_issu": [4, 5, 6, 7, 9, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 78, 83, 84, 85, 86, 88, 89, 91, 92, 95, 99], "knn_graph": [4, 9, 15, 17, 18, 25, 27, 30, 88], "issue_typ": [4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 83, 84, 85, 86, 88, 89, 91, 92, 95, 99], "sort": [4, 15, 39, 42, 47, 56, 58, 61, 63, 64, 66, 72, 74, 76, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 99, 100, 101], "common": [4, 12, 15, 85, 87, 90, 91, 92, 95, 96, 100], "real": [4, 15, 78, 84, 85, 91, 92, 94, 99, 100], "world": [4, 15, 78, 84, 85, 91, 92, 94, 99, 100], "interact": [4, 15, 89, 91], "embed": [4, 9, 15, 65, 78, 82, 83, 84, 85, 88, 89, 92, 95, 99], "thereof": [4, 15], "insight": [4, 15, 64, 94], "best": [4, 8, 9, 15, 46, 56, 66, 81, 82, 84, 85, 86, 88, 89, 91, 94, 95, 97, 99, 101], "2d": [4, 15, 31, 39, 47, 48, 50, 51, 56, 81, 83, 95], "num_exampl": [4, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 57, 83, 84, 85, 86, 88, 89, 92], "properli": [4, 9, 39, 46, 51, 52, 70, 83, 84, 85, 86, 88, 89, 91, 92, 95, 97, 99, 100], "respect": [4, 36, 40, 61, 64, 83, 84, 85, 86, 88, 89, 92, 95, 96], "lexicograph": [4, 46, 51, 83, 84, 85, 86, 88, 89, 92, 95], "represent": [4, 9, 15, 33, 36, 40, 48, 58, 78, 82, 83, 84, 85, 86, 89, 91, 92, 97], "num_featur": [4, 15, 36, 40, 55], "distanc": [4, 9, 15, 17, 25, 27, 30, 49, 63, 65, 88, 97], "nearest": [4, 9, 15, 22, 25, 27, 49, 65, 85, 89, 97], "neighbor": [4, 9, 15, 17, 22, 25, 27, 49, 65, 84, 85, 86, 88, 89, 91, 97], "graph": [4, 9, 12, 15, 17, 25, 30], "squar": [4, 51, 68, 90, 99], "csr": 4, "evenli": 4, "omit": [4, 63, 64, 86, 96], "itself": [4, 31, 36, 40, 96], "three": [4, 9, 35, 56, 57, 68, 73, 81, 83, 84, 85, 88, 90, 92, 94, 98, 99, 100, 101], "indptr": 4, "wise": 4, "start": [4, 6, 9, 33, 36, 37, 40, 47, 78, 88, 95, 101], "th": [4, 41, 46, 50, 51, 56, 58, 61, 63, 64, 65, 74, 76, 77, 89, 95, 96, 101], "ascend": [4, 35, 57, 86, 92], "segment": [4, 70, 72, 73, 93], "reflect": [4, 81, 82, 88, 89, 94, 96, 97, 99], "maintain": [4, 55], "posit": [4, 36, 40, 49, 51, 64, 90, 97], "nearestneighbor": [4, 9, 17, 65, 88, 97], "kneighbors_graph": [4, 17, 88], "illustr": 4, "todens": 4, "second": [4, 47, 51, 64, 66, 84, 91, 92, 101], "duplic": [4, 8, 20, 21, 36, 40, 78, 84, 92, 99], "explicit": 4, "precend": 4, "construct": [4, 6, 9, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 40, 47, 55], "neither": [4, 9, 13, 96], "nor": [4, 9, 13], "collect": [4, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 56, 91, 94, 101], "unspecifi": [4, 15, 42, 58], "interest": [4, 15, 21, 73, 77, 81, 82, 89, 92, 99, 100, 101], "constructor": [4, 9, 15, 22, 29], "issuemanag": [4, 8, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 32], "respons": [4, 15, 21, 68, 69, 90, 99, 101], "random_st": [4, 81, 83, 84, 85, 86, 92, 95, 97], "lab": [4, 5, 7, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 39, 78, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 99], "comprehens": [4, 78, 86, 95, 99], "nbr": 4, "n_neighbor": [4, 9, 17, 65], "metric": [4, 9, 17, 18, 25, 30, 51, 55, 64, 65, 81, 82, 83, 86, 88, 89, 92, 99], "euclidean": [4, 9, 63, 65, 88], "mode": [4, 10, 17, 36, 39, 40, 97], "4x4": 4, "float64": [4, 25, 36, 40, 76], "compress": [4, 9, 51, 70, 72], "toarrai": 4, "NOT": [4, 39, 89], "23606798": 4, "41421356": 4, "configur": [4, 15, 47, 85], "suppos": [4, 9, 61, 81, 82, 97, 99], "who": [4, 63, 81, 88, 92, 101], "manag": [4, 7, 8, 9, 12, 13, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 55, 84, 91], "clean_learning_kwarg": [4, 9, 22, 29, 91, 99], "labelissuemanag": [4, 9, 13, 20, 22], "prune_method": [4, 79], "prune_by_noise_r": [4, 42, 58, 92], "report": [4, 6, 10, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 57, 77, 78, 83, 84, 85, 88, 89, 91, 92, 95, 99, 101], "include_descript": [4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32], "show_summary_scor": [4, 32], "show_all_issu": [4, 32], "summari": [4, 6, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 41, 54, 55, 57, 62, 71, 72, 74, 75, 76, 79, 83, 84, 85, 86, 88, 89, 90, 92, 96, 99, 100, 101], "show": [4, 6, 25, 36, 40, 46, 51, 64, 73, 77, 81, 85, 86, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101], "top": [4, 9, 35, 39, 41, 42, 51, 58, 61, 64, 66, 73, 77, 78, 82, 83, 84, 85, 88, 89, 90, 91, 92, 96, 97, 99, 101], "suffer": [4, 9, 12, 21, 58, 66, 77, 101], "onc": [4, 21, 35, 36, 40, 81, 84, 91, 92, 95, 96], "familiar": 4, "overal": [4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 41, 47, 56, 57, 60, 63, 64, 68, 72, 73, 74, 76, 78, 79, 83, 84, 85, 86, 88, 89, 90, 91, 94, 96, 101], "sever": [4, 6, 9, 11, 12, 21, 36, 39, 40, 42, 60, 63, 65, 66, 72, 76, 78, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 96, 97, 101], "compar": [4, 56, 65, 76, 84, 85, 88, 92, 96], "issue_summari": [4, 6, 9, 12, 84], "With": [4, 8, 9, 39, 82, 89, 91, 92, 94, 99, 100, 101], "usag": [4, 39, 55], "found": [4, 6, 9, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 95, 97, 99, 101], "usual": [4, 11, 31, 32, 86, 94, 99], "directli": [4, 13, 15, 32, 33, 39, 55, 56, 82, 85, 89, 91, 95, 96, 99], "ti": [4, 56], "exhibit": [4, 6, 9, 12, 73, 85, 86, 88, 89, 92, 96], "ie": [4, 68], "likelihood": [4, 9, 39, 41, 42, 58, 63, 65, 66, 70, 74], "wherea": [4, 51, 58, 98], "outlier": [4, 8, 13, 20, 21, 30, 43, 66, 78, 84, 85, 92, 93, 99], "fundament": [4, 9], "incompar": 4, "quantiti": [4, 92, 99], "global": [4, 6, 21, 36, 40], "non_iid": [4, 9, 13, 25, 85, 86, 88, 89, 92], "hypothesi": 4, "iid": [4, 6, 8, 25, 88, 92], "never": [4, 83, 92, 95, 97, 98], "someth": [4, 6, 36, 40, 66, 96], "123": [4, 84, 85], "456": [4, 81, 82, 83], "nearest_neighbor": 4, "7": [4, 47, 48, 55, 74, 76, 81, 82, 83, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101], "9": [4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 41, 47, 48, 60, 74, 76, 81, 82, 83, 84, 85, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "distance_to_nearest_neighbor": [4, 84, 85, 86, 88, 89, 92], "789": 4, "get_issu": [4, 9, 12, 83, 85, 86, 88, 89, 91, 95, 99], "issue_nam": [4, 5, 6, 9, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 84, 85], "focu": [4, 12, 89, 100, 101], "full": [4, 9, 12, 39, 55, 64, 86, 101], "summar": [4, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 57, 73, 77, 78, 100], "valueerror": [4, 11, 12, 33, 44, 47, 91], "specific_issu": [4, 12], "lie": [4, 9, 65, 66, 82, 83, 84, 85, 86, 88, 89, 92], "get_issue_summari": [4, 12, 85], "get_info": [4, 12, 85, 89], "yet": [4, 16, 26, 55, 90, 94], "list_possible_issue_typ": [4, 13, 14], "regist": [4, 6, 13, 14, 16, 26, 36, 40, 84], "rtype": [4, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40], "registri": [4, 13, 14], "list_default_issue_typ": [4, 13, 14], "folder": [4, 83, 84, 86], "load": [4, 11, 39, 64, 86, 90, 91, 92, 96, 97, 100, 101], "futur": [4, 9, 21, 36, 40, 56, 78, 82, 83, 84, 89, 91], "overwrit": [4, 84], "separ": [4, 35, 47, 60, 84, 85, 86, 91, 96, 98], "static": 4, "rememb": [4, 89, 91, 92], "part": [4, 9, 36, 40, 42, 61, 63, 64, 83, 84, 90, 100, 101], "ident": [4, 9, 21, 51, 89], "datalab": [5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 78, 81, 82, 83, 86, 91, 94, 99], "walk": 6, "alongsid": [6, 36, 40, 84, 91], "pre": [6, 7, 9, 36, 40, 84, 85, 99], "runtim": [6, 36, 39, 40, 68, 70, 72, 83, 86, 91], "issue_manager_factori": [6, 13, 84], "myissuemanag": [6, 13], "myissuemanagerforregress": 6, "decor": [6, 13], "ll": [6, 47, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 101], "thing": [6, 40, 82, 92, 99], "next": [6, 56, 78, 81, 82, 83, 88, 89, 91, 94, 96, 99, 101], "dummi": 6, "randint": [6, 30, 47, 84, 85, 91], "mark": [6, 9, 79, 96, 97, 99], "regard": [6, 85, 92], "rand": [6, 47, 84, 85], "is_": [6, 9, 84], "_issu": [6, 9, 84], "issue_score_kei": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 84], "whole": [6, 25, 36, 40, 85], "make_summari": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 84], "popul": [6, 85, 89], "verbosity_level": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "std": [6, 96], "raw_scor": 6, "bit": 6, "involv": [6, 39, 73, 77, 91, 95], "intermediate_arg": 6, "min": [6, 47, 63, 76, 84, 91, 97], "sin_filt": 6, "sin": 6, "arang": 6, "kernel": 6, "affect": [6, 9, 36, 40, 70, 76, 89, 91], "easili": [6, 45, 79, 81, 82, 83, 85, 88, 89, 92, 94, 95, 97, 98, 99, 100], "hard": [6, 40, 90, 97], "sai": [6, 9, 36, 40, 95, 100], "anoth": [6, 21, 35, 39, 50, 63, 66, 82, 88, 89, 91, 92, 94, 97], "try": [6, 8, 9, 39, 42, 55, 56, 70, 72, 78, 85, 86, 88, 89, 91, 92, 100], "won": [6, 36, 40, 84, 85, 91, 95], "issue_manag": [6, 9, 10, 12, 14, 17, 18, 19, 22, 24, 25, 26, 27, 29, 30, 84], "instanti": [6, 15, 39, 55, 65, 82, 83, 85, 88], "477762": 6, "286455": 6, "term": [6, 9, 45, 51, 64, 83, 84, 85, 86, 88, 89, 92], "4778": 6, "is_basic_issu": 6, "basic_scor": 6, "13": [6, 18, 27, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 96, 97, 99, 100, 101], "003042": 6, "058117": 6, "11": [6, 55, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "121908": 6, "15": [6, 49, 55, 68, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 99, 100, 101], "169312": 6, "17": [6, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 99, 100, 101], "229044": 6, "2865": 6, "is_intermediate_issu": 6, "intermediate_scor": 6, "000000": [6, 84, 85, 90, 92], "007059": 6, "009967": 6, "010995": 6, "087332": 6, "016296": 6, "03947": 6, "019459": 6, "794251": 6, "underperform": [7, 8, 30], "group": [7, 8, 25, 30, 90, 96, 101], "dbscan": [7, 9, 30, 91], "hdbscan": [7, 91], "etc": [7, 9, 21, 31, 36, 40, 45, 55, 56, 74, 78, 84, 85, 88, 89, 91, 92, 95, 99], "sensit": [7, 9, 49], "ep": [7, 30, 64], "radiu": 7, "min_sampl": [7, 30], "kmean": [7, 91], "your_data": 7, "get_pred_prob": 7, "n_cluster": [7, 30, 91], "cluster_id": [7, 9, 30, 91], "labels_": 7, "underperforming_group": [7, 9, 13, 20, 85, 86, 88, 89, 91, 92], "search": [8, 9, 19, 25, 26, 50, 68, 91, 98], "nondefault": 8, "Near": [8, 91], "imbal": [8, 20, 60, 65, 66, 85], "null": [8, 13, 20, 85, 86, 89, 92], "valuat": [8, 17], "togeth": [8, 9, 45, 82, 84, 85, 86, 88, 89, 92, 99, 101], "built": [8, 47], "own": [8, 36, 38, 40, 54, 60, 61, 64, 70, 74, 81, 82, 83, 85, 86, 88, 89, 91, 94, 95, 99, 100, 101], "prerequisit": 8, "basic": [8, 40, 55, 88, 89, 97], "fulli": [8, 9, 36, 40, 55, 91], "platform": [8, 9, 78, 86, 88, 89, 91], "write": [8, 9], "code": [8, 9, 36, 40, 45, 51, 55, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101], "being": [8, 9, 12, 35, 36, 40, 42, 47, 50, 51, 66, 81, 88, 91, 92, 99, 100], "100x": [8, 9], "faster": [8, 9, 39, 65, 68, 70, 72, 91, 92], "intellig": [8, 9], "quickli": [8, 9, 37, 81, 83, 86, 88, 89, 91, 95, 97, 100, 101], "fix": [8, 9, 56, 82, 89, 92, 99], "scientist": [8, 9], "million": [8, 9, 101], "thank": [8, 9], "ai": [8, 9, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 97, 99, 101], "suggest": [8, 9, 35, 56, 57, 63, 82, 86, 89, 91, 99], "power": [8, 9, 86, 88, 89, 90, 92, 101], "automl": [8, 9, 78, 91], "system": [8, 9, 83, 86, 88, 89, 100], "foundat": [8, 9, 78], "improv": [8, 9, 56, 81, 82, 85, 86, 90, 91, 92, 99, 100], "click": [8, 9, 83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "tune": [8, 9, 82, 83, 89, 90, 97], "serv": [8, 9, 12, 15, 94], "auto": [8, 9, 81, 82, 85, 90, 91, 99], "free": [8, 9, 78, 83, 85, 86, 88, 89, 91, 92], "page": [9, 85, 91, 92], "variou": [9, 12, 29, 38, 52, 54, 78, 81, 84, 85, 88, 89, 90, 91, 92, 94, 96], "why": [9, 89], "matter": [9, 35, 57, 82, 89], "didn": 9, "plu": [9, 99], "_score": 9, "flag": [9, 21, 25, 42, 47, 57, 58, 61, 68, 78, 82, 83, 84, 85, 86, 88, 89, 90, 92, 96, 97, 99, 100], "badli": [9, 63, 81, 82, 101], "issue_scor": 9, "outlier_scor": [9, 27, 84, 85, 86, 88, 89, 92, 97], "atyp": [9, 65, 84, 85, 86, 88, 89, 92, 97], "datapoint": [9, 30, 42, 47, 51, 66, 69, 78, 81, 82, 83, 84, 85, 88, 89, 91, 98, 99], "is_issu": [9, 21], "is_outlier_issu": [9, 84, 85, 86, 88, 89, 92], "annot": [9, 35, 46, 56, 57, 58, 60, 61, 63, 64, 73, 76, 77, 78, 83, 84, 85, 86, 88, 89, 91, 92, 93, 96, 100], "transform": [9, 31, 47, 49, 51, 65, 66, 81, 82, 85, 86, 89, 97, 101], "dissimilar": [9, 88, 89], "preced": 9, "cosin": [9, 65, 97], "incorrect": [9, 63, 66, 69, 81, 83, 84, 85, 86, 88, 89, 92, 96, 99], "due": [9, 39, 42, 66, 70, 72, 83, 84, 85, 86, 88, 89, 92, 99], "appear": [9, 35, 46, 57, 58, 61, 69, 85, 86, 88, 89, 99, 100], "now": [9, 39, 79, 81, 82, 83, 85, 94, 96, 97, 99, 101], "u": [9, 81, 82, 83, 84, 86, 88, 91, 92, 94, 95, 98, 99, 100, 101], "token": [9, 41, 50, 72, 73, 74, 75, 76, 77, 91, 92, 93], "calcul": [9, 17, 25, 39, 47, 56, 60, 61, 63, 64, 65, 68, 72, 86, 90], "hamper": [9, 86, 90], "analyt": [9, 78, 91, 94], "lead": [9, 63, 66, 86, 96], "draw": [9, 84, 85], "conclus": [9, 89], "veri": [9, 35, 57, 61, 63, 82, 84, 85, 86, 88, 89, 91, 92, 94, 97, 99], "rare": [9, 42, 64, 84, 85, 86, 88, 89, 91, 92], "anomal": [9, 66, 84, 85, 86, 88, 89, 92], "articl": [9, 39, 91], "blog": 9, "unexpect": [9, 36, 40, 89], "consequ": 9, "inspect": [9, 82, 83, 85, 86, 92, 96, 99], "neg": [9, 63, 64, 84, 85, 90], "extrem": [9, 84, 85, 86, 88, 89, 91, 92], "rel": [9, 35, 56, 57, 65, 84, 85, 86, 88, 89, 92, 97], "record": [9, 36, 40, 83, 88, 99], "abbrevi": 9, "misspel": 9, "typo": [9, 77], "resolut": 9, "video": [9, 90], "audio": [9, 84, 85, 87, 91], "minor": [9, 50], "variat": 9, "translat": 9, "d": [9, 49, 81, 88, 89, 91, 92, 95, 99, 101], "constant": [9, 30, 68], "median": [9, 29, 49], "question": [9, 21, 78, 92], "nearli": [9, 21, 85, 86, 88, 89], "awar": [9, 79, 92], "presenc": [9, 92], "near_dupl": [9, 13, 18, 84, 85, 86, 88, 89, 91, 92], "signific": [9, 88, 89, 92], "violat": [9, 88, 89, 92], "assumpt": [9, 88, 89, 92], "changepoint": [9, 88, 89, 92], "shift": [9, 88, 89, 92], "drift": [9, 85, 88, 92], "autocorrel": [9, 88, 89, 92], "almost": [9, 88, 89, 92], "adjac": [9, 88, 89, 92], "tend": [9, 35, 45, 88, 89, 92, 100, 101], "sequenti": [9, 36, 40, 55, 86], "gap": 9, "b": [9, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 50, 51, 76, 81, 88, 89, 90, 91, 92, 98, 101], "x1": [9, 61, 64, 96], "x2": [9, 61, 64, 96], "10th": 9, "100th": 9, "90": [9, 76, 81, 88, 92, 98, 99], "similarli": [9, 36, 40, 84, 86, 88, 91, 96], "math": [9, 86], "behind": [9, 65, 92], "proper": [9, 51, 56, 61, 64, 81, 86, 89, 91, 94, 96], "closer": [9, 63, 96], "scenario": [9, 66, 84, 85], "underli": [9, 41, 65, 74, 76, 101], "stem": [9, 65, 97], "evolv": 9, "influenc": 9, "act": [9, 63, 84], "accordingli": [9, 31], "emploi": [9, 95, 97], "partit": [9, 98], "ahead": 9, "good": [9, 36, 40, 49, 55, 57, 63, 66, 70, 72, 73, 78, 86, 88, 89], "problem": [9, 31, 39, 47, 73, 78, 84, 85, 86, 89, 91], "deploy": [9, 81, 82, 92, 99], "overlook": [9, 63, 96], "fact": 9, "thu": [9, 35, 40, 57, 81, 83, 88, 89, 92, 98, 101], "diagnos": [9, 85, 91], "rarest": [9, 85], "q": [9, 96], "fall": [9, 63, 72, 76, 92, 97], "subpar": 9, "special": [9, 50], "techniqu": [9, 96], "smote": 9, "asymmetr": [9, 35], "class_imbal": [9, 13, 19, 85, 86, 88, 89, 92], "excess": [9, 86], "dark": [9, 100], "bright": [9, 101], "blurri": [9, 86], "lack": [9, 55], "unusu": [9, 96, 97], "cluster": [9, 17, 30], "slice": 9, "poor": 9, "subpopul": 9, "faq": [9, 78, 85, 86, 88, 89, 93], "lowest": [9, 56, 64, 85, 86, 91, 94, 95, 96, 100], "get_self_confidence_for_each_label": [9, 47, 66], "r": [9, 39, 68, 84, 85, 99, 100], "tabular": [9, 78, 80, 84, 85, 87, 91, 94], "categor": [9, 65, 80, 81, 84, 85, 87, 91, 99], "encod": [9, 48, 64, 70, 73, 81, 82, 88, 89, 91, 99, 100], "miss": [9, 26, 36, 40, 51, 61, 63, 88, 91, 96, 99], "pattern": 9, "contribut": [9, 17, 96], "isn": [9, 16, 26], "approxim": [9, 17, 39, 65, 94], "shaplei": [9, 17], "knn": [9, 12, 17, 25, 30, 65, 88, 97], "scalabl": 9, "sacrific": 9, "One": [9, 51, 65, 91], "quantif": 9, "data_valu": [9, 13, 20], "exert": [9, 85], "possible_issue_typ": 9, "label_kwarg": 9, "outlier_kwarg": 9, "near_duplicate_kwarg": 9, "non_iid_kwarg": 9, "class_imbalance_kwarg": 9, "underperforming_group_kwarg": 9, "null_kwarg": 9, "data_valuation_kwarg": 9, "health_summary_paramet": [9, 20, 22, 29], "health_summari": [9, 22, 35, 78, 90], "health_summary_kwarg": 9, "tandem": [9, 90], "view": [9, 36, 40, 41, 42, 72, 74, 76, 78, 81, 82, 83, 84, 85, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 101], "ood_kwarg": 9, "outofdistribut": [9, 27, 65, 97], "outsid": [9, 91, 95], "outlierissuemanag": [9, 13, 20, 27, 84], "nearduplicateissuemanag": [9, 13, 18, 20], "noniidissuemanag": [9, 13, 20, 25], "num_permut": [9, 25], "permut": [9, 25], "significance_threshold": [9, 25], "signic": 9, "noniid": [9, 20], "classimbalanceissuemanag": [9, 13, 19, 20], "underperforminggroupissuemanag": [9, 13, 20, 30], "determinin": 9, "neighbour": 9, "min_cluster_sampl": [9, 30], "filter_cluster_id": [9, 20, 30], "clustering_kwarg": [9, 30], "nullissuemanag": [9, 13, 20, 26], "datavaluationissuemanag": [9, 13, 17, 20], "codeblock": 9, "demonstr": [9, 39, 84, 85, 86, 89, 91, 92, 94, 95, 96, 99, 100], "howev": [9, 36, 40, 51, 81, 82, 83, 86, 88, 89, 94, 98, 100], "mandatori": 9, "image_issue_types_kwarg": 9, "32": [9, 83, 84, 90, 94, 96], "fewer": [9, 42, 51, 96], "vice": [9, 57], "versa": [9, 57], "light": [9, 86, 90, 96, 100], "29": [9, 86, 90, 94, 95, 96, 100, 101], "low_inform": [9, 86], "odd_aspect_ratio": [9, 86], "35": [9, 84, 90, 94, 95, 96], "odd_siz": [9, 86], "10": [9, 17, 18, 22, 25, 30, 36, 37, 64, 65, 66, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101], "doc": [9, 36, 40, 78, 83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "studio": [10, 78, 85, 86, 88, 89, 91], "data_issu": [10, 14, 15, 32, 84], "issue_find": [10, 14], "factori": [10, 14, 15], "model_output": [10, 14], "except": [11, 36, 40, 55, 66, 84, 85, 86, 94], "dataformaterror": [11, 14], "add_not": 11, "with_traceback": 11, "tb": 11, "__traceback__": 11, "datasetdicterror": [11, 14], "datasetdict": 11, "datasetloaderror": [11, 14], "dataset_typ": 11, "fail": 11, "hold": 11, "associ": [11, 15, 31, 33, 36, 40, 64, 94], "sublist": 11, "map_to_int": 11, "abc": [11, 21, 31], "is_avail": [11, 86], "dataissu": [12, 14, 15, 32], "central": [12, 101], "repositori": 12, "strategi": [12, 47, 91], "_infostrategi": 12, "basi": 12, "collect_statist": 12, "reus": [12, 21], "avoid": [12, 36, 39, 40, 42, 51, 58, 61, 64, 68, 70, 72, 84, 85, 91], "recomput": [12, 82], "weighted_knn_graph": 12, "issue_manager_that_computes_knn_graph": 12, "collect_issues_from_issue_manag": 12, "collect_issues_from_imagelab": 12, "imagelab": 12, "set_health_scor": 12, "health": [12, 22, 35, 57, 78], "get_data_statist": [12, 14], "concret": 13, "subclass": [13, 36, 40, 65, 84], "regressionlabelissuemanag": [13, 20, 28, 29], "multilabelissuemanag": [13, 20, 23, 24], "from_str": [13, 33, 43, 47], "my_issu": 13, "logic": [13, 33, 39, 42, 70, 72], "stabl": [14, 20, 23, 28, 38, 43, 51, 54, 65, 79], "issuefind": [14, 15, 32], "modeloutput": [14, 31], "multiclasspredprob": [14, 31], "regressionpredict": [14, 31], "multilabelpredprob": [14, 31], "instati": 15, "public": [15, 92, 96, 100, 101], "creation": [15, 40], "execut": [15, 36, 40, 84, 91, 96], "coordin": [15, 61, 63, 64, 96, 101], "behavior": [15, 35, 36, 40, 64, 91], "At": [15, 64, 91], "get_available_issue_typ": 15, "direct": [16, 26, 36, 40, 55], "valuabl": 17, "vstack": [17, 51, 86, 90, 91, 92, 94, 95], "25": [17, 25, 36, 47, 49, 85, 86, 90, 92, 94, 95, 96, 101], "classvar": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "short": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 50, 51], "data_valuation_scor": 17, "item": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 84, 85, 86, 91, 92, 94, 95], "some_info_kei": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "additional_info_kei": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "default_threshold": [17, 20, 27], "arxiv": [17, 92], "ab": [17, 92, 96], "1911": 17, "07128": 17, "larger": [17, 68, 70, 72, 86, 89, 90, 91], "collect_info": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "info_to_omit": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "compos": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 36, 40, 82, 89, 97], "is_x_issu": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "x_score": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_a": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_b1": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_b2": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "report_str": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32], "_": [18, 21, 22, 24, 25, 26, 29, 30, 47, 50, 51, 81, 83, 84, 86, 90, 92, 95], "near_duplicate_set": [18, 20, 84, 85, 86, 88, 89, 91, 92], "occurr": [18, 19, 21, 25, 26, 27, 30, 50], "median_nn_dist": 18, "near_duplicate_scor": [18, 84, 85, 86, 88, 89, 91, 92], "class_imbalance_scor": [19, 85], "bleed": [20, 23, 28, 38], "edg": [20, 23, 28, 38, 63, 78, 92, 101], "sharp": [20, 23, 28, 38], "get_health_summari": [20, 22], "ood": [20, 27, 65, 66, 84, 85, 86, 89, 92, 97], "simplified_kolmogorov_smirnov_test": [20, 25], "outlier_cluster_label": [20, 30], "no_underperforming_cluster_id": [20, 30], "set_knn_graph": [20, 30], "perform_clust": [20, 30], "get_worst_clust": [20, 30], "find_issues_with_predict": [20, 28, 29], "find_issues_with_featur": [20, 28, 29], "believ": [21, 100], "priori": [21, 92], "abstract": [21, 31], "applic": [22, 56, 91, 92, 94, 101], "typevar": [22, 24, 36, 40, 50, 60, 63, 64], "scalartyp": [22, 24], "covari": [22, 24, 68, 99], "summary_dict": 22, "label_scor": [22, 24, 29, 83, 84, 85, 86, 88, 89, 92, 95, 99], "neighbor_histogram": 25, "non_neighbor_histogram": 25, "kolmogorov": 25, "smirnov": 25, "largest": [25, 39, 47, 66, 70, 72, 96, 100], "empir": [25, 46, 56], "cumul": 25, "ecdf": 25, "histogram": [25, 88, 99], "absolut": [25, 29], "dimension": [25, 51, 83, 92, 97], "trial": 25, "non_iid_scor": [25, 85, 88, 89, 92], "null_track": 26, "extend": [26, 48, 55, 86, 96, 97, 101], "superclass": 26, "arbitrari": [26, 35, 72, 76, 84, 97, 99], "prompt": 26, "address": [26, 82, 84, 85, 89, 91], "enabl": [26, 40], "null_scor": [26, 85], "37037": 27, "q3_avg_dist": 27, "iqr_avg_dist": 27, "median_outlier_scor": 27, "multipli": 29, "deleg": 29, "confus": [30, 31, 35, 36, 40, 42, 51, 64, 82, 101], "50": [30, 40, 91, 92, 94, 96, 97, 99, 101], "keepdim": [30, 91], "signifi": 30, "absenc": 30, "find_issues_kwarg": 30, "int64": [30, 83, 94], "npt": 30, "int_": 30, "id": [30, 56, 84, 86, 91, 94], "unique_cluster_id": 30, "_description_": 30, "performed_clust": 30, "worst_cluster_id": 30, "underperforming_group_scor": [30, 85], "convent": [31, 33], "subject": [31, 33], "meant": [31, 33], "Not": 31, "mainli": [31, 97, 101], "content": [31, 65, 83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "fetch": [31, 39, 83, 85, 91], "datset": 32, "exclud": [32, 41, 73, 77, 84, 91, 101], "get_report": 32, "enum": [33, 47], "qualnam": [33, 47], "boundari": [33, 47, 84, 85], "continu": [33, 55, 81, 82, 86, 89, 91, 94, 96, 99, 101], "binari": [33, 47, 51, 58, 60, 92, 101], "simultan": [33, 99], "task_str": 33, "is_classif": 33, "__contains__": [33, 43, 47], "member": [33, 36, 40, 47, 84, 85], "typeerror": [33, 47], "12": [33, 47, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 99, 100, 101], "__getitem__": [33, 43, 47], "match": [33, 35, 36, 40, 42, 47, 56, 57, 66, 84, 85, 86, 90, 96, 98, 100], "__iter__": [33, 43, 47], "__len__": [33, 43, 47], "alias": [33, 47], "is_regress": 33, "is_multilabel": 33, "overview": [35, 81, 82, 83, 85, 86, 88, 89, 94, 96, 97, 99, 101], "modifi": [35, 36, 39, 40, 51, 91, 92], "help": [35, 36, 40, 64, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 94, 95, 99, 100, 101], "rank_classes_by_label_qu": [35, 85], "merg": [35, 50, 78, 90, 91, 101], "find_overlapping_class": [35, 91, 92], "problemat": [35, 57, 73, 77, 83, 96, 101], "unnorm": [35, 57, 92], "abov": [35, 36, 39, 40, 51, 56, 63, 64, 66, 72, 76, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 101], "model_select": [35, 47, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 97, 99], "cross_val_predict": [35, 40, 81, 82, 83, 84, 85, 88, 89, 91, 92, 94, 98, 99], "get_data_labels_from_dataset": 35, "yourfavoritemodel": [35, 92], "cv": [35, 47, 81, 83, 84, 85, 88, 92, 94], "df": [35, 51, 77, 83, 91], "overall_label_qu": [35, 57], "col": 35, "prob": [35, 50, 92, 98], "divid": [35, 57, 66], "label_nois": [35, 57], "human": [35, 90, 100, 101], "clearli": [35, 66, 86, 96, 100], "num": [35, 57, 90, 92], "overlap": [35, 78, 90, 91, 92], "ontolog": 35, "publish": [35, 101], "therefor": [35, 66], "vehicl": [35, 90], "truck": [35, 90, 97, 100], "intuit": [35, 57], "car": [35, 90, 96, 100], "frequent": [35, 56, 88, 91, 99], "characterist": 35, "l": [35, 36, 40, 61, 63, 64], "class1": 35, "class2": 35, "relationship": 35, "dog": [35, 51, 57, 59, 73, 90, 91, 97, 98, 101], "cat": [35, 51, 57, 59, 90, 91, 97, 98], "captur": [35, 83, 96, 97, 100], "co": [35, 36, 37], "noisy_label": [35, 84, 85, 95], "overlapping_class": 35, "descend": [35, 36, 40, 47, 57, 64], "overall_label_health_scor": [35, 57, 92], "half": [35, 36, 38, 40, 57, 90, 101], "health_scor": [35, 57], "classes_by_label_qu": [35, 85], "cnn": [36, 38, 40, 86], "cifar": [36, 37, 90, 97], "teach": [36, 37], "bhanml": 36, "blob": 36, "master": [36, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99], "call_bn": [36, 38], "bn": 36, "input_channel": 36, "n_output": 36, "dropout_r": 36, "top_bn": 36, "architectur": [36, 40], "shown": [36, 64, 84, 91, 94, 97, 98, 100, 101], "forward": [36, 37, 38, 40, 86, 94], "overridden": [36, 40], "although": [36, 40, 65, 81, 88], "recip": [36, 40], "afterward": [36, 40], "sinc": [36, 40, 44, 52, 57, 64, 72, 76, 91, 94, 95, 96, 98, 101], "former": [36, 40], "hook": [36, 40, 90], "silent": [36, 39, 40], "t_destin": [36, 38, 40], "__call__": [36, 38, 40, 43, 47], "add_modul": [36, 38, 40], "child": [36, 40], "fn": [36, 40, 64], "recurs": [36, 40, 47], "submodul": [36, 40], "children": [36, 38, 40, 101], "nn": [36, 37, 40, 86], "init": [36, 40, 92], "no_grad": [36, 40, 86, 97], "init_weight": [36, 40], "linear": [36, 40, 82, 86, 89], "fill_": [36, 40], "net": [36, 40, 83, 86, 90], "in_featur": [36, 40], "out_featur": [36, 40], "bia": [36, 40, 86], "tensor": [36, 37, 40, 82, 83, 86, 89, 97], "requires_grad": [36, 40], "bfloat16": [36, 38, 40], "cast": [36, 40, 83], "buffer": [36, 38, 40], "datatyp": [36, 40], "xdoctest": [36, 40], "undefin": [36, 40], "var": [36, 40], "buf": [36, 40], "20l": [36, 40], "1l": [36, 40], "5l": [36, 40], "call_super_init": [36, 38, 40], "immedi": [36, 40, 97], "compil": [36, 38, 40, 55], "cpu": [36, 38, 40, 42, 83, 86], "move": [36, 40, 47, 79, 90], "cuda": [36, 38, 40, 83, 86], "devic": [36, 40, 83, 86], "gpu": [36, 40, 82, 83, 89], "live": [36, 40], "copi": [36, 40, 68, 81, 83, 84, 85, 88, 91, 95, 98, 99], "doubl": [36, 38, 40], "dump_patch": [36, 38, 40], "eval": [36, 38, 40, 86, 95, 97], "dropout": [36, 40], "batchnorm": [36, 40], "grad": [36, 40], "extra_repr": [36, 38, 40], "line": [36, 40, 78, 84, 90, 94, 97, 101], "get_buff": [36, 38, 40], "target": [36, 37, 40, 68, 69, 97, 99], "throw": [36, 40], "get_submodul": [36, 38, 40], "explan": [36, 40], "qualifi": [36, 40], "referenc": [36, 40], "attributeerror": [36, 40], "invalid": [36, 40, 89], "resolv": [36, 40, 101], "get_extra_st": [36, 38, 40], "state_dict": [36, 38, 40], "set_extra_st": [36, 38, 40], "build": [36, 40, 86, 100], "picklabl": [36, 40], "serial": [36, 40], "backward": [36, 40, 86], "break": [36, 40, 86, 96], "pickl": [36, 40, 96], "get_paramet": [36, 38, 40], "let": [36, 40, 65, 66, 81, 82, 83, 85, 86, 88, 89, 91, 94, 95, 96, 97, 99, 100, 101], "net_b": [36, 40], "net_c": [36, 40], "conv": [36, 40], "conv2d": [36, 40, 86], "16": [36, 40, 47, 55, 72, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 100, 101], "33": [36, 40, 90, 96], "kernel_s": [36, 40], "stride": [36, 40], "200": [36, 40, 66, 90, 96, 101], "diagram": [36, 40, 98], "degre": [36, 40], "queri": [36, 40, 85, 86, 91, 95], "named_modul": [36, 38, 40], "o": [36, 40, 49, 50, 83, 84, 85, 90, 91, 92, 95, 96, 101], "transit": [36, 40], "ipu": [36, 38, 40], "load_state_dict": [36, 38, 40], "strict": [36, 40, 47], "persist": [36, 40], "strictli": [36, 40], "inplac": [36, 40, 94], "preserv": [36, 40, 51], "namedtupl": [36, 40], "missing_kei": [36, 40], "unexpected_kei": [36, 40], "runtimeerror": [36, 40], "idx": [36, 40, 51, 52, 64, 84, 86, 91, 92, 94, 96, 97], "named_buff": [36, 38, 40], "prefix": [36, 40, 83, 101], "remove_dupl": [36, 40], "prepend": [36, 40], "running_var": [36, 40], "named_children": [36, 38, 40], "conv4": [36, 40], "conv5": [36, 40], "memo": [36, 40], "named_paramet": [36, 38, 40], "register_backward_hook": [36, 38, 40], "deprec": [36, 40, 44, 82, 83, 89, 91], "favor": [36, 40], "register_full_backward_hook": [36, 38, 40], "removablehandl": [36, 40], "register_buff": [36, 38, 40], "running_mean": [36, 40], "register_forward_hook": [36, 38, 40], "with_kwarg": [36, 40], "always_cal": [36, 40], "possibli": [36, 40, 81, 88], "fire": [36, 40, 90], "register_module_forward_hook": [36, 40], "regardless": [36, 40, 84, 85], "register_forward_pre_hook": [36, 38, 40], "And": [36, 40], "forward_pr": [36, 40], "register_module_forward_pre_hook": [36, 40], "gradient": [36, 40, 86, 88, 99], "grad_input": [36, 40], "grad_output": [36, 40], "technic": [36, 40], "caller": [36, 40], "register_module_full_backward_hook": [36, 40], "register_full_backward_pre_hook": [36, 38, 40], "backward_pr": [36, 40], "register_module_full_backward_pre_hook": [36, 40], "register_load_state_dict_post_hook": [36, 38, 40], "post": [36, 40], "incompatible_kei": [36, 40], "modif": [36, 40], "thrown": [36, 40], "register_modul": [36, 38, 40], "register_paramet": [36, 38, 40], "register_state_dict_pre_hook": [36, 38, 40], "keep_var": [36, 40], "requires_grad_": [36, 38, 40], "autograd": [36, 40], "freez": [36, 40, 82, 83, 89], "finetun": [36, 40], "gan": [36, 40], "share_memori": [36, 38, 40], "share_memory_": [36, 40], "destin": [36, 40], "shallow": [36, 40], "releas": [36, 40, 55, 79, 83, 91], "design": [36, 40], "ordereddict": [36, 40], "detach": [36, 40, 86], "non_block": [36, 40], "memory_format": [36, 40], "channels_last": [36, 40], "Its": [36, 40, 47, 57, 63], "complex": [36, 40, 83], "integr": [36, 40, 78, 91], "asynchron": [36, 40], "host": [36, 40], "pin": [36, 40, 82, 89, 90], "desir": [36, 40, 50, 64], "4d": [36, 40], "ignore_w": [36, 40], "determinist": [36, 40, 83], "1913": [36, 40], "3420": [36, 40], "5113": [36, 40], "2325": [36, 40], "env": [36, 40], "torch_doctest_cuda1": [36, 40], "gpu1": [36, 40], "1914": [36, 40], "5112": [36, 40], "2324": [36, 40], "float16": [36, 40], "cdoubl": [36, 40], "3741": [36, 40], "2382": [36, 40], "5593": [36, 40], "4443": [36, 40], "complex128": [36, 40], "6122": [36, 40], "1150": [36, 40], "to_empti": [36, 38, 40], "storag": [36, 40, 82, 89], "dst_type": [36, 40], "xpu": [36, 38, 40], "zero_grad": [36, 38, 40, 86], "set_to_non": [36, 40], "reset": [36, 40], "context": [36, 40, 96], "noisili": [37, 92], "han": 37, "2018": 37, "cifar_cnn": [37, 38], "loss_coteach": [37, 38], "y_1": 37, "y_2": 37, "forget_r": 37, "class_weight": 37, "logit": [37, 55, 86], "decim": [37, 51], "forget": [37, 47, 101], "rate_schedul": 37, "epoch": [37, 38, 40, 86, 91], "initialize_lr_schedul": [37, 38], "lr": [37, 38, 40], "001": [37, 66, 91], "250": [37, 84, 85, 92, 96], "epoch_decay_start": 37, "80": [37, 81, 88, 95, 99], "schedul": 37, "adjust": [37, 42, 60, 65, 66, 78, 92], "beta": 37, "adam": 37, "adjust_learning_r": [37, 38], "alpha_plan": 37, "beta1_plan": 37, "forget_rate_schedul": [37, 38], "num_gradu": 37, "expon": 37, "tell": [37, 82, 86, 89, 92], "train_load": [37, 40], "model1": [37, 92], "optimizer1": 37, "model2": [37, 92], "optimizer2": 37, "dataload": [37, 86, 97], "parser": 37, "parse_arg": 37, "num_iter_per_epoch": 37, "print_freq": 37, "topk": 37, "top1": 37, "top5": 37, "test_load": 37, "offici": [38, 54, 101], "wish": [38, 54, 97, 100, 101], "adj_confident_thresholds_shar": [38, 39], "labels_shar": [38, 39], "pred_probs_shar": [38, 39], "labelinspector": [38, 39, 91], "get_num_issu": [38, 39], "get_quality_scor": [38, 39], "update_confident_threshold": [38, 39], "score_label_qu": [38, 39], "split_arr": [38, 39], "span_classif": 38, "display_issu": [38, 41, 71, 72, 73, 74, 75, 76, 77, 100, 101], "mnist_pytorch": 38, "get_mnist_dataset": [38, 40], "get_sklearn_digits_dataset": [38, 40], "simplenet": [38, 40], "batch_siz": [38, 39, 40, 70, 72, 86, 91, 97, 100], "log_interv": [38, 40], "momentum": [38, 40], "no_cuda": [38, 40], "test_batch_s": [38, 40, 86], "loader": [38, 40, 86], "set_predict_proba_request": [38, 40], "set_predict_request": [38, 40], "coteach": [38, 79], "mini": [39, 70, 72, 91], "low_self_confid": [39, 42, 58], "self_confid": [39, 42, 43, 47, 58, 60, 66, 74, 76, 81, 82, 91, 92], "conveni": [39, 82, 83, 89], "script": 39, "labels_fil": [39, 91], "pred_probs_fil": [39, 91], "quality_score_kwarg": 39, "num_issue_kwarg": 39, "return_mask": 39, "variant": [39, 56, 100], "read": [39, 44, 85, 91, 92, 97, 101], "zarr": [39, 91], "memmap": [39, 100], "pythonspe": 39, "mmap": [39, 91], "hdf5": 39, "further": [39, 41, 57, 58, 60, 63, 64, 72, 73, 83, 91], "yourfil": 39, "npy": [39, 90, 91, 100], "mmap_mod": [39, 100], "tip": [39, 42, 55, 91], "save_arrai": 39, "your_arrai": 39, "disk": [39, 90, 91], "npz": [39, 101], "maxim": [39, 56, 70, 72, 100], "multiprocess": [39, 42, 58, 70, 72, 86, 91], "linux": [39, 70, 72], "physic": [39, 42, 70, 72, 96], "psutil": [39, 42, 70, 72], "labels_arrai": [39, 52], "predprob": 39, "pred_probs_arrai": 39, "back": [39, 64, 84, 91, 96, 97], "store_result": 39, "becom": [39, 97], "verifi": [39, 91, 94, 97], "long": [39, 56, 65, 94], "enough": [39, 51, 91], "chunk": [39, 98], "ram": [39, 90], "end_index": 39, "labels_batch": 39, "pred_probs_batch": 39, "batch_result": 39, "indices_of_examples_with_issu": [39, 91], "shortcut": 39, "encount": [39, 42, 70], "1000": [39, 83, 89, 91, 97], "aggreg": [39, 43, 47, 56, 60, 63, 66, 76, 91, 92, 94], "seen": [39, 91, 97, 101], "far": [39, 56], "label_quality_scor": [39, 60, 63, 66, 69, 92, 96], "method1": 39, "method2": 39, "normalized_margin": [39, 42, 43, 47, 58, 60, 66, 74, 76], "low_normalized_margin": [39, 42, 58], "issue_indic": [39, 63, 86], "update_num_issu": 39, "arr": [39, 91], "chunksiz": 39, "convnet": 40, "bespok": [40, 55], "download": [40, 83, 86, 91, 97], "mnist": [40, 78, 83, 90], "handwritten": 40, "digit": [40, 83, 90], "last": [40, 47, 61, 64, 84, 85, 91, 94, 96, 101], "sklearn_digits_test_s": 40, "64": [40, 81, 86, 88, 92, 96], "01": [40, 66, 68, 83, 92, 95, 96, 101], "templat": 40, "flexibli": 40, "among": [40, 56, 92], "test_set": 40, "Be": 40, "overrid": 40, "train_idx": [40, 51, 97], "train_label": [40, 82, 97], "scikit": [40, 51, 65, 78, 82, 83, 84, 85, 88, 89, 91, 99], "span": 41, "sentenc": [41, 50, 74, 76, 77, 82, 89], "token_classif": [41, 50, 74, 76, 77, 91], "encourag": [42, 58, 66, 69], "multilabel_classif": [42, 57, 58, 60, 66, 91, 95], "pred_probs_by_class": 42, "prune_count_matrix_col": 42, "rank_by_kwarg": [42, 58, 66, 92], "num_to_remove_per_class": [42, 58], "bad": [42, 58, 63, 66, 89, 91], "seem": [42, 92, 95], "aren": 42, "confidence_weighted_entropi": [42, 43, 47, 58, 60, 66, 74, 76], "label_issues_idx": [42, 66], "entropi": [42, 44, 46, 47, 65, 66], "prune_by_class": [42, 58, 92], "predicted_neq_given": [42, 58, 92], "prune_counts_matrix": 42, "smallest": [42, 66], "unus": 42, "number_of_mislabeled_examples_in_class_k": 42, "delet": [42, 78, 82, 91], "too": [42, 47, 65, 85, 86, 91, 96], "thread": [42, 58], "window": [42, 83, 90], "shorter": [42, 61], "find_predicted_neq_given": 42, "find_label_issues_using_argmax_confusion_matrix": 42, "remove_noise_from_class": [43, 51], "clip_noise_r": [43, 51], "clip_valu": [43, 51], "value_count": [43, 51, 91], "value_counts_fill_missing_class": [43, 51], "get_missing_class": [43, 51], "round_preserving_sum": [43, 51], "round_preserving_row_tot": [43, 51], "estimate_pu_f1": [43, 51], "confusion_matrix": [43, 51], "print_square_matrix": [43, 51], "print_noise_matrix": [43, 51, 92], "print_inverse_noise_matrix": [43, 51], "print_joint_matrix": [43, 51, 92], "compress_int_arrai": [43, 51], "train_val_split": [43, 51], "subset_x_i": [43, 51], "subset_label": [43, 51], "subset_data": [43, 51], "extract_indices_tf": [43, 51], "unshuffle_tensorflow_dataset": [43, 51], "is_torch_dataset": [43, 51], "is_tensorflow_dataset": [43, 51], "csr_vstack": [43, 51], "append_extra_datapoint": [43, 51], "get_num_class": [43, 51], "num_unique_class": [43, 51], "get_unique_class": [43, 51], "format_label": [43, 51], "smart_display_datafram": [43, 51], "force_two_dimens": [43, 51], "latent_algebra": [43, 79], "compute_ps_py_inv_noise_matrix": [43, 45], "compute_py_inv_noise_matrix": [43, 45], "compute_inv_noise_matrix": [43, 45], "compute_noise_matrix_from_invers": [43, 45], "compute_pi": [43, 45], "compute_pyx": [43, 45], "label_quality_util": 43, "get_normalized_entropi": [43, 44], "multilabel_util": [43, 95], "stack_compl": [43, 48], "get_onehot_num_class": [43, 48], "int2onehot": [43, 48, 95], "onehot2int": [43, 48, 95], "multilabel_scor": [43, 60], "classlabelscor": [43, 47], "exponential_moving_averag": [43, 47, 60], "softmin": [43, 47, 60, 63, 72, 76], "possible_method": [43, 47], "multilabelscor": [43, 47], "get_class_label_quality_scor": [43, 47], "multilabel_pi": [43, 47], "get_cross_validated_multilabel_pred_prob": [43, 47], "transform_distances_to_scor": [43, 49], "token_classification_util": [43, 101], "get_sent": [43, 50, 101], "filter_sent": [43, 50, 101], "process_token": [43, 50], "merge_prob": [43, 50], "color_sent": [43, 50], "assert_valid_input": [43, 52], "assert_valid_class_label": [43, 52], "assert_nonempty_input": [43, 52], "assert_indexing_work": [43, 52], "labels_to_arrai": [43, 52], "labels_to_list_multilabel": [43, 52], "min_allowed_prob": 44, "wikipedia": 44, "activ": [44, 46, 55, 56, 78, 94], "towardsdatasci": 44, "cheatsheet": 44, "ec57bc067c0b": 44, "clip": [44, 51, 83], "behav": 44, "unnecessari": [44, 91], "slightli": [44, 81, 82], "interv": [44, 47, 97], "herein": 45, "inexact": 45, "cours": 45, "propag": 45, "throughout": [45, 51, 68, 83, 94, 100, 101], "increas": [45, 63, 65, 66, 83, 84, 91, 94, 95, 101], "dot": [45, 76, 91], "true_labels_class_count": 45, "pyx": 45, "multiannot": 46, "assert_valid_inputs_multiannot": 46, "labels_multiannot": [46, 56], "ensembl": [46, 47, 56, 66, 81, 88, 91, 95, 97, 99], "allow_single_label": 46, "annotator_id": 46, "assert_valid_pred_prob": 46, "pred_probs_unlabel": [46, 56], "format_multiannotator_label": [46, 56, 94], "formatted_label": [46, 51], "old": [46, 51, 79, 83, 90], "check_consensus_label_class": 46, "consensus_label": [46, 56, 94], "consensus_method": [46, 56], "consensu": [46, 56, 78, 93, 101], "establish": [46, 55, 82, 99], "compute_soft_cross_entropi": 46, "soft": [46, 90], "find_best_temp_scal": 46, "coarse_search_rang": [46, 68, 91], "fine_search_s": [46, 68, 91], "temperatur": [46, 47, 63, 72, 76], "scale": [46, 49, 81, 90, 91, 97, 100], "factor": [46, 47, 49, 70, 72], "minim": [46, 63, 97], "temp_scale_pred_prob": 46, "temp": 46, "sharpen": [46, 90], "smoothen": 46, "get_normalized_margin_for_each_label": [47, 66], "get_confidence_weighted_entropy_for_each_label": [47, 66], "75": [47, 84, 85, 90, 94, 95, 96, 99, 101], "scorer": 47, "alpha": [47, 60, 63, 84, 85, 92, 95, 99], "exponenti": 47, "ema": 47, "s_1": 47, "s_k": 47, "ema_k": 47, "accord": [47, 58, 88, 89, 92, 101], "formula": [47, 49], "_t": 47, "cdot": 47, "s_t": 47, "qquad": 47, "leq": 47, "_1": 47, "give": [47, 66, 92, 94, 100], "recent": [47, 101], "success": 47, "previou": [47, 86, 91, 96], "discount": 47, "s_ema": 47, "175": [47, 86, 92, 96], "underflow": 47, "nan": [47, 56, 81, 88, 94, 99], "aggregated_scor": 47, "base_scor": 47, "base_scorer_kwarg": 47, "aggregator_kwarg": [47, 60], "n_sampl": 47, "n_label": 47, "worst": [47, 94], "class_label_quality_scor": 47, "42": [47, 89, 90, 96, 101], "452": 47, "new_scor": 47, "575": 47, "get_label_quality_scores_per_class": [47, 59, 60], "ml_scorer": 47, "binar": [47, 48], "reformat": [47, 83], "wider": 47, "splitter": 47, "kfold": [47, 86], "onevsrestclassifi": [47, 95], "randomforestclassifi": [47, 92, 95], "n_split": [47, 85, 86, 95], "pred_prob_slic": 48, "onehot": 48, "hot": [48, 58, 64, 70, 73, 81, 88, 90, 91, 99, 100], "onehot_matrix": 48, "avg_dist": 49, "scaling_factor": 49, "exp": [49, 65, 66, 84], "dt": 49, "right": [49, 61, 64, 82, 89, 95, 96, 97], "strength": [49, 64], "pronounc": 49, "differenti": 49, "ly": 49, "rule": [49, 50, 90], "thumb": 49, "ood_features_scor": [49, 65, 97], "88988177": 49, "80519832": 49, "readabl": 50, "lambda": [50, 83, 84, 91, 94], "long_sent": 50, "headlin": 50, "charact": [50, 51], "s1": 50, "s2": 50, "processed_token": 50, "alecnlcb": 50, "entiti": [50, 78, 91, 101], "mapped_ent": 50, "unique_ident": 50, "loc": [50, 84, 85, 86, 101], "nbitbas": [50, 60], "probs_merg": 50, "55": [50, 90, 96, 99], "0125": [50, 76], "0375": 50, "075": 50, "025": 50, "color": [50, 73, 84, 85, 88, 92, 95, 97, 99, 100], "red": [50, 64, 84, 85, 90, 92, 95, 96, 97, 100], "colored_sent": 50, "termcolor": 50, "31msentenc": 50, "0m": 50, "ancillari": 51, "class_without_nois": 51, "any_other_class": 51, "choos": [51, 66, 81, 88, 91, 92, 99], "tradition": 51, "new_sum": 51, "fill": 51, "come": [51, 84, 85, 91, 100], "major": [51, 56, 79, 86, 97], "versu": [51, 92], "obviou": 51, "cgdeboer": 51, "iteround": 51, "reach": 51, "prob_s_eq_1": 51, "claesen": 51, "f1": [51, 64, 89, 92], "BE": 51, "left_nam": 51, "top_nam": 51, "titl": [51, 84, 85, 92, 95, 97], "short_titl": 51, "round_plac": 51, "pretti": [51, 92], "joint_matrix": 51, "num_possible_valu": 51, "holdout_idx": 51, "extract": [51, 65, 82, 83, 89, 94, 97, 100], "allow_shuffl": 51, "turn": [51, 78, 96], "shuffledataset": 51, "histori": 51, "pre_x": 51, "buffer_s": 51, "csr_matric": 51, "append": [51, 83, 86, 90, 91, 92, 94, 95, 96, 97, 101], "bottom": [51, 61, 64, 96], "to_data": 51, "from_data": 51, "taken": 51, "label_matrix": 51, "canon": 51, "displai": [51, 64, 73, 77, 82, 83, 89, 92, 101], "jupyt": [51, 83, 84, 85, 86, 90, 91, 92, 94, 95, 97, 99, 101], "notebook": [51, 56, 83, 85, 90, 91, 92, 94, 95, 96, 100, 101], "consol": 51, "html": [51, 61, 64, 65, 88, 91, 92], "allow_missing_class": 52, "allow_one_class": 52, "length_x": 52, "labellik": 52, "labels_list": [52, 58], "keraswrappermodel": [54, 55, 78], "keraswrappersequenti": [54, 55], "tf": [55, 83], "legaci": 55, "newer": 55, "interim": 55, "advis": [55, 95], "stabil": 55, "until": 55, "accommod": 55, "keraswrapp": 55, "huggingface_keras_imdb": 55, "unit": [55, 101], "model_kwarg": [55, 68], "compile_kwarg": 55, "sparsecategoricalcrossentropi": 55, "layer": [55, 82, 83, 89, 97], "dens": 55, "my_keras_model": 55, "from_logit": 55, "declar": 55, "apply_softmax": 55, "analysi": 56, "analyz": [56, 78, 92, 94, 95], "get_label_quality_multiannot": [56, 94], "vote": 56, "crowdsourc": [56, 78, 94], "dawid": [56, 94], "skene": [56, 94], "analog": [56, 90, 94], "chosen": [56, 66, 91, 94], "crowdlab": [56, 94], "unlabel": [56, 86, 88, 89, 94, 97, 100], "decid": [56, 82, 89, 90, 94, 99, 101], "get_active_learning_scor": [56, 94], "activelab": [56, 94], "priorit": [56, 63, 96, 100, 101], "showcas": 56, "main": 56, "best_qual": 56, "quality_method": 56, "calibrate_prob": 56, "return_detailed_qu": 56, "return_annotator_stat": 56, "return_weight": 56, "label_quality_score_kwarg": 56, "necessarili": [56, 64, 89, 92], "did": [56, 57, 81, 82, 83, 88, 92, 94, 99], "majority_vot": 56, "broken": [56, 64, 90, 99], "highest": [56, 64, 84, 86, 98], "0th": 56, "consensus_quality_scor": [56, 94], "annotator_agr": [56, 94], "reman": 56, "1st": 56, "2nd": [56, 70], "3rd": 56, "consensus_label_suffix": 56, "consensus_quality_score_suffix": 56, "suffix": 56, "emsembl": 56, "weigh": [56, 90], "agreement": [56, 94], "agre": 56, "prevent": [56, 91], "overconfid": [56, 98], "wrong": [56, 61, 63, 79, 82, 84, 85, 89, 91, 92, 96], "detailed_label_qu": [56, 94], "annotator_stat": [56, 94], "model_weight": 56, "annotator_weight": 56, "warn": [56, 84, 85, 91], "labels_info": 56, "num_annot": [56, 94], "deriv": [56, 94], "quality_annotator_1": 56, "quality_annotator_2": 56, "quality_annotator_m": 56, "annotator_qu": [56, 94], "num_examples_label": [56, 94], "agreement_with_consensu": [56, 94], "worst_class": [56, 94], "trustworthi": [56, 94, 99], "get_label_quality_multiannotator_ensembl": 56, "weigtht": 56, "budget": 56, "retrain": [56, 82, 99], "active_learning_scor": 56, "active_learning_scores_unlabel": 56, "get_active_learning_scores_ensembl": 56, "henc": [56, 83, 84, 94], "get_majority_vote_label": [56, 94], "event": 56, "lastli": [56, 88], "convert_long_to_wide_dataset": 56, "labels_multiannotator_long": 56, "wide": [56, 81, 82, 83], "suitabl": [56, 81, 88], "labels_multiannotator_wid": 56, "common_multilabel_issu": [57, 59], "mutual": [57, 95], "exclus": [57, 95], "rank_classes_by_multilabel_qu": [57, 59], "overall_multilabel_health_scor": [57, 59], "multilabel_health_summari": [57, 59], "classes_by_multilabel_qu": 57, "inner": [58, 72], "find_multilabel_issues_per_class": [58, 59], "per_class_label_issu": 58, "label_issues_list": 58, "pred_probs_list": [58, 66, 86, 92], "anim": [59, 97], "rat": 59, "predat": 59, "pet": 59, "reptil": 59, "manner": [60, 81, 82, 94, 99], "box": [61, 63, 64, 90, 96], "object_detect": [61, 63, 64, 96], "return_indices_ranked_by_scor": [61, 96], "overlapping_label_check": [61, 63], "suboptim": [61, 63], "locat": [61, 63, 96, 100, 101], "bbox": [61, 64, 96], "image_nam": [61, 64], "y1": [61, 64, 96], "y2": [61, 64, 96], "later": [61, 64, 65, 82, 101], "corner": [61, 64, 96], "xyxi": [61, 64, 96], "io": [61, 64, 83, 90], "keras_cv": [61, 64], "bounding_box": [61, 64, 96], "detectron": [61, 64, 96], "detectron2": [61, 64, 96], "readthedoc": [61, 64], "en": [61, 64], "latest": [61, 64], "visual": [61, 62, 64, 81, 84, 85, 86, 99, 101], "draw_box": [61, 64], "mmdetect": [61, 64, 96], "swap": [61, 63, 73, 77], "penal": [61, 63], "concern": [61, 63, 78, 85], "issues_from_scor": [62, 63, 71, 72, 73, 75, 76, 77, 96, 100, 101], "compute_overlooked_box_scor": [62, 63], "compute_badloc_box_scor": [62, 63], "compute_swap_box_scor": [62, 63], "pool_box_scores_per_imag": [62, 63], "object_counts_per_imag": [62, 64, 96], "bounding_box_size_distribut": [62, 64, 96], "class_label_distribut": [62, 64, 96], "get_sorted_bbox_count_idx": [62, 64], "plot_class_size_distribut": [62, 64], "plot_class_distribut": [62, 64], "get_average_per_class_confusion_matrix": [62, 64], "calculate_per_class_metr": [62, 64], "aggregation_weight": 63, "imperfect": [63, 91], "chose": [63, 94, 96], "imperfectli": [63, 96], "dirti": [63, 66, 69, 99], "subtyp": 63, "badloc": 63, "nonneg": 63, "high_probability_threshold": 63, "auxiliary_input": [63, 64], "vari": [63, 85], "iou": [63, 64], "heavili": 63, "auxiliarytypesdict": 63, "pred_label": [63, 82], "pred_label_prob": 63, "pred_bbox": 63, "lab_label": 63, "lab_bbox": 63, "similarity_matrix": 63, "min_possible_similar": 63, "scores_overlook": 63, "low_probability_threshold": 63, "scores_badloc": 63, "accident": [63, 82, 88, 89, 91], "scores_swap": 63, "box_scor": 63, "image_scor": [63, 72, 100], "discov": [64, 85, 101], "abnorm": [64, 86, 96], "auxiliari": [64, 97, 100], "_get_valid_inputs_for_compute_scor": 64, "object_count": 64, "down": 64, "bbox_siz": 64, "class_distribut": 64, "plot": [64, 84, 85, 92, 95, 97, 99, 100], "sorted_idx": [64, 97], "class_to_show": 64, "hidden": [64, 97], "max_class_to_show": 64, "prediction_threshold": 64, "overlai": [64, 96], "figsiz": [64, 84, 85, 86, 92, 95, 97], "save_path": [64, 96], "blue": [64, 90, 92, 96], "overlaid": 64, "side": [64, 90, 96], "figur": [64, 92, 95, 97, 99], "extens": [64, 92, 94], "png": [64, 96], "pdf": [64, 65], "svg": 64, "matplotlib": [64, 84, 85, 86, 92, 95, 96, 97, 99], "num_proc": [64, 86], "intersect": [64, 91], "tp": 64, "fp": 64, "ground": [64, 90, 92, 94, 99], "truth": [64, 92, 94, 99], "bias": 64, "avg_metr": 64, "distionari": 64, "95": [64, 74, 76, 88, 90, 92, 99], "per_class_metr": 64, "Of": 65, "li": 65, "smaller": [65, 95, 96], "find_top_issu": [65, 66, 97], "reli": [65, 82, 83, 84, 85, 89, 96, 97, 99], "dist_metr": 65, "dim": [65, 86, 100], "subtract": [65, 66], "renorm": [65, 66, 91], "least_confid": 65, "sum_": 65, "log": [65, 66, 79], "softmax": [65, 72, 76, 86], "literatur": 65, "gen": 65, "liu": 65, "lochman": 65, "zach": 65, "openaccess": 65, "thecvf": 65, "cvpr2023": 65, "liu_gen_pushing_the_limits_of_softmax": 65, "based_out": 65, "distribution_detection_cvpr_2023_pap": 65, "fit_scor": [65, 97], "ood_predictions_scor": 65, "pretrain": [65, 82, 83, 89, 97], "adjust_confident_threshold": 65, "probabilist": [65, 81, 83, 84, 85, 88, 89, 97, 98], "order_label_issu": [66, 79], "whichev": [66, 98], "argsort": [66, 82, 86, 89, 92, 96, 97, 99], "max_": 66, "get_label_quality_ensemble_scor": [66, 91, 92], "weight_ensemble_members_bi": 66, "custom_weight": 66, "log_loss_search_t_valu": 66, "0001": [66, 90], "scheme": 66, "log_loss_search": 66, "log_loss": [66, 89], "1e0": 66, "1e1": 66, "1e2": 66, "2e2": 66, "quality_scor": [66, 97], "forth": 66, "top_issue_indic": 66, "rank_bi": [66, 79], "weird": [66, 77], "minu": 66, "prob_label": 66, "max_prob_not_label": 66, "idea": [66, 96], "AND": [66, 89], "get_epistemic_uncertainti": [67, 68], "get_aleatoric_uncertainti": [67, 68], "corrupt": [68, 99], "linearregress": [68, 91, 99], "y_with_nois": 68, "n_boot": [68, 91], "include_aleatoric_uncertainti": [68, 91], "sole": [68, 81, 84, 94, 97], "bootstrap": [68, 91, 99], "resampl": [68, 83, 91], "epistem": [68, 91, 97, 99], "aleator": [68, 91, 99], "model_final_kwarg": 68, "coars": 68, "thorough": [68, 91], "fine": [68, 82, 83, 89, 97], "grain": 68, "grid": 68, "varianc": [68, 92], "epistemic_uncertainti": 68, "residu": [68, 69, 91], "deviat": [68, 96, 99], "aleatoric_uncertainti": 68, "outr": 69, "contin": 69, "raw": [69, 78, 79, 85, 86, 90, 91, 94, 96, 97, 99], "aka": [69, 83, 92, 96, 99, 101], "00323821": 69, "33692597": 69, "00191686": 69, "semant": [70, 72, 73, 93], "pixel": [70, 72, 73, 97, 100], "h": [70, 72, 73, 100], "height": [70, 72, 73, 100], "w": [70, 72, 73, 100], "width": [70, 72, 73, 100], "labels_one_hot": [70, 73, 100], "stream": [70, 97, 101], "downsampl": [70, 72, 100], "shrink": [70, 72], "divis": [70, 72, 84], "common_label_issu": [71, 73, 75, 77, 100, 101], "filter_by_class": [71, 73, 100], "segmant": [72, 73], "num_pixel_issu": [72, 100], "product": [72, 86, 91], "pixel_scor": [72, 100], "highlight": [73, 77, 84, 85, 88, 100], "enter": 73, "legend": [73, 84, 85, 95, 96, 99, 100], "colormap": 73, "background": 73, "person": [73, 91, 96, 100, 101], "ambigu": [73, 77, 82, 83, 89, 90, 92, 101], "systemat": [73, 77, 94], "misunderstood": [73, 77], "issues_df": [73, 86], "class_index": 73, "issues_subset": [73, 77], "filter_by_token": [75, 77, 101], "token_score_method": 76, "sentence_score_method": 76, "sentence_score_kwarg": 76, "compris": [76, 77], "token_scor": [76, 101], "converg": 76, "toward": 76, "_softmin_sentence_scor": 76, "sentence_scor": [76, 101], "token_info": 76, "70": [76, 88], "02": [76, 84, 85, 92, 96], "03": [76, 88, 90, 92, 96, 101], "04": [76, 88, 96, 97], "08": [76, 92, 96, 99, 101], "commonli": [77, 79, 84, 85, 95, 101], "But": [77, 89, 92, 99, 101], "restrict": [77, 91], "reliabl": [78, 81, 83, 91, 94, 100], "thousand": 78, "imagenet": [78, 90], "popular": [78, 94, 96], "centric": [78, 86, 88, 89, 93], "capabl": 78, "minut": [78, 81, 82, 83, 88, 89, 90, 94, 95, 96, 99, 100, 101], "conda": 78, "feature_embed": [78, 97], "Then": [78, 81, 82, 86, 91], "your_dataset": [78, 83, 84, 85, 86, 88, 89, 91], "column_name_of_label": [78, 83, 84, 85, 86, 88, 89], "plagu": [78, 85], "untrain": 78, "\u30c4": 78, "label_issues_info": [78, 85], "sklearn_compatible_model": 78, "framework": [78, 95, 96], "complianc": 78, "tag": [78, 95, 101], "sequenc": 78, "recognit": [78, 83, 91, 101], "train_data": [78, 81, 82, 97, 99], "gotten": 78, "test_data": [78, 81, 82, 92, 95, 97, 99], "deal": [78, 85], "tutori": [78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "feel": [78, 83, 85, 91], "ask": [78, 91], "slack": [78, 91], "project": [78, 99], "welcom": 78, "commun": [78, 91], "guidelin": [78, 96], "piec": 78, "smart": [78, 86, 88, 89, 91], "edit": [78, 91], "easier": [78, 92], "unreli": [78, 81, 83, 88, 89], "link": [78, 83, 90, 96], "older": 79, "outlin": 79, "substitut": 79, "v2": [79, 81, 88], "get_noise_indic": 79, "psx": 79, "sorted_index_method": 79, "order_label_error": 79, "label_errors_bool": 79, "latent_estim": 79, "num_label_error": 79, "learningwithnoisylabel": 79, "neatli": 79, "organ": [79, 81, 88, 90, 101], "reorgan": 79, "baseline_method": 79, "incorpor": [79, 92], "research": [79, 92], "polyplex": 79, "terminologi": 79, "label_error": 79, "quickstart": [81, 82, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101], "sql": [81, 88], "databas": [81, 88], "excel": [81, 88], "parquet": [81, 88], "student": [81, 88, 99, 101], "grade": [81, 88, 99], "900": [81, 88, 99], "exam": [81, 88, 99], "letter": [81, 88, 101], "hundr": [81, 88], "mistak": [81, 82, 86, 88, 89], "No": [81, 82, 89, 91], "extratreesclassifi": 81, "extratre": 81, "ranked_label_issu": [81, 82], "branch": [81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99], "preprocess": [81, 82, 85, 88, 97, 99], "standardscal": [81, 88, 97], "labelencod": [81, 82], "train_test_split": [81, 82, 84, 85, 97], "accuracy_scor": [81, 82, 83, 89, 92], "grades_data": [81, 88], "read_csv": [81, 82, 88, 89, 99], "demo": [81, 85, 88, 95], "head": [81, 82, 83, 85, 86, 88, 89, 90, 92, 94, 99], "stud_id": [81, 88], "exam_1": [81, 88, 99], "exam_2": [81, 88, 99], "exam_3": [81, 88, 99], "letter_grad": [81, 88], "f48f73": [81, 88], "53": [81, 84, 85, 88, 90, 95, 96], "00": [81, 84, 85, 86, 88, 90, 97], "77": [81, 84, 85, 88, 96], "0bd4e7": [81, 88], "81": [81, 88, 89, 96, 99, 101], "great": [81, 88, 90], "particip": [81, 88], "cb9d7a": [81, 88], "61": [81, 88, 92, 96, 99], "94": [81, 88, 90, 92, 96, 99], "78": [81, 88, 90, 92, 96, 99], "9acca4": [81, 88], "48": [81, 88, 90, 92, 96], "x_raw": [81, 88], "labels_raw": 81, "interg": [81, 82], "categorical_featur": [81, 99], "x_encod": [81, 88], "get_dummi": [81, 88, 99], "drop_first": [81, 88], "numeric_featur": [81, 88], "scaler": [81, 88, 97], "x_process": [81, 88], "fit_transform": [81, 88], "bring": [81, 82, 86, 88, 89, 94, 99], "byod": [81, 82, 86, 88, 89, 94, 99], "decis": [81, 84, 85], "tress": 81, "held": [81, 83, 88, 89, 90, 96, 97, 98], "straightforward": [81, 83, 88], "benefit": [81, 83, 98, 100], "num_crossval_fold": [81, 83, 88, 94], "tabl": [81, 88, 90, 94], "212": [81, 92], "review": [81, 82, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101], "iloc": [81, 82, 83, 88, 89, 99], "58": [81, 85, 88, 90, 92, 96], "92": [81, 84, 92, 96], "93": [81, 90, 96, 99], "827": 81, "99": [81, 90, 92], "86": [81, 85, 86, 88, 92, 96, 99], "74": [81, 96, 99], "637": [81, 88], "79": [81, 90, 96], "65": [81, 84, 86, 96], "cheat": 81, "0pt": 81, "120": [81, 84, 85], "97": [81, 90, 91, 92, 96, 99, 101], "233": 81, "68": [81, 90, 92, 96], "83": [81, 92, 96, 99, 101], "76": [81, 92, 95, 96, 99], "suspici": [81, 88], "carefulli": [81, 86, 88, 89], "examin": [81, 84, 85, 88, 96], "labels_train": 81, "labels_test": 81, "test_siz": [81, 82, 84, 85], "acc_og": [81, 82], "783068783068783": 81, "robustli": [81, 82, 99], "14": [81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "acc_cl": [81, 82], "8095238095238095": 81, "especi": [81, 82, 86, 91, 99], "blindli": [81, 82, 83, 91, 99], "trust": [81, 82, 83, 91, 92, 94, 98, 99], "effort": [81, 82, 99], "intent": [82, 89], "servic": [82, 89, 91], "onlin": [82, 89], "bank": [82, 89, 90], "banking77": [82, 89], "oo": [82, 89], "000": [82, 86, 89, 90, 101], "categori": [82, 86, 89], "shortlist": [82, 89, 99], "scope": [82, 89], "logist": [82, 84, 85, 89, 94, 97], "probabilit": [82, 83], "drop": [82, 91, 94, 99], "earlier": [82, 101], "sentence_transform": [82, 89], "sentencetransform": [82, 89], "payment": [82, 89], "cancel_transf": [82, 89], "transfer": [82, 89], "fund": [82, 89], "cancel": [82, 89], "transact": [82, 89], "my": [82, 89], "revert": [82, 89], "morn": [82, 89], "realis": [82, 89], "yesterdai": [82, 89], "rent": [82, 89], "realli": [82, 89, 94, 100], "tomorrow": [82, 89], "raw_text": [82, 89], "raw_label": 82, "raw_train_text": 82, "raw_test_text": 82, "raw_train_label": 82, "raw_test_label": 82, "39": [82, 83, 84, 86, 89, 90, 91, 96, 99, 100, 101], "lost_or_stolen_phon": [82, 89], "beneficiary_not_allow": [82, 89], "change_pin": [82, 89], "getting_spare_card": [82, 89], "apple_pay_or_google_pai": [82, 89], "supported_cards_and_curr": [82, 89], "visa_or_mastercard": [82, 89], "card_about_to_expir": [82, 89], "card_payment_fee_charg": [82, 89], "card": [82, 89, 90], "utter": [82, 89], "encond": 82, "test_label": [82, 92, 95, 97], "suit": [82, 89, 90, 91], "electra": [82, 89], "discrimin": [82, 89], "googl": [82, 89], "train_text": 82, "test_text": 82, "home": [82, 84, 85, 89, 90], "runner": [82, 84, 85, 89], "google_electra": [82, 89], "pool": [82, 89, 91, 97], "opt": [82, 83, 85, 89], "hostedtoolcach": [82, 83, 85, 89], "x64": [82, 83, 85, 89], "lib": [82, 83, 85, 89], "python3": [82, 83, 85, 89], "site": [82, 83, 85, 89], "_util": [82, 89], "831": [82, 89], "userwarn": [82, 83, 84, 85, 89], "typedstorag": [82, 89], "untypedstorag": [82, 89], "untyped_storag": [82, 89], "fget": [82, 89], "__get__": [82, 89], "owner": [82, 89], "leverag": [82, 83, 89, 91, 92, 94], "computation": [82, 83, 89], "intens": [82, 83, 89], "400": [82, 89], "858371": 82, "547274": 82, "826228": 82, "966008": 82, "792449": 82, "identified_issu": [82, 99], "lowest_quality_label": [82, 83, 89, 92, 99], "to_numpi": [82, 89, 91, 99], "44": [82, 90, 95, 96], "646": 82, "390": 82, "628": 82, "121": [82, 92], "702": 82, "863": [82, 83], "135": 82, "337": [82, 96], "735": 82, "print_as_df": 82, "inverse_transform": 82, "charg": [82, 89], "cash": [82, 89], "holidai": [82, 89], "sent": [82, 89, 101], "mine": [82, 89], "expir": [82, 89], "fight": 82, "hors": [82, 90, 97], "duck": [82, 90], "me": [82, 89], "whoever": [82, 89], "consum": [82, 99], "18": [82, 83, 89, 90, 91, 92, 96, 97, 99, 100], "baseline_model": [82, 99], "87": [82, 85, 86, 96, 99], "acceler": [82, 99], "19": [82, 83, 86, 89, 90, 91, 92, 96, 97, 99, 100, 101], "89": [82, 84, 88, 96, 99], "spoken": 83, "500": [83, 97, 101], "english": [83, 90], "pronunci": 83, "wav": 83, "huggingfac": [83, 84, 85, 86, 91], "voxceleb": 83, "speech": [83, 101], "your_pred_prob": [83, 84, 85, 88, 89], "tensorflow_io": 83, "huggingface_hub": 83, "reproduc": [83, 88, 92, 94], "command": 83, "wget": [83, 96, 100, 101], "navig": 83, "browser": 83, "jakobovski": 83, "archiv": [83, 101], "v1": 83, "tar": [83, 97], "gz": [83, 97], "mkdir": [83, 101], "spoken_digit": 83, "xf": 83, "6_nicolas_32": 83, "data_path": 83, "listdir": 83, "nondeterminist": 83, "file_nam": 83, "endswith": 83, "file_path": 83, "join": [83, 86, 91], "7_george_26": 83, "0_nicolas_24": 83, "0_nicolas_6": 83, "listen": 83, "display_exampl": 83, "expand": [83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "pulldown": [83, 84, 85, 86, 90, 92, 94, 95, 97, 99, 101], "colab": [83, 84, 85, 86, 90, 91, 92, 94, 95, 97, 99, 101], "tfio": 83, "pathlib": 83, "ipython": 83, "load_wav_16k_mono": 83, "filenam": 83, "khz": 83, "file_cont": 83, "read_fil": 83, "sample_r": 83, "decode_wav": 83, "desired_channel": 83, "squeez": 83, "rate_in": 83, "rate_out": 83, "16000": 83, "wav_file_nam": 83, "audio_r": 83, "wav_file_exampl": 83, "plai": [83, 90, 91], "button": 83, "wav_file_name_exampl": 83, "7_jackson_43": 83, "hear": 83, "extractor": 83, "encoderclassifi": 83, "spkrec": 83, "xvect": 83, "feature_extractor": 83, "from_hparam": 83, "run_opt": 83, "uncom": 83, "ffmpeg": 83, "backend": 83, "wav_audio_file_path": 83, "torchaudio": 83, "extract_audio_embed": 83, "emb": [83, 86], "signal": 83, "encode_batch": 83, "embeddings_list": [83, 86], "embeddings_arrai": 83, "650": 83, "stft": 83, "return_complex": 83, "view_as_r": 83, "recov": 83, "trigger": 83, "aten": 83, "src": 83, "nativ": 83, "spectralop": 83, "cpp": 83, "_vf": 83, "n_fft": 83, "hop_length": 83, "win_length": 83, "attr": 83, "512": [83, 86], "196311": 83, "319459": 83, "478975": 83, "2890875": 83, "8170238": 83, "89265": 83, "24": [83, 90, 92, 94, 96, 99, 101], "898056": 83, "256195": 83, "559641": 83, "559721": 83, "62067": 83, "285245": 83, "21": [83, 84, 90, 91, 92, 96, 99, 101], "709627": 83, "5033693": 83, "913803": 83, "819831": 83, "1831515": 83, "208763": 83, "084257": 83, "3210397": 83, "005453": 83, "216152": 83, "478235": 83, "6821785": 83, "053807": 83, "242471": 83, "091424": 83, "78334856": 83, "03954": 83, "23": [83, 86, 90, 92, 96, 99], "569176": 83, "761097": 83, "1258295": 83, "753237": 83, "3508866": 83, "598274": 83, "23712": 83, "2500": 83, "tol": 83, "decreas": [83, 91], "cv_accuraci": 83, "9708": 83, "9976": 83, "986": 83, "002161": 83, "176": [83, 90, 92, 95], "002483": 83, "2318": 83, "004411": 83, "1005": 83, "004857": 83, "1871": 83, "007494": 83, "investig": 83, "040587": 83, "999207": 83, "999377": 83, "975220": 83, "999367": 83, "identified_label_issu": [83, 89], "sort_valu": [83, 85, 86, 88, 89, 91, 92, 94, 95, 99], "516": 83, "1946": 83, "469": 83, "2132": 83, "worth": [83, 92], "6_yweweler_25": 83, "7_nicolas_43": 83, "6_theo_27": 83, "6_yweweler_36": 83, "6_yweweler_14": 83, "6_yweweler_35": 83, "6_nicolas_8": 83, "sound": 83, "quit": [83, 97], "22": [83, 84, 86, 90, 91, 92, 95, 96, 101], "underneath": 84, "hood": [84, 91], "alert": 84, "introduct": 84, "mayb": [84, 85, 89], "your_feature_matrix": [84, 85], "toi": [84, 85, 86, 90, 92, 94], "inf": [84, 85], "mid": [84, 85], "bins_map": [84, 85], "create_data": [84, 85], "y_bin": [84, 85], "y_i": [84, 85], "y_bin_idx": [84, 85], "y_train": [84, 85, 92, 99], "y_test": [84, 85, 92, 99], "y_train_idx": [84, 85], "y_test_idx": [84, 85], "slide": [84, 85, 90], "frame": [84, 85], "x_out": [84, 85], "tini": [84, 85], "concaten": [84, 85, 91, 98], "y_out": [84, 85], "y_out_bin": [84, 85], "y_out_bin_idx": [84, 85], "exact_duplicate_idx": [84, 85], "x_duplic": [84, 85], "y_duplic": [84, 85], "y_duplicate_idx": [84, 85], "noisy_labels_idx": [84, 85, 95], "scatter": [84, 85, 92, 95, 99], "black": [84, 85, 90, 99], "cyan": [84, 85], "pyplot": [84, 85, 86, 92, 95, 97, 99], "plt": [84, 85, 86, 92, 95, 97, 99], "plot_data": [84, 85, 92, 95, 99], "fig": [84, 85, 86, 90, 97, 99], "ax": [84, 85, 86, 97, 99], "subplot": [84, 85, 86, 97], "set_titl": [84, 85, 86, 97], "set_xlabel": [84, 85], "x_1": [84, 85], "fontsiz": [84, 85, 86, 92, 95], "set_ylabel": [84, 85], "x_2": [84, 85], "set_xlim": [84, 85], "set_ylim": [84, 85], "linestyl": [84, 85], "circl": [84, 85, 92, 95], "misclassifi": [84, 85], "zip": [84, 85, 86, 96, 101], "label_err": [84, 85], "180": [84, 85, 96], "marker": [84, 85], "facecolor": [84, 85], "edgecolor": [84, 85], "linewidth": [84, 85, 97], "dup": [84, 85], "first_legend": [84, 85], "align": [84, 85], "title_fontproperti": [84, 85], "semibold": [84, 85], "second_legend": [84, 85], "45": [84, 85, 90, 92, 96, 101], "gca": [84, 85], "add_artist": [84, 85], "tight_layout": [84, 85], "ideal": [84, 85], "remaind": 84, "modal": [84, 85, 91, 94], "132": [84, 85, 92, 96], "9318": 84, "006940": 84, "007830": 84, "40": [84, 85, 89, 90], "014828": 84, "107": [84, 85, 92, 95], "021241": 84, "026407": 84, "notic": [84, 92, 94, 96], "3558": [84, 85], "126": [84, 85, 92, 96], "006636": [84, 85], "130": [84, 85], "012571": [84, 85], "129": [84, 85], "127": [84, 85], "014909": [84, 85], "128": [84, 85, 86], "017443": [84, 85], "6160": [84, 85], "is_near_duplicate_issu": [84, 85, 86, 88, 89, 91, 92], "131": [84, 85, 100], "000000e": [84, 85], "000002": [84, 85], "463180e": [84, 85], "07": [84, 85, 86, 88, 92, 96, 99], "51": [84, 85, 88, 90, 92, 96], "161148": [84, 85], "859087e": [84, 85], "30": [84, 85, 86, 90, 91, 95, 100, 101], "3453": 84, "029542": 84, "031182": 84, "057961": 84, "058244": 84, "348": 84, "378": 84, "357": 84, "34": [84, 90, 92, 94, 96, 101], "54": [84, 90, 92, 96], "039122": 84, "044598": 84, "105": [84, 96], "105196": 84, "133654": 84, "43": [84, 90, 92, 96], "168033": 84, "125": 84, "101107": 84, "37": [84, 90], "183382": 84, "109": [84, 90, 96], "209259": 84, "211042": 84, "221316": 84, "average_ood_scor": 84, "34530442089193386": 84, "52": [84, 90, 96, 101], "169820": 84, "087324e": 84, "259024": 84, "583757e": 84, "91": [84, 96], "346458": 84, "341292e": 84, "specfi": 84, "new_lab": 84, "scoring_funct": 84, "div": 84, "rem": 84, "inv_scal": 84, "49": [84, 90, 92, 96], "superstitionissuemanag": 84, "unlucki": 84, "superstit": 84, "to_seri": 84, "issues_mask": 84, "summary_scor": 84, "9242": 84, "is_superstition_issu": 84, "superstition_scor": 84, "26": [84, 86, 90, 92, 94, 96, 101], "047581": 84, "090635": 84, "129591": 84, "164840": 84, "lurk": [85, 86, 92], "_split": 85, "737": 85, "thoroughli": 85, "904": 85, "8561": 85, "001908": 85, "003564": 85, "007331": 85, "008963": 85, "009664": 85, "0227": 85, "is_class_imbalance_issu": 85, "022727": 85, "conceptu": 85, "856061": 85, "355772": 85, "616034": 85, "821750": 85, "901562": 85, "betweeen": 85, "is_null_issu": 85, "is_non_iid_issu": [85, 88, 89, 92], "is_underperforming_group_issu": 85, "859131": 85, "417707": 85, "664083": 85, "970324": 85, "816953": 85, "375317": 85, "641516": 85, "890575": 85, "531021": 85, "460593": 85, "601188": 85, "826147": 85, "752808": 85, "321635": 85, "562539": 85, "948362": 85, "090243": 85, "472909": 85, "746763": 85, "878267": 85, "examples_w_issu": [85, 91], "013445": 85, "025184": 85, "026376": 85, "inde": [85, 89], "miscellan": [85, 101], "428571": 85, "111111": 85, "571429": 85, "407407": 85, "592593": 85, "337838": 85, "092593": 85, "662162": 85, "333333": [85, 90], "952381": 85, "666667": 85, "portion": 85, "huge": [85, 92], "worri": [85, 89], "critic": 85, "highli": [85, 86], "60": [86, 92, 99], "torchvis": [86, 97], "tensordataset": 86, "stratifiedkfold": [86, 95], "tqdm": 86, "autonotebook": 86, "fashion_mnist": 86, "9m": 86, "lt": [86, 88, 89, 90, 94, 97], "9mb": 86, "18m": 86, "38": [86, 89, 90, 96], "6mb": 86, "num_row": 86, "60000": 86, "transformed_dataset": 86, "with_format": 86, "255": [86, 90], "unsqueez": 86, "cpu_count": 86, "torch_dataset": 86, "quick": [86, 95], "super": [86, 88, 89], "relu": 86, "batchnorm2d": 86, "maxpool2d": 86, "lazylinear": 86, "flatten": 86, "get_test_accuraci": 86, "testload": [86, 97], "energi": 86, "trainload": [86, 97], "n_epoch": 86, "patienc": 86, "criterion": 86, "crossentropyloss": 86, "adamw": 86, "best_test_accuraci": 86, "start_epoch": 86, "running_loss": 86, "best_epoch": 86, "end_epoch": 86, "3f": [86, 99], "acc": [86, 92], "time_taken": 86, "compute_embed": 86, "compute_pred_prob": 86, "train_batch_s": 86, "num_work": 86, "worker": [86, 101], "train_id_list": 86, "test_id_list": 86, "train_id": 86, "test_id": 86, "embeddings_model": 86, "ntrain": 86, "trainset": 86, "testset": 86, "pin_memori": 86, "fold_embed": 86, "fold_pred_prob": 86, "finish": 86, "482": 86, "720": 86, "796": 86, "329": [86, 96], "88": [86, 90, 91, 92, 95, 96, 99], "195": 86, "778": 86, "493": 86, "060": 86, "261": [86, 96], "330": [86, 96], "505": 86, "854": 86, "476": 86, "340": 86, "728": 86, "328": [86, 96], "310": 86, "587": 86, "reorder": 86, "hstack": [86, 91, 92, 94], "vision": 86, "grayscal": 86, "exce": 86, "max_preval": 86, "7714": 86, "3772": 86, "3585": 86, "166": 86, "3651": 86, "27080": 86, "873833e": 86, "40378": 86, "915575e": 86, "25316": 86, "390277e": 86, "06": [86, 92, 96, 101], "2090": 86, "751164e": 86, "14999": 86, "881301e": 86, "9569": 86, "11262": 86, "000003": 86, "coat": [86, 90], "shirt": [86, 90], "19228": 86, "000010": 86, "dress": 86, "32657": 86, "000013": 86, "bag": [86, 90, 97, 98], "21282": 86, "000016": 86, "53564": 86, "000018": 86, "pullov": 86, "6321": 86, "30968": 86, "001267": 86, "30659": 86, "000022": [86, 101], "47824": 86, "001454": 86, "3370": 86, "000026": 86, "54565": 86, "001854": 86, "9762": 86, "258": 86, "47139": 86, "000033": 86, "166980": 86, "986195": 86, "997205": 86, "sandal": [86, 90], "948781": 86, "999358": 86, "54078": 86, "17371": 86, "000025": 86, "plot_label_issue_exampl": 86, "ncol": [86, 97], "nrow": [86, 97], "ceil": 86, "axes_list": 86, "label_issue_indic": 86, "gl": 86, "sl": 86, "fontdict": 86, "imshow": [86, 97], "cmap": [86, 99], "grai": 86, "subplots_adjust": 86, "hspace": 86, "outsiz": 86, "outlier_issu": [86, 89], "outlier_issues_df": 86, "depict": [86, 95, 96, 97, 98, 100], "plot_outlier_issues_exampl": 86, "n_comparison_imag": 86, "sample_from_class": 86, "number_of_sampl": 86, "non_outlier_indic": 86, "isnul": 86, "non_outlier_indices_excluding_curr": 86, "sampled_indic": 86, "label_scores_of_sampl": 86, "top_score_indic": 86, "top_label_indic": 86, "sampled_imag": 86, "get_image_given_label_and_sampl": 86, "image_from_dataset": 86, "corresponding_label": 86, "comparison_imag": 86, "images_to_plot": 86, "idlist": 86, "iterrow": 86, "near_duplicate_issu": [86, 91], "closest": 86, "counterpart": 86, "near_duplicate_issues_df": 86, "plot_near_duplicate_issue_exampl": 86, "seen_id_pair": 86, "get_image_and_given_label_and_predicted_label": 86, "duplicate_imag": 86, "nd_set": 86, "challeng": 86, "dark_issu": 86, "reveal": [86, 96, 100], "dark_scor": 86, "dark_issues_df": 86, "is_dark_issu": 86, "34848": 86, "203922": 86, "50270": 86, "204588": 86, "3936": 86, "213098": 86, "733": 86, "217686": 86, "8094": 86, "230118": 86, "plot_image_issue_exampl": 86, "28": [86, 89, 90, 92, 94, 101], "difficult": 86, "disproportion": 86, "lowinfo_issu": 86, "low_information_scor": 86, "lowinfo_issues_df": 86, "is_low_information_issu": 86, "53050": 86, "067975": 86, "40875": 86, "089929": 86, "9594": 86, "092601": 86, "34825": 86, "107744": 86, "37530": 86, "108516": 86, "lot": 86, "histgradientboostingclassifi": 88, "cat_featur": 88, "boost": [88, 91, 94, 99], "xgboost": [88, 91, 99], "think": [88, 89, 91, 95, 100, 101], "nonzero": 88, "358": 88, "294": [88, 96], "46": [88, 90, 92, 96], "941": 88, "7109": 88, "000005": [88, 89], "886": 88, "000059": 88, "709": 88, "000104": 88, "723": 88, "000169": 88, "689": 88, "000181": 88, "3590": 88, "051882e": 88, "683133e": 88, "536582e": 88, "406589e": 88, "324246e": 88, "6165": 88, "582": 88, "185": [88, 90, 96], "187": [88, 90], "27": [88, 90, 92, 96, 101], "898": 88, "0014": [88, 90], "595": 88, "702427": 88, "147": [88, 92, 96], "711186": 88, "157": [88, 92], "721394": 88, "771": 88, "731979": 88, "740335": 88, "0014153602099278074": 88, "issue_result": 88, "000842": 88, "555944": 88, "004374": 88, "sorted_issu": 88, "73": [88, 90, 95, 96, 99, 101], "deserv": 88, "outlier_result": 88, "sorted_outli": 88, "56": [88, 90, 99], "96": [88, 90, 92, 95, 96, 99], "style": [88, 100], "font": 88, "18px": 88, "ff00ff": 88, "bac": 88, "unintend": [88, 89], "duplicate_result": 88, "690": 88, "246": [88, 96], "perhap": [88, 92, 94], "twice": 88, "67": [88, 90, 96, 99], "wari": [88, 89, 91], "dive": 89, "your_featur": 89, "text_embed": 89, "data_dict": [89, 92, 94], "85": [89, 96], "9710": 89, "981": 89, "974": 89, "000146": 89, "982": [89, 90], "000224": 89, "971": 89, "000507": 89, "980": [89, 90], "000960": 89, "3584": 89, "994": 89, "009642": 89, "999": 89, "013067": 89, "013841": 89, "433": 89, "014722": 89, "989": 89, "018224": 89, "6070": 89, "160": [89, 99], "095724": 89, "148": 89, "006237": 89, "546": 89, "099341": 89, "514": 89, "006485": 89, "481": 89, "123418": 89, "008165": 89, "0000": [89, 90, 92], "313": [89, 96], "564102": 89, "572258": 89, "574915": 89, "31": [89, 90, 92, 94, 96], "575507": 89, "575874": 89, "792090": 89, "257611": 89, "698710": 89, "182121": 89, "771619": 89, "data_with_suggested_label": 89, "suggested_label": 89, "withdraw": 89, "monei": 89, "lowest_quality_outli": 89, "OR": 89, "636c65616e6c616220697320617765736f6d6521": 89, "phone": [89, 90], "gone": 89, "gt": [89, 94, 101], "samp": 89, "br": 89, "press": [89, 101], "nonsens": 89, "sens": 89, "detriment": 89, "duplicate_issu": 89, "fee": 89, "pai": 89, "go": [89, 90, 92], "strongli": 89, "p_valu": 89, "benign": 89, "curat": [89, 93], "mnist_test_set": 90, "imagenet_val_set": 90, "tench": 90, "goldfish": 90, "white": [90, 101], "shark": 90, "tiger": 90, "hammerhead": 90, "electr": 90, "rai": 90, "stingrai": 90, "cock": 90, "hen": 90, "ostrich": 90, "brambl": 90, "goldfinch": 90, "hous": 90, "finch": 90, "junco": 90, "indigo": 90, "bunt": 90, "american": [90, 101], "robin": 90, "bulbul": 90, "jai": 90, "magpi": 90, "chickade": 90, "dipper": 90, "kite": 90, "bald": 90, "eagl": 90, "vultur": 90, "grei": 90, "owl": 90, "salamand": 90, "smooth": 90, "newt": 90, "spot": [90, 91, 96], "axolotl": 90, "bullfrog": 90, "tree": 90, "frog": [90, 97], "tail": 90, "loggerhead": 90, "sea": 90, "turtl": 90, "leatherback": 90, "mud": 90, "terrapin": 90, "band": 90, "gecko": 90, "green": [90, 101], "iguana": 90, "carolina": 90, "anol": 90, "desert": 90, "grassland": 90, "whiptail": 90, "lizard": 90, "agama": 90, "frill": 90, "neck": 90, "allig": 90, "gila": 90, "monster": 90, "european": 90, "chameleon": 90, "komodo": 90, "dragon": 90, "nile": 90, "crocodil": 90, "triceratop": 90, "worm": 90, "snake": 90, "ring": 90, "eastern": 90, "hog": 90, "nose": 90, "kingsnak": 90, "garter": 90, "water": 90, "vine": 90, "night": 90, "boa": 90, "constrictor": 90, "african": 90, "rock": 90, "indian": 90, "cobra": 90, "mamba": 90, "saharan": 90, "horn": 90, "viper": 90, "diamondback": 90, "rattlesnak": 90, "sidewind": 90, "trilobit": 90, "harvestman": 90, "scorpion": 90, "yellow": 90, "garden": 90, "spider": 90, "barn": 90, "southern": 90, "widow": 90, "tarantula": 90, "wolf": 90, "tick": 90, "centiped": 90, "grous": 90, "ptarmigan": 90, "ruf": 90, "prairi": 90, "peacock": 90, "quail": 90, "partridg": 90, "parrot": 90, "macaw": 90, "sulphur": 90, "crest": 90, "cockatoo": 90, "lorikeet": 90, "coucal": 90, "bee": 90, "eater": 90, "hornbil": 90, "hummingbird": 90, "jacamar": 90, "toucan": 90, "breast": 90, "mergans": 90, "goos": 90, "swan": 90, "tusker": 90, "echidna": 90, "platypu": 90, "wallabi": 90, "koala": 90, "wombat": 90, "jellyfish": 90, "anemon": 90, "brain": 90, "coral": 90, "flatworm": 90, "nematod": 90, "conch": 90, "snail": 90, "slug": 90, "chiton": 90, "chamber": 90, "nautilu": 90, "dung": 90, "crab": 90, "fiddler": 90, "king": 90, "lobster": 90, "spini": 90, "crayfish": 90, "hermit": 90, "isopod": 90, "stork": 90, "spoonbil": 90, "flamingo": 90, "heron": 90, "egret": 90, "bittern": 90, "crane": 90, "bird": [90, 97], "limpkin": 90, "gallinul": 90, "coot": 90, "bustard": 90, "ruddi": 90, "turnston": 90, "dunlin": 90, "redshank": 90, "dowitch": 90, "oystercatch": 90, "pelican": 90, "penguin": 90, "albatross": 90, "whale": 90, "killer": 90, "dugong": 90, "lion": 90, "chihuahua": 90, "japanes": 90, "chin": 90, "maltes": 90, "pekinges": 90, "shih": 90, "tzu": 90, "charl": 90, "spaniel": 90, "papillon": 90, "terrier": 90, "rhodesian": 90, "ridgeback": 90, "afghan": [90, 101], "hound": 90, "basset": 90, "beagl": 90, "bloodhound": 90, "bluetick": 90, "coonhound": 90, "tan": 90, "walker": 90, "foxhound": 90, "redbon": 90, "borzoi": 90, "irish": 90, "wolfhound": 90, "italian": 90, "greyhound": 90, "whippet": 90, "ibizan": 90, "norwegian": 90, "elkhound": 90, "otterhound": 90, "saluki": 90, "scottish": 90, "deerhound": 90, "weimaran": 90, "staffordshir": 90, "bull": 90, "bedlington": 90, "border": 90, "kerri": 90, "norfolk": 90, "norwich": 90, "yorkshir": 90, "wire": 90, "fox": 90, "lakeland": 90, "sealyham": 90, "airedal": 90, "cairn": 90, "australian": 90, "dandi": 90, "dinmont": 90, "boston": 90, "miniatur": 90, "schnauzer": 90, "giant": 90, "tibetan": 90, "silki": 90, "wheaten": 90, "west": 90, "highland": 90, "lhasa": 90, "apso": 90, "flat": 90, "retriev": 90, "curli": 90, "golden": 90, "labrador": 90, "chesapeak": 90, "bai": 90, "german": [90, 101], "shorthair": 90, "pointer": 90, "vizsla": 90, "setter": 90, "gordon": 90, "brittani": 90, "clumber": 90, "springer": 90, "welsh": 90, "cocker": 90, "sussex": 90, "kuvasz": 90, "schipperk": 90, "groenendael": 90, "malinoi": 90, "briard": 90, "kelpi": 90, "komondor": 90, "sheepdog": 90, "shetland": 90, "colli": 90, "bouvier": 90, "de": 90, "flandr": 90, "rottweil": 90, "shepherd": 90, "dobermann": 90, "pinscher": 90, "swiss": [90, 101], "mountain": 90, "bernes": 90, "appenzel": 90, "sennenhund": 90, "entlebuch": 90, "boxer": 90, "bullmastiff": 90, "mastiff": 90, "french": 90, "bulldog": 90, "dane": 90, "st": 90, "bernard": 90, "huski": 90, "alaskan": 90, "malamut": 90, "siberian": 90, "dalmatian": 90, "affenpinsch": 90, "basenji": 90, "pug": 90, "leonberg": 90, "newfoundland": 90, "pyrenean": 90, "samoi": 90, "pomeranian": 90, "chow": 90, "keeshond": 90, "griffon": 90, "bruxelloi": 90, "pembrok": 90, "corgi": 90, "cardigan": 90, "poodl": 90, "mexican": 90, "hairless": 90, "tundra": 90, "coyot": 90, "dingo": 90, "dhole": 90, "wild": 90, "hyena": 90, "kit": 90, "arctic": 90, "tabbi": 90, "persian": 90, "siames": 90, "egyptian": 90, "mau": 90, "cougar": 90, "lynx": 90, "leopard": 90, "snow": 90, "jaguar": 90, "cheetah": 90, "brown": [90, 100], "bear": 90, "polar": 90, "sloth": 90, "mongoos": 90, "meerkat": 90, "beetl": 90, "ladybug": 90, "longhorn": 90, "leaf": 90, "rhinocero": 90, "weevil": 90, "fly": 90, "ant": 90, "grasshopp": 90, "cricket": 90, "stick": 90, "insect": 90, "cockroach": 90, "manti": 90, "cicada": 90, "leafhopp": 90, "lacew": 90, "dragonfli": 90, "damselfli": 90, "admir": 90, "ringlet": 90, "monarch": 90, "butterfli": 90, "gossam": 90, "wing": 90, "starfish": 90, "urchin": 90, "cucumb": 90, "cottontail": 90, "rabbit": 90, "hare": 90, "angora": 90, "hamster": 90, "porcupin": 90, "squirrel": 90, "marmot": 90, "beaver": 90, "guinea": 90, "pig": 90, "sorrel": 90, "zebra": 90, "boar": 90, "warthog": 90, "hippopotamu": 90, "ox": 90, "buffalo": 90, "bison": 90, "bighorn": 90, "sheep": 90, "alpin": 90, "ibex": 90, "hartebeest": 90, "impala": 90, "gazel": 90, "dromedari": 90, "llama": 90, "weasel": 90, "mink": 90, "polecat": 90, "foot": 90, "ferret": 90, "otter": 90, "skunk": 90, "badger": 90, "armadillo": 90, "toed": 90, "orangutan": 90, "gorilla": 90, "chimpanze": 90, "gibbon": 90, "siamang": 90, "guenon": 90, "pata": 90, "monkei": 90, "baboon": 90, "macaqu": 90, "langur": 90, "colobu": 90, "probosci": 90, "marmoset": 90, "capuchin": 90, "howler": 90, "titi": 90, "geoffroi": 90, "lemur": 90, "indri": 90, "asian": 90, "eleph": 90, "bush": 90, "snoek": 90, "eel": 90, "coho": 90, "salmon": 90, "beauti": 90, "clownfish": 90, "sturgeon": 90, "garfish": 90, "lionfish": 90, "pufferfish": 90, "abacu": 90, "abaya": 90, "academ": 90, "gown": 90, "accordion": 90, "acoust": 90, "guitar": 90, "aircraft": 90, "carrier": 90, "airlin": 90, "airship": 90, "altar": 90, "ambul": 90, "amphibi": 90, "clock": [90, 101], "apiari": 90, "apron": 90, "wast": 90, "assault": 90, "rifl": 90, "backpack": 90, "bakeri": 90, "balanc": 90, "beam": 90, "balloon": 90, "ballpoint": 90, "pen": 90, "aid": 90, "banjo": 90, "balust": 90, "barbel": 90, "barber": 90, "chair": [90, 96], "barbershop": 90, "baromet": 90, "barrel": 90, "wheelbarrow": 90, "basebal": 90, "basketbal": 90, "bassinet": 90, "bassoon": 90, "swim": 90, "cap": 90, "bath": 90, "towel": 90, "bathtub": 90, "station": 90, "wagon": 90, "lighthous": 90, "beaker": 90, "militari": 90, "beer": 90, "bottl": 90, "glass": 90, "bell": 90, "cot": 90, "bib": 90, "bicycl": [90, 100], "bikini": 90, "binder": 90, "binocular": 90, "birdhous": 90, "boathous": 90, "bobsleigh": 90, "bolo": 90, "tie": 90, "poke": 90, "bonnet": 90, "bookcas": 90, "bookstor": 90, "bow": 90, "brass": 90, "bra": 90, "breakwat": 90, "breastplat": 90, "broom": 90, "bucket": 90, "buckl": 90, "bulletproof": 90, "vest": 90, "butcher": 90, "shop": 90, "taxicab": 90, "cauldron": 90, "candl": 90, "cannon": 90, "cano": 90, "mirror": [90, 96], "carousel": 90, "tool": [90, 92, 94], "carton": 90, "wheel": 90, "teller": 90, "cassett": 90, "player": 90, "castl": 90, "catamaran": 90, "cd": 90, "cello": 90, "mobil": [90, 101], "chain": 90, "fenc": [90, 100], "mail": 90, "chainsaw": 90, "chest": 90, "chiffoni": 90, "chime": 90, "china": 90, "cabinet": 90, "christma": 90, "stock": 90, "church": 90, "movi": 90, "theater": 90, "cleaver": 90, "cliff": 90, "dwell": 90, "cloak": 90, "clog": 90, "cocktail": 90, "shaker": 90, "coffe": 90, "mug": 90, "coffeemak": 90, "coil": 90, "lock": 90, "keyboard": 90, "confectioneri": 90, "ship": [90, 97], "corkscrew": 90, "cornet": 90, "cowboi": 90, "boot": 90, "hat": 90, "cradl": 90, "crash": 90, "helmet": 90, "crate": 90, "infant": 90, "bed": 90, "crock": 90, "pot": 90, "croquet": 90, "crutch": 90, "cuirass": 90, "dam": 90, "desk": 90, "desktop": 90, "rotari": 90, "dial": 90, "telephon": 90, "diaper": 90, "watch": 90, "dine": 90, "dishcloth": 90, "dishwash": 90, "disc": 90, "brake": 90, "dock": 90, "sled": 90, "dome": 90, "doormat": 90, "drill": 90, "rig": 90, "drum": 90, "drumstick": 90, "dumbbel": 90, "dutch": 90, "oven": 90, "fan": 90, "locomot": 90, "entertain": 90, "center": 90, "envelop": 90, "espresso": 90, "powder": 90, "feather": 90, "fireboat": 90, "engin": [90, 100], "screen": 90, "sheet": 90, "flagpol": 90, "flute": 90, "footbal": 90, "forklift": 90, "fountain": 90, "poster": 90, "freight": 90, "fry": 90, "pan": 90, "fur": 90, "garbag": 90, "ga": 90, "pump": 90, "goblet": 90, "kart": 90, "golf": 90, "cart": 90, "gondola": 90, "gong": 90, "grand": 90, "piano": 90, "greenhous": 90, "grill": 90, "groceri": 90, "guillotin": 90, "barrett": 90, "hair": 90, "sprai": 90, "hammer": 90, "dryer": 90, "hand": [90, 92], "handkerchief": 90, "drive": 90, "harmonica": 90, "harp": 90, "harvest": 90, "hatchet": 90, "holster": 90, "honeycomb": 90, "hoop": 90, "skirt": 90, "horizont": 90, "bar": 90, "drawn": 90, "hourglass": 90, "ipod": 90, "cloth": 90, "iron": 90, "jack": 90, "lantern": 90, "jean": 90, "jeep": 90, "jigsaw": 90, "puzzl": 90, "pull": 90, "rickshaw": 90, "joystick": 90, "kimono": 90, "knee": 90, "pad": 90, "knot": 90, "ladl": 90, "lampshad": 90, "laptop": 90, "lawn": 90, "mower": 90, "knife": 90, "lifeboat": 90, "lighter": 90, "limousin": 90, "ocean": 90, "liner": 90, "lipstick": 90, "slip": 90, "shoe": 90, "lotion": 90, "speaker": 90, "loup": 90, "sawmil": 90, "magnet": 90, "compass": 90, "mailbox": 90, "tight": 90, "tank": 90, "manhol": 90, "maraca": 90, "marimba": 90, "maypol": 90, "maze": 90, "cup": [90, 96], "medicin": 90, "megalith": 90, "microphon": 90, "microwav": 90, "milk": 90, "minibu": 90, "miniskirt": 90, "minivan": 90, "missil": 90, "mitten": [90, 91], "mix": 90, "bowl": 90, "modem": 90, "monasteri": 90, "monitor": 90, "mope": 90, "mortar": 90, "mosqu": 90, "mosquito": 90, "scooter": 90, "bike": 90, "tent": 90, "mous": [90, 91], "mousetrap": 90, "van": 90, "muzzl": 90, "nail": 90, "brace": 90, "necklac": 90, "nippl": 90, "obelisk": 90, "obo": 90, "ocarina": 90, "odomet": 90, "oil": 90, "oscilloscop": 90, "overskirt": 90, "bullock": 90, "oxygen": 90, "packet": 90, "paddl": 90, "padlock": 90, "paintbrush": 90, "pajama": 90, "palac": [90, 101], "parachut": 90, "park": 90, "bench": 90, "meter": 90, "passeng": 90, "patio": 90, "payphon": 90, "pedest": 90, "pencil": 90, "perfum": 90, "petri": 90, "dish": 90, "photocopi": 90, "plectrum": 90, "pickelhaub": 90, "picket": 90, "pickup": 90, "pier": 90, "piggi": 90, "pill": 90, "pillow": 90, "ping": 90, "pong": 90, "pinwheel": 90, "pirat": 90, "pitcher": 90, "plane": 90, "planetarium": 90, "plastic": 90, "plate": 90, "rack": 90, "plow": 90, "plunger": 90, "polaroid": 90, "camera": 90, "pole": [90, 100], "polic": 90, "poncho": 90, "billiard": 90, "soda": 90, "potter": 90, "prayer": 90, "rug": 90, "printer": 90, "prison": 90, "projectil": 90, "projector": 90, "hockei": 90, "puck": 90, "punch": 90, "purs": 90, "quill": 90, "quilt": 90, "race": 90, "racket": 90, "radiat": 90, "radio": 90, "telescop": 90, "rain": 90, "recreat": 90, "reel": 90, "reflex": 90, "refriger": 90, "remot": 90, "restaur": 90, "revolv": 90, "rotisseri": 90, "eras": 90, "rugbi": 90, "ruler": 90, "safe": 90, "safeti": 90, "salt": 90, "sarong": 90, "saxophon": 90, "scabbard": 90, "school": 90, "bu": [90, 100], "schooner": 90, "scoreboard": 90, "crt": 90, "screw": 90, "screwdriv": 90, "seat": 90, "belt": 90, "sew": 90, "shield": 90, "shoji": 90, "basket": 90, "shovel": 90, "shower": 90, "curtain": 90, "ski": 90, "sleep": 90, "door": 90, "slot": 90, "snorkel": 90, "snowmobil": 90, "snowplow": 90, "soap": 90, "dispens": 90, "soccer": [90, 101], "sock": [90, 91], "solar": 90, "thermal": 90, "collector": 90, "sombrero": 90, "soup": 90, "heater": 90, "shuttl": 90, "spatula": 90, "motorboat": 90, "web": 90, "spindl": 90, "sport": [90, 101], "spotlight": 90, "stage": 90, "steam": 90, "arch": 90, "bridg": 90, "steel": 90, "stethoscop": 90, "scarf": 90, "stone": 90, "wall": [90, 100], "stopwatch": 90, "stove": 90, "strainer": 90, "tram": 90, "stretcher": 90, "couch": 90, "stupa": 90, "submarin": 90, "sundial": 90, "sunglass": 90, "sunscreen": 90, "suspens": 90, "mop": 90, "sweatshirt": 90, "swimsuit": 90, "swing": 90, "switch": 90, "syring": 90, "lamp": 90, "tape": 90, "teapot": 90, "teddi": 90, "televis": [90, 101], "tenni": 90, "thatch": 90, "roof": 90, "front": 90, "thimbl": 90, "thresh": 90, "throne": 90, "tile": 90, "toaster": 90, "tobacco": 90, "toilet": 90, "totem": 90, "tow": 90, "tractor": 90, "semi": 90, "trailer": 90, "trai": 90, "trench": 90, "tricycl": 90, "trimaran": 90, "tripod": 90, "triumphal": 90, "trolleybu": 90, "trombon": 90, "tub": 90, "turnstil": 90, "typewrit": 90, "umbrella": 90, "unicycl": 90, "upright": 90, "vacuum": 90, "cleaner": 90, "vase": 90, "vault": 90, "velvet": 90, "vend": 90, "vestment": 90, "viaduct": 90, "violin": 90, "volleybal": 90, "waffl": 90, "wallet": 90, "wardrob": 90, "sink": 90, "wash": 90, "jug": 90, "tower": 90, "whiskei": 90, "whistl": 90, "wig": 90, "shade": [90, 100], "windsor": 90, "wine": 90, "wok": 90, "wooden": 90, "spoon": 90, "wool": 90, "rail": 90, "shipwreck": 90, "yawl": 90, "yurt": 90, "websit": 90, "comic": 90, "book": 90, "crossword": 90, "traffic": [90, 96, 100], "sign": [90, 100, 101], "dust": 90, "jacket": [90, 96], "menu": 90, "guacamol": 90, "consomm": 90, "trifl": 90, "ic": 90, "cream": 90, "pop": 90, "baguett": 90, "bagel": 90, "pretzel": 90, "cheeseburg": 90, "mash": 90, "potato": 90, "cabbag": 90, "broccoli": 90, "cauliflow": 90, "zucchini": 90, "spaghetti": 90, "squash": 90, "acorn": 90, "butternut": 90, "artichok": 90, "pepper": [90, 91], "cardoon": 90, "mushroom": 90, "granni": 90, "smith": 90, "strawberri": 90, "orang": 90, "lemon": 90, "pineappl": 90, "banana": 90, "jackfruit": 90, "custard": 90, "appl": 90, "pomegran": 90, "hai": 90, "carbonara": 90, "chocol": 90, "syrup": 90, "dough": 90, "meatloaf": 90, "pizza": 90, "pie": 90, "burrito": 90, "eggnog": 90, "alp": 90, "bubbl": 90, "reef": 90, "geyser": 90, "lakeshor": 90, "promontori": 90, "shoal": 90, "seashor": 90, "vallei": 90, "volcano": 90, "bridegroom": 90, "scuba": 90, "diver": 90, "rapese": 90, "daisi": 90, "ladi": 90, "slipper": 90, "corn": 90, "rose": 90, "hip": 90, "chestnut": 90, "fungu": 90, "agar": 90, "gyromitra": 90, "stinkhorn": 90, "earth": 90, "star": 90, "wood": 90, "bolet": 90, "ear": 90, "cifar10_test_set": 90, "airplan": [90, 97], "automobil": [90, 97], "deer": [90, 97], "cifar100_test_set": 90, "aquarium_fish": 90, "babi": 90, "boi": 90, "camel": 90, "caterpillar": 90, "cattl": [90, 101], "cloud": 90, "dinosaur": 90, "dolphin": 90, "flatfish": 90, "forest": 90, "girl": 90, "kangaroo": 90, "lawn_mow": 90, "man": 90, "maple_tre": 90, "motorcycl": [90, 100], "oak_tre": 90, "orchid": 90, "palm_tre": 90, "pear": 90, "pickup_truck": 90, "pine_tre": 90, "plain": 90, "poppi": 90, "possum": 90, "raccoon": 90, "road": [90, 100], "rocket": 90, "seal": 90, "shrew": 90, "skyscrap": 90, "streetcar": 90, "sunflow": 90, "sweet_pepp": 90, "trout": 90, "tulip": 90, "willow_tre": 90, "woman": [90, 96], "caltech256": 90, "ak47": 90, "bat": 90, "glove": 90, "birdbath": 90, "blimp": 90, "bonsai": 90, "boom": 90, "breadmak": 90, "buddha": 90, "bulldoz": 90, "cactu": 90, "cake": 90, "tire": 90, "cartman": 90, "cereal": 90, "chandeli": 90, "chess": 90, "board": 90, "chimp": 90, "chopstick": 90, "coffin": 90, "coin": 90, "comet": 90, "cormor": 90, "globe": 90, "diamond": 90, "dice": 90, "doorknob": 90, "drink": 90, "straw": 90, "dumb": 90, "eiffel": 90, "elk": 90, "ewer": 90, "eyeglass": 90, "fern": 90, "fighter": 90, "jet": [90, 99], "extinguish": 90, "hydrant": 90, "firework": 90, "flashlight": 90, "floppi": 90, "fri": 90, "frisbe": 90, "galaxi": 90, "giraff": 90, "goat": 90, "gate": 90, "grape": 90, "pick": [90, 91], "hamburg": 90, "hammock": 90, "harpsichord": 90, "hawksbil": 90, "helicopt": 90, "hibiscu": 90, "homer": 90, "simpson": 90, "horsesho": 90, "air": 90, "skeleton": 90, "ibi": 90, "cone": 90, "iri": 90, "jesu": 90, "christ": 90, "joi": 90, "kayak": 90, "ketch": 90, "ladder": 90, "lath": 90, "licens": 90, "lightbulb": 90, "lightn": 90, "mandolin": 90, "mar": 90, "mattress": 90, "megaphon": 90, "menorah": 90, "microscop": 90, "minaret": 90, "minotaur": 90, "motorbik": 90, "mussel": 90, "neckti": 90, "octopu": 90, "palm": 90, "pilot": 90, "paperclip": 90, "shredder": 90, "pci": 90, "peopl": [90, 96], "pez": 90, "picnic": 90, "pram": 90, "prai": 90, "pyramid": 90, "rainbow": 90, "roulett": 90, "saddl": 90, "saturn": 90, "segwai": 90, "propel": 90, "sextant": 90, "music": 90, "skateboard": 90, "smokestack": 90, "sneaker": 90, "boat": 90, "stain": 90, "steer": 90, "stirrup": 90, "superman": 90, "sushi": 90, "armi": [90, 101], "sword": 90, "tambourin": 90, "teepe": 90, "court": 90, "theodolit": 90, "tomato": 90, "tombston": 90, "tour": 90, "pisa": 90, "treadmil": 90, "fork": 90, "tweezer": 90, "unicorn": 90, "vcr": 90, "waterfal": 90, "watermelon": 90, "weld": 90, "windmil": 90, "xylophon": 90, "yarmulk": 90, "yo": 90, "toad": 90, "twenty_news_test_set": 90, "alt": 90, "atheism": 90, "comp": 90, "graphic": [90, 100], "misc": [90, 101], "sy": 90, "ibm": 90, "pc": 90, "hardwar": 90, "mac": 90, "forsal": 90, "rec": 90, "sci": 90, "crypt": 90, "electron": 90, "med": 90, "soc": 90, "religion": 90, "christian": [90, 101], "talk": [90, 101], "polit": 90, "gun": 90, "mideast": 90, "amazon": 90, "neutral": 90, "imdb_test_set": 90, "all_class": 90, "20news_test_set": 90, "_load_classes_predprobs_label": 90, "dataset_nam": 90, "labelerror": 90, "url_bas": 90, "5392f6c71473055060be3044becdde1cbc18284d": 90, "url_label": 90, "original_test_label": 90, "_original_label": 90, "url_prob": 90, "cross_validated_predicted_prob": 90, "_pyx": 90, "num_part": 90, "datatset": 90, "bytesio": 90, "allow_pickl": 90, "pred_probs_part": 90, "url": 90, "_of_": 90, "nload": 90, "imdb": 90, "ve": [90, 91, 92, 94, 96], "interpret": [90, 91, 92, 95, 99], "capit": 90, "29780": 90, "256": [90, 91, 96], "780": 90, "medic": [90, 101], "doctor": 90, "254": [90, 96], "359223": 90, "640777": 90, "184": [90, 92], "258427": 90, "341176": 90, "263158": 90, "658824": 90, "337349": 90, "246575": 90, "662651": 90, "248": 90, "330000": 90, "355769": 90, "670000": 90, "251": [90, 96], "167": [90, 92, 96], "252": 90, "112": 90, "253": [90, 96], "022989": 90, "049505": 90, "190": [90, 92, 96], "66": 90, "002216": 90, "000974": 90, "59": [90, 96], "000873": 90, "000739": 90, "32635": 90, "32636": 90, "47": [90, 96], "32637": 90, "32638": 90, "32639": 90, "32640": 90, "051": 90, "002242": 90, "997758": 90, "002088": 90, "001045": 90, "997912": 90, "002053": 90, "997947": 90, "001980": 90, "000991": 90, "998020": 90, "001946": 90, "002915": 90, "998054": 90, "001938": 90, "002904": 90, "998062": 90, "001020": 90, "998980": 90, "001018": 90, "002035": 90, "998982": 90, "999009": 90, "0003": 90, "0002": 90, "36": [90, 101], "41": [90, 96, 99], "71": [90, 92, 96, 99], "071": 90, "067269": 90, "929": 90, "046": 90, "058243": 90, "954": 90, "035": 90, "032096": 90, "965": 90, "031": 90, "012232": 90, "969": 90, "022": 90, "025896": 90, "978": 90, "020": [90, 92], "013092": 90, "018": 90, "013065": 90, "016": 90, "030542": 90, "984": 90, "013": 90, "020833": 90, "987": 90, "012": 90, "010020": 90, "988": 90, "0073": 90, "0020": 90, "0016": 90, "0015": 90, "0013": 90, "0012": 90, "0010": 90, "0008": 90, "0007": 90, "0006": 90, "0005": 90, "0004": 90, "244": [90, 96, 101], "98": [90, 91, 99], "452381": 90, "459770": 90, "72": [90, 92, 95, 99], "523364": 90, "460784": 90, "446602": 90, "57": [90, 92], "103774": 90, "030612": 90, "110092": 90, "049020": 90, "0034": 90, "0032": 90, "0026": 90, "0025": 90, "4945": 90, "4946": 90, "4947": 90, "4948": 90, "4949": 90, "4950": 90, "846": 90, "82": [90, 92, 96, 99], "7532": 90, "532": 90, "034483": 90, "009646": 90, "965517": 90, "030457": 90, "020513": 90, "969543": 90, "028061": 90, "035443": 90, "971939": 90, "025316": 90, "005168": 90, "974684": 90, "049751": 90, "979487": 90, "019920": 90, "042802": 90, "980080": 90, "017677": 90, "005115": 90, "982323": 90, "012987": 90, "005236": 90, "987013": 90, "012723": 90, "025126": 90, "987277": 90, "010989": 90, "008264": 90, "989011": 90, "010283": 90, "027778": 90, "989717": 90, "009677": 90, "990323": 90, "007614": 90, "010127": 90, "992386": 90, "005051": 90, "994949": 90, "005025": 90, "994975": 90, "005013": 90, "994987": 90, "001859": 90, "001328": 90, "000929": 90, "000664": 90, "186": [90, 92], "188": [90, 92, 95], "189": [90, 92], "snippet": 91, "nlp": [91, 101], "mind": [91, 92], "alphanumer": 91, "facilit": 91, "seamless": 91, "classlabel": 91, "guidanc": 91, "labels_str": 91, "datalab_str": 91, "labels_int": 91, "remap": 91, "datalab_int": 91, "my_dict": 91, "pet_nam": 91, "rover": 91, "rocki": 91, "speci": 91, "from_dict": 91, "datalab_dataset": 91, "number_of_class": 91, "total_number_of_data_point": 91, "feed": 91, "alphabet": 91, "labels_proper_format": 91, "your_classifi": 91, "issues_datafram": 91, "class_predicted_for_flagged_exampl": 91, "class_predicted_for_all_exampl": 91, "grant": 91, "On": [91, 92, 96], "merged_dataset": 91, "label_column_nam": 91, "datataset": 91, "fair": [91, 92], "game": 91, "speedup": [91, 97], "flexibl": 91, "tempfil": 91, "mkdtemp": 91, "sped": 91, "anywai": 91, "pred_probs_merg": 91, "merge_rare_class": 91, "count_threshold": 91, "class_mapping_orig2new": 91, "heath_summari": 91, "num_examples_per_class": 91, "rare_class": 91, "num_classes_merg": 91, "other_class": 91, "labels_merg": 91, "new_c": 91, "merged_prob": 91, "new_class": 91, "original_class": 91, "num_check": 91, "ones_array_ref": 91, "isclos": 91, "though": [91, 92, 101], "successfulli": 91, "meaning": [91, 97], "virtuou": [91, 94], "cycl": [91, 94], "jointli": 91, "junk": 91, "clutter": 91, "unknown": 91, "caltech": 91, "combined_boolean_mask": 91, "mask1": 91, "mask2": 91, "gradientboostingclassifi": [91, 92], "true_error": [91, 92, 95], "101": [91, 96], "102": [91, 95, 96], "104": [91, 92, 96], "model_to_find_error": 91, "model_to_return": 91, "cl0": 91, "randomizedsearchcv": 91, "expens": 91, "param_distribut": 91, "learning_r": [91, 92], "max_depth": [91, 92], "magnitud": 91, "coeffici": [91, 99], "optin": 91, "environ": [91, 92], "rerun": [91, 92], "cell": [91, 92], "unabl": [91, 92], "render": [91, 92], "nbviewer": [91, 92], "nbsp": [91, 92], "cleanlearninginot": [91, 92], "fittedcleanlearn": [91, 92], "linearregressionlinearregress": 91, "n_init": 91, "fit_predict": 91, "continuous_column": 91, "categorical_column": 91, "data_df": 91, "feature_a": 91, "feature_b": 91, "unexpectedli": 91, "emphas": 91, "crucial": 91, "merge_duplicate_set": 91, "merge_kei": 91, "construct_group_kei": 91, "merged_set": 91, "consolidate_set": 91, "tolist": [91, 95], "issubset": 91, "frozenset": 91, "sets_list": 91, "mutabl": 91, "new_set": 91, "current_set": 91, "intersecting_set": 91, "lowest_score_strategi": 91, "sub_df": 91, "idxmin": 91, "filter_near_dupl": 91, "strategy_fn": 91, "strategy_kwarg": 91, "duplicate_row": 91, "group_kei": 91, "to_keep_indic": 91, "groupbi": 91, "explod": 91, "to_remov": 91, "isin": [91, 97], "kept": 91, "ids_to_remove_seri": 91, "tmp": 91, "ipykernel_7598": 91, "1995098996": 91, "deprecationwarn": 91, "dataframegroupbi": 91, "include_group": 91, "silenc": 91, "assist": 91, "streamlin": 91, "ux": 91, "agpl": 91, "compani": 91, "commerci": 91, "alter": 91, "email": 91, "team": 91, "discuss": 91, "anywher": 91, "profession": 91, "expert": 91, "depth": 92, "survei": [92, 101], "focus": [92, 94, 95, 99], "scienc": 92, "multivariate_norm": [92, 94, 95], "make_data": [92, 94], "cov": [92, 94, 95], "avg_trac": [92, 95], "py_tru": 92, "noise_matrix_tru": 92, "noise_marix": 92, "s_test": 92, "noisy_test_label": 92, "purpl": 92, "val": 92, "namespac": 92, "exec": 92, "markerfacecolor": [92, 95], "markeredgecolor": [92, 95, 99], "markers": [92, 95, 99], "markeredgewidth": [92, 95, 99], "realist": 92, "7560": 92, "637318e": 92, "896262e": 92, "548391e": 92, "923417e": 92, "375075e": 92, "3454": 92, "014051": 92, "020451": 92, "249": [92, 96], "042594": 92, "043859": 92, "045954": 92, "6120": 92, "023714": 92, "007136": 92, "119": [92, 96], "107266": 92, "103": [92, 96], "033738": 92, "238": [92, 96], "119505": 92, "236": [92, 96], "037843": 92, "222": 92, "614915": 92, "122": [92, 96], "624422": 92, "625965": 92, "626079": 92, "118": 92, "627675": 92, "695223": 92, "323529": 92, "523015": 92, "013720": 92, "675727": 92, "646521": 92, "anyth": 92, "enhanc": [92, 94, 96], "magic": 92, "liter": 92, "identif": 92, "x27": 92, "logisticregressionlogisticregress": 92, "ever": 92, "092": 92, "040": 92, "024": 92, "004": 92, "surpris": 92, "1705": 92, "01936": 92, "ton": 92, "yourfavoritemodel1": 92, "merged_label": 92, "merged_test_label": 92, "newli": [92, 94], "yourfavoritemodel2": 92, "yourfavoritemodel3": 92, "cl3": 92, "takeawai": 92, "That": [92, 95], "randomli": 92, "my_test_pred_prob": 92, "my_test_pr": 92, "issues_test": 92, "corrected_test_label": 92, "pretend": 92, "cl_test_pr": 92, "69": [92, 99], "fairli": 92, "label_acc": 92, "percentag": 92, "offset": 92, "nquestion": 92, "overestim": 92, "answer": 92, "experienc": 92, "knowledg": 92, "prioiri": 92, "known": 92, "versatil": 92, "label_issues_indic": 92, "213": [92, 96], "218": [92, 96], "152": 92, "197": [92, 96], "196": [92, 96], "170": 92, "214": 92, "164": [92, 95], "198": [92, 96], "191": [92, 96], "63": [92, 96, 99], "117": [92, 99], "62": [92, 96, 99], "206": [92, 96], "115": [92, 96], "193": 92, "194": 92, "201": [92, 96, 101], "174": 92, "163": 92, "150": [92, 94, 96], "169": 92, "151": [92, 96], "168": 92, "precision_scor": 92, "recall_scor": 92, "f1_score": 92, "true_label_issu": 92, "filter_by_list": 92, "718750": [92, 94], "807018": 92, "912": 92, "733333": 92, "800000": 92, "721311": 92, "792793": 92, "908": 92, "676923": 92, "765217": 92, "892": 92, "567901": 92, "702290": 92, "844": 92, "gaug": 92, "label_issues_count": 92, "155": [92, 96, 101], "156": 92, "172": [92, 95], "easiest": 92, "modular": 92, "penalti": 92, "l2": 92, "model3": 92, "n_estim": 92, "cv_pred_probs_1": 92, "cv_pred_probs_2": 92, "cv_pred_probs_3": 92, "label_quality_scores_best": 92, "cv_pred_probs_ensembl": 92, "label_quality_scores_bett": 92, "superior": [92, 98], "workflow": [93, 99], "timm": 93, "glad": 94, "multiannotator_label": 94, "300": [94, 101], "noisier": 94, "111": [94, 99], "local_data": [94, 95], "true_labels_train": [94, 95], "noise_matrix_bett": 94, "noise_matrix_wors": 94, "transpos": [94, 97], "dropna": 94, "zfill": 94, "row_na_check": 94, "notna": 94, "reset_index": 94, "a0001": 94, "a0002": 94, "a0003": 94, "a0004": 94, "a0005": 94, "a0006": 94, "a0007": 94, "a0008": 94, "a0009": 94, "a0010": 94, "a0041": 94, "a0042": 94, "a0043": 94, "a0044": 94, "a0045": 94, "a0046": 94, "a0047": 94, "a0048": 94, "a0049": 94, "a0050": 94, "na": 94, "60856743": 94, "41693214": 94, "40908785": 94, "87147629": 94, "64941785": 94, "10774851": 94, "0524466": 94, "71853246": 94, "37169848": 94, "66031048": 94, "multiannotator_util": 94, "crude": 94, "straight": 94, "majority_vote_label": 94, "736118": 94, "757751": 94, "782232": 94, "715565": 94, "824256": 94, "quality_annotator_a0001": 94, "quality_annotator_a0002": 94, "quality_annotator_a0003": 94, "quality_annotator_a0004": 94, "quality_annotator_a0005": 94, "quality_annotator_a0006": 94, "quality_annotator_a0007": 94, "quality_annotator_a0008": 94, "quality_annotator_a0009": 94, "quality_annotator_a0010": 94, "quality_annotator_a0041": 94, "quality_annotator_a0042": 94, "quality_annotator_a0043": 94, "quality_annotator_a0044": 94, "quality_annotator_a0045": 94, "quality_annotator_a0046": 94, "quality_annotator_a0047": 94, "quality_annotator_a0048": 94, "quality_annotator_a0049": 94, "quality_annotator_a0050": 94, "070564": 94, "216078": 94, "119188": 94, "alongisd": 94, "244981": 94, "208333": 94, "295979": 94, "294118": 94, "324197": 94, "310345": 94, "355316": 94, "346154": 94, "439732": 94, "480000": 94, "a0031": 94, "523205": 94, "580645": 94, "a0034": 94, "535313": 94, "607143": 94, "a0021": 94, "606999": 94, "a0015": 94, "609526": 94, "678571": 94, "a0011": 94, "621103": 94, "692308": 94, "wors": 94, "improved_consensus_label": 94, "majority_vote_accuraci": 94, "cleanlab_label_accuraci": 94, "8581081081081081": 94, "9797297297297297": 94, "besid": 94, "sorted_consensus_quality_scor": 94, "worst_qual": 94, "better_qu": 94, "worst_quality_accuraci": 94, "better_quality_accuraci": 94, "9893238434163701": 94, "improved_pred_prob": 94, "treat": [94, 95, 99, 101], "analzi": 94, "copyright": 95, "advertis": 95, "violenc": 95, "nsfw": 95, "suppli": [95, 96, 99], "celeba": 95, "make_multilabel_data": 95, "boxes_coordin": 95, "box_multilabel": 95, "make_multi": 95, "bx1": 95, "by1": 95, "bx2": 95, "by2": 95, "label_list": 95, "ur": 95, "upper": 95, "inidx": 95, "logical_and": 95, "inv_d": 95, "labels_idx": 95, "true_labels_test": 95, "dict_unique_label": 95, "get_color_arrai": 95, "dcolor": 95, "aa4400": 95, "55227f": 95, "55a100": 95, "00ff00": 95, "007f7f": 95, "386b55": 95, "0000ff": 95, "simplic": 95, "y_onehot": 95, "single_class_label": 95, "stratifi": [95, 98], "kf": 95, "train_index": 95, "test_index": 95, "clf_cv": 95, "x_train_cv": 95, "x_test_cv": 95, "y_train_cv": 95, "y_test_cv": 95, "y_pred_cv": 95, "saw": 95, "num_to_displai": 95, "09": [95, 96, 99], "275": 95, "267": 95, "225": 95, "171": 95, "234": 95, "165": 95, "227": [95, 96], "262": [95, 96], "263": [95, 96], "266": [95, 96], "139": 95, "143": [95, 96, 101], "216": [95, 96], "265": 95, "159": [95, 96], "despit": [95, 101], "suspect": 95, "888": 95, "8224": 95, "9632": 95, "968": 95, "6512": 95, "0444": 95, "774": 95, "labels_binary_format": 95, "labels_list_format": 95, "surround": 96, "scene": 96, "coco": 96, "everydai": 96, "has_label_issu": 96, "insal": 96, "nc": [96, 100, 101], "s3": [96, 100, 101], "amazonaw": [96, 100, 101], "objectdetectionbenchmark": 96, "tutorial_obj": 96, "pkl": 96, "example_imag": 96, "unzip": [96, 101], "_separate_label": 96, "_separate_predict": 96, "begin": 96, "image_path": 96, "rb": 96, "image_to_visu": 96, "seg_map": 96, "334": 96, "float32": 96, "bboxes_ignor": 96, "290": 96, "286": 96, "285": 96, "224": 96, "231": 96, "293": 96, "235": 96, "289": 96, "282": 96, "281": 96, "271": 96, "280": 96, "277": 96, "279": 96, "287": 96, "299": 96, "276": 96, "307": 96, "321": 96, "326": 96, "333": 96, "319": 96, "257": 96, "295": 96, "283": 96, "243": 96, "303": 96, "316": 96, "247": 96, "323": 96, "327": 96, "226": 96, "228": 96, "232": 96, "219": 96, "239": 96, "240": 96, "209": [96, 101], "242": 96, "202": 96, "230": 96, "215": 96, "220": 96, "229": 96, "217": [96, 101], "237": 96, "207": 96, "204": 96, "84": [96, 99], "205": 96, "223": 96, "153": 96, "149": 96, "140": [96, 101], "124": 96, "268": 96, "273": 96, "108": 96, "284": 96, "110": 96, "136": 96, "145": 96, "173": 96, "297": 96, "317": 96, "192": 96, "332": 96, "324": 96, "203": 96, "320": 96, "314": 96, "199": 96, "291": 96, "000000481413": 96, "jpg": 96, "42398": 96, "44503": 96, "29968": 96, "336": 96, "21005": 96, "9978472": 96, "forgot": 96, "drew": 96, "label_issue_idx": 96, "num_examples_to_show": 96, "138": 96, "candid": 96, "97489622": 96, "70610878": 96, "98764951": 96, "88899237": 96, "99085805": 96, "issue_idx": 96, "95569726e": 96, "03354841e": 96, "57510169e": 96, "58447666e": 96, "39755858e": 96, "issue_to_visu": 96, "000000009483": 96, "95569726168054e": 96, "addition": [96, 100], "visibl": 96, "missmatch": 96, "likelei": 96, "agnost": 96, "vaidat": 96, "inconsist": 96, "000000395701": 96, "033548411774308e": 96, "armchair": 96, "tv": 96, "000000154004": 96, "38300759625496356": 96, "foreground": 96, "000000448410": 96, "0008575101690203273": 96, "crowd": 96, "alon": 96, "explor": [96, 97], "resembl": [96, 97], "000000499768": 96, "9748962231208227": 96, "000000521141": 96, "8889923658893665": 96, "000000143931": 96, "9876495074395956": 96, "bonu": 96, "uncov": 96, "irregular": 96, "anomali": 96, "object_detection_util": 96, "calculate_bounding_box_area": 96, "num_imgs_to_show": 96, "lab_object_count": 96, "pred_object_count": 96, "000000430073": 96, "000000183709": 96, "000000189475": 96, "studi": 96, "label_norm": 96, "pred_norm": 96, "area": [96, 100], "assess": 96, "lab_area": 96, "pred_area": 96, "lab_area_mean": 96, "lab_area_std": 96, "max_deviation_valu": 96, "max_deviation_class": 96, "deviation_valu": 96, "deviation_class": 96, "mean_area": 96, "std_area": 96, "class_area": 96, "deviations_awai": 96, "max_deviation_index": 96, "num_imgs_to_show_per_class": 96, "class_num": 96, "sorted_indic": 96, "000000422886": 96, "000000341828": 96, "000000461009": 96, "train_feature_embed": 97, "ood_train_feature_scor": 97, "test_feature_embed": 97, "ood_test_feature_scor": 97, "ood_train_predictions_scor": 97, "train_pred_prob": 97, "ood_test_predictions_scor": 97, "test_pred_prob": 97, "pylab": 97, "rcparam": 97, "baggingclassifi": 97, "therebi": 97, "rescal": 97, "transform_norm": 97, "totensor": 97, "root": 97, "animal_class": 97, "non_animal_class": 97, "animal_idx": 97, "test_idx": 97, "toronto": 97, "edu": 97, "kriz": 97, "170498071": 97, "39370416": 97, "49it": 97, "5000": 97, "plot_imag": 97, "visualize_outli": 97, "txt_class": 97, "img": [97, 99], "npimg": 97, "show_label": 97, "data_subset": 97, "resnet50": 97, "corpu": 97, "2048": 97, "embed_imag": 97, "create_model": 97, "strang": 97, "odd": 97, "train_ood_features_scor": 97, "top_train_ood_features_idx": 97, "fun": 97, "negat": 97, "homogen": 97, "bottom_train_ood_features_idx": 97, "test_ood_features_scor": 97, "top_ood_features_idx": 97, "inevit": 97, "trade": 97, "5th": 97, "percentil": 97, "fifth_percentil": 97, "plt_rang": 97, "hist": 97, "train_outlier_scor": 97, "ylabel": 97, "axvlin": 97, "test_outlier_scor": 97, "ood_features_indic": 97, "revisit": 97, "return_invers": 97, "train_feature_embeddings_sc": 97, "test_feature_embeddings_sc": 97, "train_pred_label": 97, "9702": 97, "train_ood_predictions_scor": 97, "test_ood_predictions_scor": 97, "lost": 97, "unsuit": 98, "ok": [98, 101], "convention": 98, "aforement": 98, "hypothet": 98, "contrast": 98, "tradit": 98, "disjoint": 98, "out_of_sample_pred_probs_for_a": 98, "out_of_sample_pred_probs_for_b": 98, "out_of_sample_pred_probs_for_c": 98, "out_of_sample_pred_prob": 98, "price": 99, "incom": 99, "ag": 99, "sensor": 99, "histgradientboostingregressor": 99, "r2_score": 99, "student_grades_r": 99, "final_scor": 99, "true_final_scor": 99, "homework": 99, "3d": 99, "hue": 99, "mpl_toolkit": 99, "mplot3d": 99, "axes3d": 99, "errors_idx": 99, "add_subplot": 99, "z": 99, "colorbar": 99, "errors_mask": 99, "feature_column": 99, "predicted_column": 99, "x_train_raw": 99, "x_test_raw": 99, "randomforestregressor": 99, "385101": 99, "499503": 99, "698255": 99, "776647": 99, "109373": 99, "170547": 99, "481096": 99, "984759": 99, "645270": 99, "795928": 99, "141": 99, "659": 99, "367": 99, "318": 99, "305": 99, "560": 99, "657": 99, "688": 99, "view_datapoint": 99, "concat": 99, "preds_og": 99, "r2_og": 99, "838": 99, "found_label_issu": 99, "preds_cl": 99, "r2_cl": 99, "926": 99, "favorit": 99, "968627e": 99, "228799": 99, "646674e": 99, "402962": 99, "323818e": 99, "952758": 99, "422144e": 99, "456908": 99, "465815e": 99, "753968": 99, "791186e": 99, "110719": 99, "485156e": 99, "670640": 99, "225300e": 99, "749976": 99, "499679e": 99, "947007": 99, "067882e": 99, "648396": 99, "synthia": 100, "imagesegment": 100, "given_mask": 100, "predicted_mask": 100, "set_printopt": [100, 101], "sky": 100, "sidewalk": 100, "veget": 100, "terrain": 100, "rider": 100, "pred_probs_filepath": 100, "1088": 100, "1920": 100, "label_filepath": 100, "synthia_class": 100, "maunal": 100, "100000": 100, "244800": 100, "leftmost": 100, "middl": [100, 101], "infact": 100, "rightmost": 100, "discrep": 100, "3263230": 100, "783379": 100, "275110": 100, "255792": 100, "78225": 100, "55990": 100, "54427": 100, "33591": 100, "24645": 100, "21308": 100, "15045": 100, "14171": 100, "13832": 100, "13498": 100, "11490": 100, "9164": 100, "8769": 100, "6999": 100, "6031": 100, "5011": 100, "mistakenli": 100, "class_issu": 100, "aim": [100, 101], "domin": 100, "bunch": 101, "conll": 101, "2003": 101, "love": 101, "n_i": 101, "optional_list_of_ordered_class_nam": 101, "deepai": 101, "conll2003": 101, "rm": 101, "tokenclassif": 101, "2024": 101, "2400": 101, "52e0": 101, "1a01": 101, "985": 101, "connect": 101, "443": 101, "await": 101, "982975": 101, "960k": 101, "959": 101, "94k": 101, "kb": 101, "mb": 101, "directori": 101, "inflat": 101, "182": 101, "17045998": 101, "16m": 101, "octet": 101, "26m": 101, "1mb": 101, "bert": 101, "read_npz": 101, "filepath": 101, "corrsespond": 101, "iob2": 101, "given_ent": 101, "entity_map": 101, "readfil": 101, "sep": 101, "startswith": 101, "docstart": 101, "isalpha": 101, "isupp": 101, "indices_to_preview": 101, "nsentenc": 101, "eu": 101, "reject": 101, "boycott": 101, "british": 101, "lamb": 101, "00030412": 101, "00023826": 101, "99936208": 101, "00007009": 101, "00002545": 101, "99998795": 101, "00000401": 101, "00000218": 101, "00000455": 101, "00000131": 101, "00000749": 101, "99996115": 101, "00001371": 101, "0000087": 101, "00000895": 101, "99998936": 101, "00000382": 101, "00000178": 101, "00000366": 101, "00000137": 101, "99999101": 101, "00000266": 101, "00000174": 101, "0000035": 101, "00000109": 101, "99998768": 101, "00000482": 101, "00000202": 101, "00000438": 101, "0000011": 101, "00000465": 101, "99996392": 101, "00001105": 101, "0000116": 101, "00000878": 101, "99998671": 101, "00000364": 101, "00000213": 101, "00000472": 101, "00000281": 101, "99999073": 101, "00000211": 101, "00000159": 101, "00000442": 101, "00000115": 101, "peter": 101, "blackburn": 101, "00000358": 101, "00000529": 101, "99995623": 101, "0000129": 101, "0000024": 101, "00001812": 101, "99994141": 101, "00001645": 101, "00002162": 101, "brussel": 101, "1996": 101, "00001172": 101, "00000821": 101, "00004661": 101, "0000618": 101, "99987167": 101, "99999061": 101, "00000201": 101, "00000195": 101, "00000408": 101, "00000135": 101, "2254": 101, "2907": 101, "19392": 101, "9962": 101, "8904": 101, "19303": 101, "12918": 101, "9256": 101, "11855": 101, "18392": 101, "20426": 101, "19402": 101, "14744": 101, "19371": 101, "4645": 101, "10331": 101, "9430": 101, "6143": 101, "18367": 101, "12914": 101, "todai": 101, "weather": 101, "march": 101, "scalfaro": 101, "northern": 101, "himself": 101, "said": 101, "germani": 101, "nastja": 101, "rysich": 101, "north": 101, "spla": 101, "fought": 101, "khartoum": 101, "govern": 101, "south": 101, "1983": 101, "autonomi": 101, "animist": 101, "region": 101, "moslem": 101, "arabis": 101, "mayor": 101, "antonio": 101, "gonzalez": 101, "garcia": 101, "revolutionari": 101, "parti": 101, "wednesdai": 101, "troop": 101, "raid": 101, "farm": 101, "stole": 101, "rape": 101, "women": 101, "spring": 101, "chg": 101, "hrw": 101, "12pct": 101, "princ": 101, "photo": 101, "moment": 101, "spokeswoman": 101, "rainier": 101, "told": 101, "reuter": 101, "danila": 101, "carib": 101, "w224": 101, "equip": 101, "radiomet": 101, "earn": 101, "19996": 101, "london": 101, "denom": 101, "sale": 101, "uk": 101, "jp": 101, "fr": 101, "maccabi": 101, "hapoel": 101, "haifa": 101, "tel": 101, "aviv": 101, "hospit": 101, "rever": 101, "roman": 101, "cathol": 101, "nun": 101, "admit": 101, "calcutta": 101, "week": 101, "ago": 101, "fever": 101, "vomit": 101, "allianc": 101, "embattl": 101, "kabul": 101, "salang": 101, "highwai": 101, "mondai": 101, "tuesdai": 101, "suprem": 101, "council": 101, "led": 101, "jumbish": 101, "milli": 101, "movement": 101, "warlord": 101, "abdul": 101, "rashid": 101, "dostum": 101, "dollar": 101, "exchang": 101, "3570": 101, "12049": 101, "born": 101, "1937": 101, "provinc": 101, "anhui": 101, "dai": 101, "came": 101, "shanghai": 101, "citi": 101, "prolif": 101, "author": 101, "teacher": 101, "chines": 101, "16764": 101, "1990": 101, "historian": 101, "alan": 101, "john": 101, "percival": 101, "taylor": 101, "di": 101, "20446": 101, "pace": 101, "bowler": 101, "ian": 101, "harvei": 101, "claim": 101, "victoria": 101, "15514": 101, "cotti": 101, "osc": 101, "foreign": 101, "minist": 101, "7525": 101, "sultan": 101, "specter": 101, "met": 101, "crown": 101, "abdullah": 101, "defenc": 101, "aviat": 101, "jeddah": 101, "saudi": 101, "agenc": 101, "2288": 101, "hi": 101, "customari": 101, "outfit": 101, "champion": 101, "damp": 101, "scalp": 101, "canada": 101, "reign": 101, "olymp": 101, "donovan": 101, "bailei": 101, "1992": 101, "linford": 101, "christi": 101, "britain": 101, "1984": 101, "1988": 101, "carl": 101, "lewi": 101, "ambigi": 101, "punctuat": 101, "chicago": 101, "digest": 101, "philadelphia": 101, "usda": 101, "york": 101, "token_issu": 101, "471": 101, "kean": 101, "year": 101, "contract": 101, "manchest": 101, "19072": 101, "societi": 101, "bite": 101, "deliv": 101, "19910": 101, "father": 101, "clarenc": 101, "woolmer": 101, "renam": 101, "uttar": 101, "pradesh": 101, "india": 101, "ranji": 101, "trophi": 101, "nation": 101, "championship": 101, "captain": 101, "1949": 101, "15658": 101, "19879": 101, "iii": 101, "brian": 101, "shimer": 101, "randi": 101, "jone": 101, "19104": 101}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [10, 0, 0, "-", "datalab"], [35, 0, 0, "-", "dataset"], [38, 0, 0, "-", "experimental"], [42, 0, 0, "-", "filter"], [43, 0, 0, "-", "internal"], [54, 0, 0, "-", "models"], [56, 0, 0, "-", "multiannotator"], [59, 0, 0, "-", "multilabel_classification"], [62, 0, 0, "-", "object_detection"], [65, 0, 0, "-", "outlier"], [66, 0, 0, "-", "rank"], [67, 0, 0, "-", "regression"], [71, 0, 0, "-", "segmentation"], [75, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.datalab": [[4, 0, 0, "-", "datalab"], [14, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[4, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[4, 4, 1, "", "class_names"], [4, 3, 1, "", "find_issues"], [4, 3, 1, "", "get_info"], [4, 3, 1, "", "get_issue_summary"], [4, 3, 1, "", "get_issues"], [4, 4, 1, "", "has_labels"], [4, 4, 1, "", "info"], [4, 4, 1, "", "issue_summary"], [4, 4, 1, "", "issues"], [4, 4, 1, "", "labels"], [4, 3, 1, "", "list_default_issue_types"], [4, 3, 1, "", "list_possible_issue_types"], [4, 3, 1, "", "load"], [4, 3, 1, "", "report"], [4, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[11, 0, 0, "-", "data"], [12, 0, 0, "-", "data_issues"], [15, 0, 0, "-", "issue_finder"], [13, 0, 0, "-", "issue_manager_factory"], [31, 0, 0, "-", "model_outputs"], [32, 0, 0, "-", "report"], [33, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[11, 2, 1, "", "Data"], [11, 5, 1, "", "DataFormatError"], [11, 5, 1, "", "DatasetDictError"], [11, 5, 1, "", "DatasetLoadError"], [11, 2, 1, "", "Label"], [11, 2, 1, "", "MultiClass"], [11, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[12, 2, 1, "", "DataIssues"], [12, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[12, 3, 1, "", "collect_issues_from_imagelab"], [12, 3, 1, "", "collect_issues_from_issue_manager"], [12, 3, 1, "", "collect_statistics"], [12, 3, 1, "", "get_info"], [12, 3, 1, "", "get_issue_summary"], [12, 3, 1, "", "get_issues"], [12, 6, 1, "", "info"], [12, 6, 1, "", "issue_summary"], [12, 6, 1, "", "issues"], [12, 3, 1, "", "set_health_score"], [12, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[15, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[15, 3, 1, "", "find_issues"], [15, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[17, 0, 0, "-", "data_valuation"], [18, 0, 0, "-", "duplicate"], [19, 0, 0, "-", "imbalance"], [21, 0, 0, "-", "issue_manager"], [22, 0, 0, "-", "label"], [25, 0, 0, "-", "noniid"], [26, 0, 0, "-", "null"], [27, 0, 0, "-", "outlier"], [30, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[17, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[17, 6, 1, "", "DEFAULT_THRESHOLD"], [17, 3, 1, "", "collect_info"], [17, 6, 1, "", "description"], [17, 3, 1, "", "find_issues"], [17, 6, 1, "", "info"], [17, 6, 1, "", "issue_name"], [17, 6, 1, "", "issue_score_key"], [17, 6, 1, "", "issues"], [17, 3, 1, "", "make_summary"], [17, 3, 1, "", "report"], [17, 6, 1, "", "summary"], [17, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[18, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 6, 1, "", "near_duplicate_sets"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[19, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[21, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[22, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 3, 1, "", "get_health_summary"], [22, 6, 1, "", "health_summary_parameters"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[24, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[24, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[25, 2, 1, "", "NonIIDIssueManager"], [25, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[26, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[27, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[27, 6, 1, "", "DEFAULT_THRESHOLDS"], [27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 6, 1, "", "ood"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[29, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[29, 2, 1, "", "RegressionLabelIssueManager"], [29, 1, 1, "", "find_issues_with_features"], [29, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "find_issues"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 3, 1, "", "report"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[30, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[30, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [30, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [30, 3, 1, "", "collect_info"], [30, 6, 1, "", "description"], [30, 3, 1, "", "filter_cluster_ids"], [30, 3, 1, "", "find_issues"], [30, 3, 1, "", "get_worst_cluster"], [30, 6, 1, "", "info"], [30, 6, 1, "", "issue_name"], [30, 6, 1, "", "issue_score_key"], [30, 6, 1, "", "issues"], [30, 3, 1, "", "make_summary"], [30, 3, 1, "", "perform_clustering"], [30, 3, 1, "", "report"], [30, 3, 1, "", "set_knn_graph"], [30, 6, 1, "", "summary"], [30, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[13, 7, 1, "", "REGISTRY"], [13, 1, 1, "", "list_default_issue_types"], [13, 1, 1, "", "list_possible_issue_types"], [13, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[31, 2, 1, "", "ModelOutput"], [31, 2, 1, "", "MultiClassPredProbs"], [31, 2, 1, "", "MultiLabelPredProbs"], [31, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[32, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[32, 3, 1, "", "get_report"], [32, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[33, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[33, 6, 1, "", "CLASSIFICATION"], [33, 6, 1, "", "MULTILABEL"], [33, 6, 1, "", "REGRESSION"], [33, 3, 1, "", "__contains__"], [33, 3, 1, "", "__getitem__"], [33, 3, 1, "", "__iter__"], [33, 3, 1, "", "__len__"], [33, 3, 1, "", "from_str"], [33, 4, 1, "", "is_classification"], [33, 4, 1, "", "is_multilabel"], [33, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[35, 1, 1, "", "find_overlapping_classes"], [35, 1, 1, "", "health_summary"], [35, 1, 1, "", "overall_label_health_score"], [35, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[36, 0, 0, "-", "cifar_cnn"], [37, 0, 0, "-", "coteaching"], [39, 0, 0, "-", "label_issues_batched"], [40, 0, 0, "-", "mnist_pytorch"], [41, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[36, 2, 1, "", "CNN"], [36, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[36, 6, 1, "", "T_destination"], [36, 3, 1, "", "__call__"], [36, 3, 1, "", "add_module"], [36, 3, 1, "", "apply"], [36, 3, 1, "", "bfloat16"], [36, 3, 1, "", "buffers"], [36, 6, 1, "", "call_super_init"], [36, 3, 1, "", "children"], [36, 3, 1, "", "compile"], [36, 3, 1, "", "cpu"], [36, 3, 1, "", "cuda"], [36, 3, 1, "", "double"], [36, 6, 1, "", "dump_patches"], [36, 3, 1, "", "eval"], [36, 3, 1, "", "extra_repr"], [36, 3, 1, "", "float"], [36, 3, 1, "id0", "forward"], [36, 3, 1, "", "get_buffer"], [36, 3, 1, "", "get_extra_state"], [36, 3, 1, "", "get_parameter"], [36, 3, 1, "", "get_submodule"], [36, 3, 1, "", "half"], [36, 3, 1, "", "ipu"], [36, 3, 1, "", "load_state_dict"], [36, 3, 1, "", "modules"], [36, 3, 1, "", "named_buffers"], [36, 3, 1, "", "named_children"], [36, 3, 1, "", "named_modules"], [36, 3, 1, "", "named_parameters"], [36, 3, 1, "", "parameters"], [36, 3, 1, "", "register_backward_hook"], [36, 3, 1, "", "register_buffer"], [36, 3, 1, "", "register_forward_hook"], [36, 3, 1, "", "register_forward_pre_hook"], [36, 3, 1, "", "register_full_backward_hook"], [36, 3, 1, "", "register_full_backward_pre_hook"], [36, 3, 1, "", "register_load_state_dict_post_hook"], [36, 3, 1, "", "register_module"], [36, 3, 1, "", "register_parameter"], [36, 3, 1, "", "register_state_dict_pre_hook"], [36, 3, 1, "", "requires_grad_"], [36, 3, 1, "", "set_extra_state"], [36, 3, 1, "", "share_memory"], [36, 3, 1, "", "state_dict"], [36, 3, 1, "", "to"], [36, 3, 1, "", "to_empty"], [36, 3, 1, "", "train"], [36, 6, 1, "", "training"], [36, 3, 1, "", "type"], [36, 3, 1, "", "xpu"], [36, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[37, 1, 1, "", "adjust_learning_rate"], [37, 1, 1, "", "evaluate"], [37, 1, 1, "", "forget_rate_scheduler"], [37, 1, 1, "", "initialize_lr_scheduler"], [37, 1, 1, "", "loss_coteaching"], [37, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[39, 2, 1, "", "LabelInspector"], [39, 7, 1, "", "adj_confident_thresholds_shared"], [39, 1, 1, "", "find_label_issues_batched"], [39, 7, 1, "", "labels_shared"], [39, 7, 1, "", "pred_probs_shared"], [39, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[39, 3, 1, "", "get_confident_thresholds"], [39, 3, 1, "", "get_label_issues"], [39, 3, 1, "", "get_num_issues"], [39, 3, 1, "", "get_quality_scores"], [39, 3, 1, "", "score_label_quality"], [39, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[40, 2, 1, "", "CNN"], [40, 2, 1, "", "SimpleNet"], [40, 1, 1, "", "get_mnist_dataset"], [40, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[40, 3, 1, "", "__init_subclass__"], [40, 6, 1, "", "batch_size"], [40, 6, 1, "", "dataset"], [40, 6, 1, "", "epochs"], [40, 3, 1, "id0", "fit"], [40, 3, 1, "", "get_metadata_routing"], [40, 3, 1, "", "get_params"], [40, 6, 1, "", "loader"], [40, 6, 1, "", "log_interval"], [40, 6, 1, "", "lr"], [40, 6, 1, "", "momentum"], [40, 6, 1, "", "no_cuda"], [40, 3, 1, "id1", "predict"], [40, 3, 1, "id4", "predict_proba"], [40, 6, 1, "", "seed"], [40, 3, 1, "", "set_fit_request"], [40, 3, 1, "", "set_params"], [40, 3, 1, "", "set_predict_proba_request"], [40, 3, 1, "", "set_predict_request"], [40, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[40, 6, 1, "", "T_destination"], [40, 3, 1, "", "__call__"], [40, 3, 1, "", "add_module"], [40, 3, 1, "", "apply"], [40, 3, 1, "", "bfloat16"], [40, 3, 1, "", "buffers"], [40, 6, 1, "", "call_super_init"], [40, 3, 1, "", "children"], [40, 3, 1, "", "compile"], [40, 3, 1, "", "cpu"], [40, 3, 1, "", "cuda"], [40, 3, 1, "", "double"], [40, 6, 1, "", "dump_patches"], [40, 3, 1, "", "eval"], [40, 3, 1, "", "extra_repr"], [40, 3, 1, "", "float"], [40, 3, 1, "", "forward"], [40, 3, 1, "", "get_buffer"], [40, 3, 1, "", "get_extra_state"], [40, 3, 1, "", "get_parameter"], [40, 3, 1, "", "get_submodule"], [40, 3, 1, "", "half"], [40, 3, 1, "", "ipu"], [40, 3, 1, "", "load_state_dict"], [40, 3, 1, "", "modules"], [40, 3, 1, "", "named_buffers"], [40, 3, 1, "", "named_children"], [40, 3, 1, "", "named_modules"], [40, 3, 1, "", "named_parameters"], [40, 3, 1, "", "parameters"], [40, 3, 1, "", "register_backward_hook"], [40, 3, 1, "", "register_buffer"], [40, 3, 1, "", "register_forward_hook"], [40, 3, 1, "", "register_forward_pre_hook"], [40, 3, 1, "", "register_full_backward_hook"], [40, 3, 1, "", "register_full_backward_pre_hook"], [40, 3, 1, "", "register_load_state_dict_post_hook"], [40, 3, 1, "", "register_module"], [40, 3, 1, "", "register_parameter"], [40, 3, 1, "", "register_state_dict_pre_hook"], [40, 3, 1, "", "requires_grad_"], [40, 3, 1, "", "set_extra_state"], [40, 3, 1, "", "share_memory"], [40, 3, 1, "", "state_dict"], [40, 3, 1, "", "to"], [40, 3, 1, "", "to_empty"], [40, 3, 1, "", "train"], [40, 6, 1, "", "training"], [40, 3, 1, "", "type"], [40, 3, 1, "", "xpu"], [40, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[41, 1, 1, "", "display_issues"], [41, 1, 1, "", "find_label_issues"], [41, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[42, 1, 1, "", "find_label_issues"], [42, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [42, 1, 1, "", "find_predicted_neq_given"], [42, 7, 1, "", "pred_probs_by_class"], [42, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[44, 0, 0, "-", "label_quality_utils"], [45, 0, 0, "-", "latent_algebra"], [46, 0, 0, "-", "multiannotator_utils"], [47, 0, 0, "-", "multilabel_scorer"], [48, 0, 0, "-", "multilabel_utils"], [49, 0, 0, "-", "outlier"], [50, 0, 0, "-", "token_classification_utils"], [51, 0, 0, "-", "util"], [52, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[44, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[45, 1, 1, "", "compute_inv_noise_matrix"], [45, 1, 1, "", "compute_noise_matrix_from_inverse"], [45, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [45, 1, 1, "", "compute_py"], [45, 1, 1, "", "compute_py_inv_noise_matrix"], [45, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[46, 1, 1, "", "assert_valid_inputs_multiannotator"], [46, 1, 1, "", "assert_valid_pred_probs"], [46, 1, 1, "", "check_consensus_label_classes"], [46, 1, 1, "", "compute_soft_cross_entropy"], [46, 1, 1, "", "find_best_temp_scaler"], [46, 1, 1, "", "format_multiannotator_labels"], [46, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[47, 2, 1, "", "Aggregator"], [47, 2, 1, "", "ClassLabelScorer"], [47, 2, 1, "", "MultilabelScorer"], [47, 1, 1, "", "exponential_moving_average"], [47, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [47, 1, 1, "", "get_label_quality_scores"], [47, 1, 1, "", "multilabel_py"], [47, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[47, 3, 1, "", "__call__"], [47, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[47, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [47, 6, 1, "", "NORMALIZED_MARGIN"], [47, 6, 1, "", "SELF_CONFIDENCE"], [47, 3, 1, "", "__call__"], [47, 3, 1, "", "__contains__"], [47, 3, 1, "", "__getitem__"], [47, 3, 1, "", "__iter__"], [47, 3, 1, "", "__len__"], [47, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[47, 3, 1, "", "__call__"], [47, 3, 1, "", "aggregate"], [47, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[48, 1, 1, "", "get_onehot_num_classes"], [48, 1, 1, "", "int2onehot"], [48, 1, 1, "", "onehot2int"], [48, 1, 1, "", "stack_complement"]], "cleanlab.internal.outlier": [[49, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[50, 1, 1, "", "color_sentence"], [50, 1, 1, "", "filter_sentence"], [50, 1, 1, "", "get_sentence"], [50, 1, 1, "", "mapping"], [50, 1, 1, "", "merge_probs"], [50, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[51, 1, 1, "", "append_extra_datapoint"], [51, 1, 1, "", "clip_noise_rates"], [51, 1, 1, "", "clip_values"], [51, 1, 1, "", "compress_int_array"], [51, 1, 1, "", "confusion_matrix"], [51, 1, 1, "", "csr_vstack"], [51, 1, 1, "", "estimate_pu_f1"], [51, 1, 1, "", "extract_indices_tf"], [51, 1, 1, "", "force_two_dimensions"], [51, 1, 1, "", "format_labels"], [51, 1, 1, "", "get_missing_classes"], [51, 1, 1, "", "get_num_classes"], [51, 1, 1, "", "get_unique_classes"], [51, 1, 1, "", "is_tensorflow_dataset"], [51, 1, 1, "", "is_torch_dataset"], [51, 1, 1, "", "num_unique_classes"], [51, 1, 1, "", "print_inverse_noise_matrix"], [51, 1, 1, "", "print_joint_matrix"], [51, 1, 1, "", "print_noise_matrix"], [51, 1, 1, "", "print_square_matrix"], [51, 1, 1, "", "remove_noise_from_class"], [51, 1, 1, "", "round_preserving_row_totals"], [51, 1, 1, "", "round_preserving_sum"], [51, 1, 1, "", "smart_display_dataframe"], [51, 1, 1, "", "subset_X_y"], [51, 1, 1, "", "subset_data"], [51, 1, 1, "", "subset_labels"], [51, 1, 1, "", "train_val_split"], [51, 1, 1, "", "unshuffle_tensorflow_dataset"], [51, 1, 1, "", "value_counts"], [51, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[52, 1, 1, "", "assert_indexing_works"], [52, 1, 1, "", "assert_nonempty_input"], [52, 1, 1, "", "assert_valid_class_labels"], [52, 1, 1, "", "assert_valid_inputs"], [52, 1, 1, "", "labels_to_array"], [52, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[55, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[55, 2, 1, "", "KerasWrapperModel"], [55, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "predict"], [55, 3, 1, "", "predict_proba"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "predict"], [55, 3, 1, "", "predict_proba"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[56, 1, 1, "", "convert_long_to_wide_dataset"], [56, 1, 1, "", "get_active_learning_scores"], [56, 1, 1, "", "get_active_learning_scores_ensemble"], [56, 1, 1, "", "get_label_quality_multiannotator"], [56, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [56, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[57, 0, 0, "-", "dataset"], [58, 0, 0, "-", "filter"], [60, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[57, 1, 1, "", "common_multilabel_issues"], [57, 1, 1, "", "multilabel_health_summary"], [57, 1, 1, "", "overall_multilabel_health_score"], [57, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[58, 1, 1, "", "find_label_issues"], [58, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[60, 1, 1, "", "get_label_quality_scores"], [60, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[61, 0, 0, "-", "filter"], [63, 0, 0, "-", "rank"], [64, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[61, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[63, 1, 1, "", "compute_badloc_box_scores"], [63, 1, 1, "", "compute_overlooked_box_scores"], [63, 1, 1, "", "compute_swap_box_scores"], [63, 1, 1, "", "get_label_quality_scores"], [63, 1, 1, "", "issues_from_scores"], [63, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[64, 1, 1, "", "bounding_box_size_distribution"], [64, 1, 1, "", "calculate_per_class_metrics"], [64, 1, 1, "", "class_label_distribution"], [64, 1, 1, "", "get_average_per_class_confusion_matrix"], [64, 1, 1, "", "get_sorted_bbox_count_idxs"], [64, 1, 1, "", "object_counts_per_image"], [64, 1, 1, "", "plot_class_distribution"], [64, 1, 1, "", "plot_class_size_distributions"], [64, 1, 1, "", "visualize"]], "cleanlab.outlier": [[65, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[65, 3, 1, "", "fit"], [65, 3, 1, "", "fit_score"], [65, 3, 1, "", "score"]], "cleanlab.rank": [[66, 1, 1, "", "find_top_issues"], [66, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [66, 1, 1, "", "get_label_quality_ensemble_scores"], [66, 1, 1, "", "get_label_quality_scores"], [66, 1, 1, "", "get_normalized_margin_for_each_label"], [66, 1, 1, "", "get_self_confidence_for_each_label"], [66, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[68, 0, 0, "-", "learn"], [69, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[68, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[68, 3, 1, "", "__init_subclass__"], [68, 3, 1, "", "find_label_issues"], [68, 3, 1, "", "fit"], [68, 3, 1, "", "get_aleatoric_uncertainty"], [68, 3, 1, "", "get_epistemic_uncertainty"], [68, 3, 1, "", "get_label_issues"], [68, 3, 1, "", "get_metadata_routing"], [68, 3, 1, "", "get_params"], [68, 3, 1, "", "predict"], [68, 3, 1, "", "save_space"], [68, 3, 1, "", "score"], [68, 3, 1, "", "set_fit_request"], [68, 3, 1, "", "set_params"], [68, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[69, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[70, 0, 0, "-", "filter"], [72, 0, 0, "-", "rank"], [73, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[70, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[72, 1, 1, "", "get_label_quality_scores"], [72, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[73, 1, 1, "", "common_label_issues"], [73, 1, 1, "", "display_issues"], [73, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[74, 0, 0, "-", "filter"], [76, 0, 0, "-", "rank"], [77, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[74, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[76, 1, 1, "", "get_label_quality_scores"], [76, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[77, 1, 1, "", "common_label_issues"], [77, 1, 1, "", "display_issues"], [77, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 81, 82, 83, 86, 88, 89, 91, 92, 95, 101], "count": [3, 92], "datalab": [4, 6, 8, 9, 10, 84, 85, 87, 88, 89, 92, 95], "creat": [6, 84, 85, 92, 94], "your": [6, 78, 84, 85, 89, 91, 92], "own": 6, "issu": [6, 8, 9, 20, 29, 78, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 100, 101], "manag": [6, 20], "prerequisit": 6, "implement": 6, "issuemanag": [6, 84], "basic": 6, "check": 6, "intermedi": 6, "advanc": [6, 84], "us": [6, 81, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "gener": 7, "cluster": [7, 91], "id": 7, "guid": [8, 10], "type": [8, 9, 92], "custom": [8, 84], "cleanlab": [8, 9, 78, 81, 82, 83, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99, 100, 101], "studio": [8, 9], "easi": [8, 9, 78, 86, 88, 89], "mode": [8, 9, 78, 86, 88, 89], "can": [9, 85, 90, 91, 92, 94], "detect": [9, 85, 88, 89, 91, 92, 96, 97], "estim": [9, 92, 94, 95], "each": 9, "label": [9, 22, 24, 29, 78, 81, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 96, 99, 100, 101], "outlier": [9, 27, 49, 65, 86, 88, 89, 95, 97], "Near": [9, 85, 86, 88, 89], "duplic": [9, 18, 85, 86, 88, 89, 91, 95], "non": [9, 89], "iid": [9, 89], "class": [9, 79, 92, 100], "imbal": [9, 19], "imag": [9, 86, 97], "specif": [9, 20, 100], "underperform": [9, 91], "group": [9, 91], "null": [9, 26], "data": [9, 11, 78, 81, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "valuat": 9, "option": 9, "paramet": [9, 92], "get": [10, 84, 85, 94, 95, 96, 100, 101], "start": [10, 90], "api": 10, "refer": 10, "data_issu": 12, "factori": 13, "intern": [14, 43], "issue_find": 15, "data_valu": 17, "issue_manag": [20, 21], "regist": 20, "ml": [20, 91, 92], "task": [20, 33], "multilabel": 23, "noniid": 25, "regress": [28, 67, 68, 69, 91, 99], "prioriti": 29, "order": 29, "find": [29, 78, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101], "underperforming_group": 30, "model_output": 31, "report": [32, 86], "dataset": [35, 57, 78, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101], "cifar_cnn": 36, "coteach": 37, "experiment": 38, "label_issues_batch": 39, "mnist_pytorch": 40, "span_classif": 41, "filter": [42, 58, 61, 70, 74, 92], "label_quality_util": 44, "latent_algebra": 45, "multiannotator_util": 46, "multilabel_scor": 47, "multilabel_util": 48, "token_classification_util": 50, "util": 51, "valid": [52, 86, 98], "fasttext": 53, "model": [54, 78, 81, 82, 83, 86, 88, 89, 91, 92, 94, 95, 96, 97, 99], "kera": 55, "multiannot": [56, 94], "multilabel_classif": 59, "rank": [60, 63, 66, 69, 72, 76, 92], "object_detect": 62, "summari": [64, 73, 77], "learn": [68, 81, 85, 91, 92], "segment": [71, 100], "token_classif": [75, 101], "open": [78, 91], "sourc": [78, 91], "document": 78, "quickstart": 78, "1": [78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101], "instal": [78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "2": [78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101], "common": [78, 79, 101], "3": [78, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 99, 100, 101], "handl": [78, 91], "error": [78, 82, 86, 91, 92, 94, 95, 96, 99, 100, 101], "train": [78, 81, 82, 83, 91, 97, 99], "robust": [78, 81, 82, 92, 99], "noisi": [78, 81, 82, 92, 99], "4": [78, 81, 82, 83, 84, 85, 86, 88, 89, 92, 94, 96, 97, 99], "curat": [78, 90], "fix": [78, 91], "level": [78, 90, 92, 101], "5": [78, 81, 83, 85, 86, 88, 92, 94, 99], "improv": [78, 94], "via": [78, 92, 94], "mani": [78, 92], "other": [78, 94, 96, 99], "techniqu": 78, "contribut": 78, "how": [79, 91, 92, 94, 95, 101], "migrat": 79, "version": 79, "0": 79, "from": [79, 81, 82, 84, 85, 92, 99], "pre": [79, 83, 91, 97], "function": [79, 84], "name": 79, "chang": 79, "modul": [79, 92], "new": 79, "remov": 79, "argument": [79, 84], "variabl": 79, "cleanlearn": [80, 91, 92], "tutori": [80, 87, 90, 93], "tabular": [81, 88], "scikit": 81, "requir": [81, 82, 84, 85, 86, 88, 89, 94, 95, 96, 97, 99, 100, 101], "depend": [81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 99, 100, 101], "load": [81, 82, 83, 84, 85, 88, 89, 99], "process": [81, 88, 97, 99], "select": [81, 88], "comput": [81, 83, 86, 88, 89, 91, 94, 98], "out": [81, 83, 84, 85, 86, 88, 89, 94, 98], "sampl": [81, 83, 84, 85, 86, 88, 89, 94, 98], "predict": [81, 83, 84, 85, 86, 88, 89, 94, 95, 96, 98], "probabl": [81, 83, 84, 85, 86, 88, 89, 94, 98], "more": [81, 82, 85, 92, 99], "text": [82, 89, 101], "format": [82, 89, 91, 95, 96], "defin": [82, 86, 89, 99], "potenti": [82, 94, 99], "audio": 83, "speechbrain": 83, "import": [83, 84, 85, 86, 90, 92, 94], "them": [83, 90, 92], "featur": [83, 86, 97], "fit": 83, "linear": 83, "workflow": [84, 92], "audit": [84, 85], "classifi": [84, 85], "instanti": 84, "object": [84, 96], "increment": 84, "search": 84, "specifi": [84, 91], "nondefault": 84, "save": 84, "ad": 84, "A": 85, "unifi": 85, "all": [85, 92], "kind": [85, 96], "skip": [85, 90, 92, 94], "detail": [85, 90, 92, 94], "about": 85, "addit": 85, "inform": [85, 86], "pytorch": [86, 97], "fetch": [86, 90], "normal": 86, "fashion": 86, "mnist": 86, "prepar": 86, "k": [86, 88, 98], "fold": [86, 98], "cross": [86, 98], "embed": [86, 97], "7": [86, 92], "view": 86, "most": [86, 101], "like": 86, "exampl": [86, 91, 92, 97], "sever": 86, "set": [86, 92], "dark": 86, "top": [86, 100], "low": 86, "numer": 88, "categor": 88, "column": 88, "construct": 88, "nearest": 88, "neighbour": 88, "graph": 88, "drift": [89, 95], "evalu": 90, "health": [90, 92], "8": [90, 92], "popular": 90, "faq": 91, "what": [91, 92, 98], "do": [91, 92], "i": [91, 92, 98], "infer": 91, "correct": 91, "ha": 91, "flag": 91, "should": 91, "v": 91, "test": [91, 92, 97], "big": 91, "limit": 91, "memori": 91, "why": 91, "isn": 91, "t": 91, "work": [91, 92, 94, 101], "me": 91, "differ": [91, 96], "clean": [91, 92], "final": 91, "hyperparamet": 91, "tune": 91, "onli": 91, "one": [91, 92, 95, 100], "doe": [91, 94, 101], "take": 91, "so": 91, "long": 91, "slice": 91, "when": [91, 92], "identifi": [91, 96], "run": 91, "licens": 91, "under": 91, "an": 91, "answer": 91, "question": 91, "The": 92, "centric": 92, "ai": 92, "machin": 92, "find_label_issu": 92, "line": 92, "code": 92, "visual": [92, 96, 97, 100], "twenti": 92, "lowest": 92, "qualiti": [92, 94, 95, 96, 100, 101], "see": 92, "now": 92, "let": 92, "": 92, "happen": 92, "we": 92, "merg": 92, "seafoam": 92, "green": 92, "yellow": 92, "too": 92, "you": 92, "re": 92, "6": 92, "One": 92, "score": [92, 94, 95, 96, 100, 101], "rule": 92, "overal": [92, 100], "accur": 92, "thi": 92, "directli": 92, "fulli": 92, "character": 92, "nois": 92, "matrix": [92, 95], "joint": 92, "prior": 92, "true": 92, "distribut": 92, "flip": 92, "rate": 92, "ani": 92, "again": 92, "support": 92, "lot": 92, "method": 92, "filter_bi": 92, "automat": 92, "everi": 92, "uniqu": 92, "num_label_issu": 92, "threshold": 92, "found": 92, "Not": 92, "sure": 92, "ensembl": 92, "multipl": [92, 94], "predictor": 92, "consensu": 94, "annot": 94, "initi": 94, "major": 94, "vote": 94, "better": 94, "statist": 94, "compar": 94, "inspect": 94, "retrain": 94, "further": 94, "multi": 95, "beyond": 95, "mislabel": [95, 100, 101], "given": 95, "hot": 95, "binari": 95, "without": 95, "applic": 95, "real": 95, "download": [96, 100, 101], "objectlab": 96, "exploratori": 96, "analysi": 96, "timm": 97, "cifar10": 97, "some": 97, "pred_prob": [97, 100, 101], "wai": 99, "semant": 100, "which": 100, "ar": 100, "commonli": 100, "focus": 100, "token": 101, "word": 101, "sentenc": 101, "contain": 101, "particular": 101}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "datalab": [[4, "module-cleanlab.datalab.datalab"], [10, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[6, "creating-your-own-issues-manager"]], "Prerequisites": [[6, "prerequisites"]], "Implementing IssueManagers": [[6, "implementing-issuemanagers"]], "Basic Issue Check": [[6, "basic-issue-check"]], "Intermediate Issue Check": [[6, "intermediate-issue-check"]], "Advanced Issue Check": [[6, "advanced-issue-check"]], "Use with Datalab": [[6, "use-with-datalab"]], "Generating Cluster IDs": [[7, "generating-cluster-ids"]], "Datalab guides": [[8, "datalab-guides"]], "Types of issues": [[8, "types-of-issues"]], "Customizing issue types": [[8, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[8, "cleanlab-studio-easy-mode"], [9, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[9, "datalab-issue-types"]], "Types of issues Datalab can detect": [[9, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[9, "estimates-for-each-issue-type"]], "Label Issue": [[9, "label-issue"]], "Outlier Issue": [[9, "outlier-issue"]], "(Near) Duplicate Issue": [[9, "near-duplicate-issue"]], "Non-IID Issue": [[9, "non-iid-issue"]], "Class Imbalance Issue": [[9, "class-imbalance-issue"]], "Image-specific Issues": [[9, "image-specific-issues"]], "Underperforming Group Issue": [[9, "underperforming-group-issue"]], "Null Issue": [[9, "null-issue"]], "Data Valuation Issue": [[9, "data-valuation-issue"]], "Optional Issue Parameters": [[9, "optional-issue-parameters"]], "Label Issue Parameters": [[9, "label-issue-parameters"]], "Outlier Issue Parameters": [[9, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[9, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[9, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[9, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[9, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[9, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[9, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[9, "image-issue-parameters"]], "Getting Started": [[10, "getting-started"]], "Guides": [[10, "guides"]], "API Reference": [[10, "api-reference"]], "data": [[11, "module-cleanlab.datalab.internal.data"]], "data_issues": [[12, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[13, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[14, "internal"], [43, "internal"]], "issue_finder": [[15, "issue-finder"]], "data_valuation": [[17, "data-valuation"]], "duplicate": [[18, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[19, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[20, "issue-manager"], [21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[20, "registered-issue-managers"]], "ML task-specific issue managers": [[20, "ml-task-specific-issue-managers"]], "label": [[22, "module-cleanlab.datalab.internal.issue_manager.label"], [24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [29, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[23, "multilabel"]], "noniid": [[25, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[26, "null"]], "outlier": [[27, "module-cleanlab.datalab.internal.issue_manager.outlier"], [49, "module-cleanlab.internal.outlier"], [65, "module-cleanlab.outlier"]], "regression": [[28, "regression"], [67, "regression"]], "Priority Order for finding issues:": [[29, null]], "underperforming_group": [[30, "underperforming-group"]], "model_outputs": [[31, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[32, "report"]], "task": [[33, "task"]], "dataset": [[35, "module-cleanlab.dataset"], [57, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[36, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[37, "module-cleanlab.experimental.coteaching"]], "experimental": [[38, "experimental"]], "label_issues_batched": [[39, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[40, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[41, "module-cleanlab.experimental.span_classification"]], "filter": [[42, "module-cleanlab.filter"], [58, "module-cleanlab.multilabel_classification.filter"], [61, "filter"], [70, "filter"], [74, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[44, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[45, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[46, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[47, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[48, "module-cleanlab.internal.multilabel_utils"]], "token_classification_utils": [[50, "module-cleanlab.internal.token_classification_utils"]], "util": [[51, "module-cleanlab.internal.util"]], "validation": [[52, "module-cleanlab.internal.validation"]], "fasttext": [[53, "fasttext"]], "models": [[54, "models"]], "keras": [[55, "module-cleanlab.models.keras"]], "multiannotator": [[56, "module-cleanlab.multiannotator"]], "multilabel_classification": [[59, "multilabel-classification"]], "rank": [[60, "module-cleanlab.multilabel_classification.rank"], [63, "module-cleanlab.object_detection.rank"], [66, "module-cleanlab.rank"], [72, "module-cleanlab.segmentation.rank"], [76, "module-cleanlab.token_classification.rank"]], "object_detection": [[62, "object-detection"]], "summary": [[64, "summary"], [73, "module-cleanlab.segmentation.summary"], [77, "module-cleanlab.token_classification.summary"]], "regression.learn": [[68, "module-cleanlab.regression.learn"]], "regression.rank": [[69, "module-cleanlab.regression.rank"]], "segmentation": [[71, "segmentation"]], "token_classification": [[75, "token-classification"]], "cleanlab open-source documentation": [[78, "cleanlab-open-source-documentation"]], "Quickstart": [[78, "quickstart"]], "1. Install cleanlab": [[78, "install-cleanlab"]], "2. Find common issues in your data": [[78, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[78, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[78, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[78, "improve-your-data-via-many-other-techniques"]], "Contributing": [[78, "contributing"]], "Easy Mode": [[78, "easy-mode"], [86, "Easy-Mode"], [88, "Easy-Mode"], [89, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[79, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[79, "function-and-class-name-changes"]], "Module name changes": [[79, "module-name-changes"]], "New modules": [[79, "new-modules"]], "Removed modules": [[79, "removed-modules"]], "Common argument and variable name changes": [[79, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[80, "cleanlearning-tutorials"]], "Classification with Tabular Data using Scikit-Learn and Cleanlab": [[81, "Classification-with-Tabular-Data-using-Scikit-Learn-and-Cleanlab"]], "1. Install required dependencies": [[81, "1.-Install-required-dependencies"], [82, "1.-Install-required-dependencies"], [88, "1.-Install-required-dependencies"], [89, "1.-Install-required-dependencies"], [99, "1.-Install-required-dependencies"]], "2. Load and process the data": [[81, "2.-Load-and-process-the-data"], [88, "2.-Load-and-process-the-data"], [99, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[81, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [88, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[81, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[81, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[82, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[82, "2.-Load-and-format-the-text-dataset"], [89, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[82, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[82, "4.-Train-a-more-robust-model-from-noisy-labels"], [99, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Audio Classification with SpeechBrain and Cleanlab": [[83, "Audio-Classification-with-SpeechBrain-and-Cleanlab"]], "1. Install dependencies and import them": [[83, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[83, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[83, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[83, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[83, "5.-Use-cleanlab-to-find-label-issues"], [88, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[84, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[84, "Install-and-import-required-dependencies"]], "Create and load the data": [[84, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[84, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[84, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[84, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[84, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[84, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[84, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[85, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[85, "1.-Install-and-import-required-dependencies"], [86, "1.-Install-and-import-required-dependencies"], [94, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[85, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[85, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[85, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[85, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[85, "Get-additional-information"]], "Near duplicate issues": [[85, "Near-duplicate-issues"], [86, "Near-duplicate-issues"]], "Image Classification with PyTorch and Cleanlab": [[86, "Image-Classification-with-PyTorch-and-Cleanlab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[86, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[86, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[86, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[86, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[86, "7.-Use-cleanlab-to-find-issues"]], "View report": [[86, "View-report"]], "Label issues": [[86, "Label-issues"], [88, "Label-issues"], [89, "Label-issues"]], "View most likely examples with label errors": [[86, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[86, "Outlier-issues"], [88, "Outlier-issues"], [89, "Outlier-issues"]], "View most severe outliers": [[86, "View-most-severe-outliers"]], "View sets of near duplicate images": [[86, "View-sets-of-near-duplicate-images"]], "Dark images": [[86, "Dark-images"]], "View top examples of dark images": [[86, "View-top-examples-of-dark-images"]], "Low information images": [[86, "Low-information-images"]], "Datalab Tutorials": [[87, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[88, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[88, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[88, "Near-duplicate-issues"], [89, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[89, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[89, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[89, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[89, "Non-IID-issues-(data-drift)"]], "Find Dataset-level Issues for Dataset Curation": [[90, "Find-Dataset-level-Issues-for-Dataset-Curation"]], "Install dependencies and import them": [[90, "Install-dependencies-and-import-them"], [92, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[90, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[90, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[91, "FAQ"]], "What data can cleanlab detect issues in?": [[91, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[91, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[91, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[91, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[91, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[91, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[91, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[91, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[91, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[91, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[91, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[91, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[91, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[91, "Can't-find-an-answer-to-your-question?"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[92, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[92, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[92, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[92, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[92, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[92, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[92, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[92, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[92, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[92, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[92, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[92, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[92, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[92, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[92, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[92, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[92, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[92, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[92, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[92, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[92, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[92, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[93, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[94, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[94, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[94, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[94, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[94, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[94, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[94, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[94, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[94, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[95, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[95, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[95, "2.-Format-data,-labels,-and-model-predictions"], [96, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[95, "3.-Use-cleanlab-to-find-label-issues"], [96, "3.-Use-cleanlab-to-find-label-issues"], [100, "3.-Use-cleanlab-to-find-label-issues"], [101, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[95, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[95, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[95, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[95, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[95, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[96, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[96, "1.-Install-required-dependencies-and-download-data"], [100, "1.-Install-required-dependencies-and-download-data"], [101, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[96, "Get-label-quality-scores"], [100, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[96, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[96, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[96, "Other-uses-of-visualize"]], "Exploratory data analysis": [[96, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[97, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[97, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[97, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[97, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[97, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[97, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[98, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[98, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[98, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[99, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[99, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[99, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[100, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[100, "2.-Get-data,-labels,-and-pred_probs"], [101, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[100, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[100, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[100, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[101, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[101, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[101, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[101, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[101, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.datalab.datalab"], [10, "module-cleanlab.datalab"], [11, "module-cleanlab.datalab.internal.data"], [12, "module-cleanlab.datalab.internal.data_issues"], [13, "module-cleanlab.datalab.internal.issue_manager_factory"], [14, "module-cleanlab.datalab.internal"], [15, "module-cleanlab.datalab.internal.issue_finder"], [17, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [18, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [19, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [22, "module-cleanlab.datalab.internal.issue_manager.label"], [24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [25, "module-cleanlab.datalab.internal.issue_manager.noniid"], [26, "module-cleanlab.datalab.internal.issue_manager.null"], [27, "module-cleanlab.datalab.internal.issue_manager.outlier"], [29, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [30, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [31, "module-cleanlab.datalab.internal.model_outputs"], [32, "module-cleanlab.datalab.internal.report"], [33, "module-cleanlab.datalab.internal.task"], [35, "module-cleanlab.dataset"], [36, "module-cleanlab.experimental.cifar_cnn"], [37, "module-cleanlab.experimental.coteaching"], [38, "module-cleanlab.experimental"], [39, "module-cleanlab.experimental.label_issues_batched"], [40, "module-cleanlab.experimental.mnist_pytorch"], [41, "module-cleanlab.experimental.span_classification"], [42, "module-cleanlab.filter"], [43, "module-cleanlab.internal"], [44, "module-cleanlab.internal.label_quality_utils"], [45, "module-cleanlab.internal.latent_algebra"], [46, "module-cleanlab.internal.multiannotator_utils"], [47, "module-cleanlab.internal.multilabel_scorer"], [48, "module-cleanlab.internal.multilabel_utils"], [49, "module-cleanlab.internal.outlier"], [50, "module-cleanlab.internal.token_classification_utils"], [51, "module-cleanlab.internal.util"], [52, "module-cleanlab.internal.validation"], [54, "module-cleanlab.models"], [55, "module-cleanlab.models.keras"], [56, "module-cleanlab.multiannotator"], [57, "module-cleanlab.multilabel_classification.dataset"], [58, "module-cleanlab.multilabel_classification.filter"], [59, "module-cleanlab.multilabel_classification"], [60, "module-cleanlab.multilabel_classification.rank"], [61, "module-cleanlab.object_detection.filter"], [62, "module-cleanlab.object_detection"], [63, "module-cleanlab.object_detection.rank"], [64, "module-cleanlab.object_detection.summary"], [65, "module-cleanlab.outlier"], [66, "module-cleanlab.rank"], [67, "module-cleanlab.regression"], [68, "module-cleanlab.regression.learn"], [69, "module-cleanlab.regression.rank"], [70, "module-cleanlab.segmentation.filter"], [71, "module-cleanlab.segmentation"], [72, "module-cleanlab.segmentation.rank"], [73, "module-cleanlab.segmentation.summary"], [74, "module-cleanlab.token_classification.filter"], [75, "module-cleanlab.token_classification"], [76, "module-cleanlab.token_classification.rank"], [77, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "datalab (class in cleanlab.datalab.datalab)": [[4, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[4, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[4, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[10, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[11, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[11, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[11, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[11, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[11, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[11, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[11, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[11, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[11, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[11, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[11, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[11, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[11, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[11, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[11, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[12, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[12, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[13, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[14, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[15, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[17, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[18, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[19, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[22, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[25, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[26, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[27, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[29, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[30, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[31, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[32, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[32, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[32, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[32, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[33, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[33, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[35, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[36, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[36, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[36, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.forward"], [36, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[37, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[38, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[39, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[40, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [40, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [40, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [40, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[41, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[42, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[42, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[42, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[43, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[44, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[44, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[45, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[46, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[47, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[48, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.outlier": [[49, "module-cleanlab.internal.outlier"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[49, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[50, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[51, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[52, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[54, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[55, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[55, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[55, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[56, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[57, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[58, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[58, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[58, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[59, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[60, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[60, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[60, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[61, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[61, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[62, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[63, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[64, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[65, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[65, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[66, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[66, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[66, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[67, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[68, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[68, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[68, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[69, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[69, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[70, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[70, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[71, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[72, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[72, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[72, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[73, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[74, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[74, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[75, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[76, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[76, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[76, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[77, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.filter_by_token"]]}})